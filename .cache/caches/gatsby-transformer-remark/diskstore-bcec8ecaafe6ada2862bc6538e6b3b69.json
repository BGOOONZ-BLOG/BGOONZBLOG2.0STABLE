{"expireTime":9007200909776158000,"key":"transformer-remark-markdown-html-21eb9c52766c13222e39475c9ebcfb22-gatsby-remark-prismjs-copy-buttongatsby-remark-prismjs-","val":"<h2>Python Practice:</h2>\n<h1>Python Problems &#x26; Solutions For Beginners</h1>\n<p>Introduction to python taught through example problems. Solutions are included in embedded repl.it at the bottom of this page for you to…</p>\n<hr>\n<h3>Python Problems &#x26; Solutions For Beginners</h3>\n<h4>Introduction to python taught through example problems. Solutions are included in embedded repl.it at the bottom of this page for you to practice and refactor.</h4>\n<h3>Python Practice Problems</h3>\n<figure>\n<img src=\"https://cdn-images-1.medium.com/max/800/0*dMdMGwOJKHJ-5sOP.gif\" class=\"graf-image\" />\n</figure>\n<hr>\n<h4>Here are some other articles for reference if you need them:</h4>\n<a href=\"https://medium.com/geekculture/beginners-guide-to-python-e5a59b5bb64d\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://medium.com/geekculture/beginners-guide-to-python-e5a59b5bb64d\">\n<strong>Beginners Guide To Python</strong>\n<br />\n<em>My favorite language for maintainability is Python. It has simple, clean syntax, object encapsulation, good library…</em>medium.com</a>\n<a href=\"https://medium.com/geekculture/beginners-guide-to-python-e5a59b5bb64d\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\">\n</a>\n<a href=\"https://levelup.gitconnected.com/python-study-guide-for-a-native-javascript-developer-5cfdf3d2bdfb\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://levelup.gitconnected.com/python-study-guide-for-a-native-javascript-developer-5cfdf3d2bdfb\">\n<strong>Python Study Guide for a JavaScript Programmer</strong>\n<br />\n<em>A guide to commands in Python from what you know in JavaScript</em>levelup.gitconnected.com</a>\n<a href=\"https://levelup.gitconnected.com/python-study-guide-for-a-native-javascript-developer-5cfdf3d2bdfb\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\">\n</a>\n<hr>\n<h3>Here are the problems without solutions for you to practice with:</h3>\n<hr>\n<h3>Problem 1</h3>\n<p>Create a program that asks the user to enter their name and their age. Print out a message addressed to them that tells them the year that they will turn <code class=\"language-text\">100</code> years old.</p>\n<p>The <code class=\"language-text\">datetime</code> module supplies classes for manipulating dates and times.</p>\n<p>While date and time arithmetic is supported, the focus of the implementation is on efficient attribute extraction for output formatting and manipulation.</p>\n<a href=\"https://docs.python.org/3/library/datetime.html\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://docs.python.org/3/library/datetime.html\">\n<strong>datetime - Basic date and time types - Python 3.9.6 documentation</strong>\n<br />\n<em>Only one concrete class, the class, is supplied by the module. The class can represent simple timezones with fixed…</em>docs.python.org</a>\n<a href=\"https://docs.python.org/3/library/datetime.html\" class=\"js-mixtapeImage mixtapeImage mixtapeImage--empty u-ignoreBlock\">\n</a>\n<h3>Problem 2</h3>\n<p>Ask the user for a number. Depending on whether the number is <code class=\"language-text\">even</code> or <code class=\"language-text\">odd</code>, print out an appropriate message to the user.</p>\n<h4>Bonus:</h4>\n<ol>\n<li><span id=\"eebc\">If the number is a multiple of <code class=\"language-text\">4</code>, print out a different message.</span></li>\n<li><span id=\"306e\">Ask the user for two numbers: one number to check (call it num) and one number to divide by (check). If check divides evenly into num, tell that to the user. If not, print a different appropriate message.</span></li>\n</ol>\n<h3>Problem 3</h3>\n<p>Take a list and write a program that prints out all the elements of the list that are <code class=\"language-text\">less</code> than <code class=\"language-text\">5</code>.</p>\n<p>Extras:</p>\n<ol>\n<li><span id=\"fe03\">Instead of printing the elements one by one, make a new list that has all the elements less than <code class=\"language-text\">5</code> from this list in it and print out this new list.</span></li>\n<li><span id=\"186b\">Write this in one line of Python.</span></li>\n<li><span id=\"9cd1\">Ask the user for a number and return a list that contains only elements from the original list a that are smaller than that number given by the user.</span></li>\n</ol>\n<h3>Problem 4</h3>\n<p>Create a program that asks the user for a number and then prints out a list of all the divisors of that number. (If you don't know what a divisor is, it is a number that divides evenly into another number.</p>\n<p>For example, <code class=\"language-text\">13</code> is a divisor of <code class=\"language-text\">26</code> because <code class=\"language-text\">26 / 13</code> has no remainder.)</p>\n<h3>Problem 5</h3>\n<p>Take two lists, and write a program that returns a list that contains only the elements that are <code class=\"language-text\">common between the lists (without duplicates)</code>. Make sure your program works on two lists of different sizes.</p>\n<a href=\"https://docs.python.org/3/library/random.html\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://docs.python.org/3/library/random.html\">\n<strong>random - Generate pseudo-random numbers - Python 3.9.6 documentation</strong>\n<br />\n<em>Source code: Lib/random.py This module implements pseudo-random number generators for various distributions. For…</em>docs.python.org</a>\n<a href=\"https://docs.python.org/3/library/random.html\" class=\"js-mixtapeImage mixtapeImage mixtapeImage--empty u-ignoreBlock\">\n</a>\n<p>Bonus:</p>\n<ol>\n<li><span id=\"e18a\">Randomly generate two lists to test this.</span></li>\n<li><span id=\"148a\">Write this in one line of Python.</span></li>\n</ol>\n<h3>Problem 6</h3>\n<p>Ask the user for a string and print out whether this string is a <code class=\"language-text\">palindrome</code> or not. (A palindrome is a string that reads the same forwards and backwards.)</p>\n<blockquote>\n<p>Here's 5 ways to reverse a string (courtesy of <a href=\"https://www.geeksforgeeks.org/reverse-string-python-5-different-ways/\" class=\"markup--anchor markup--pullquote-anchor\">geeksforgeeks</a>)</p>\n</blockquote>\n<hr>\n<h3>Problem 7</h3>\n<p>Let's say I give you a list saved in a variable: a = <code class=\"language-text\">[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</code>.</p>\n<p>Write one line of Python that takes this list a and makes a new list that has only the <code class=\"language-text\">even</code> elements of this list in it.</p>\n<h3>Problem 8</h3>\n<p>Make a two-player <code class=\"language-text\">Rock-Paper-Scissors</code> game.</p>\n<p><strong>Hint:</strong><br>\nAsk for player plays (using input), compare them. Print out a message of congratulations to the winner, and ask if the players want to start a new game.</p>\n<figure>\n<img src=\"https://cdn-images-1.medium.com/max/800/0*1_4w6u4D7EDi2r4h.png\" class=\"graf-image\" />\n</figure>### Problem 9\n<p>Generate a random number between <code class=\"language-text\">1 and 100 (including 1 and 100)</code>. Ask the user to guess the number, then tell them whether they guessed <code class=\"language-text\">too low</code>, <code class=\"language-text\">too high</code>, or <code class=\"language-text\">exactly right</code>.</p>\n<blockquote>\n<p><strong>Hint:</strong><br>\nRemember to use the user input from the very first exercise.</p>\n</blockquote>\n<p><strong>Extras:</strong><br>\nKeep the game going until the user types <code class=\"language-text\">\"exit\"</code>.<br>\nKeep track of how many guesses the user has taken, and when the game ends, print this out.</p>\n<h3>Problem 10</h3>\n<p>Write a program that asks the user how many Fibonacci numbers to generate and then generates them. Take this opportunity to think about how you can use functions. Make sure to ask the user to enter the number of numbers in the sequence to generate.</p>\n<p><strong>Hint:</strong><br>\nThe Fibonacci sequence is a sequence of numbers where the next number in the sequence is the sum of the previous two numbers in the sequence. The sequence looks like this: <code class=\"language-text\">1, 1, 2, 3, 5, 8, 13, …</code></p>\n<figure>\n<img src=\"https://cdn-images-1.medium.com/max/800/0*2xJsVLGikF6dg7qc.png\" class=\"graf-image\" />\n</figure>\n<hr>\n<h3>Intermediate Problems:</h3>\n<figure>\n<img src=\"https://cdn-images-1.medium.com/max/800/0*hTU58jGsgkrszi76.gif\" class=\"graf-image\" />\n</figure>\n<hr>\n<h3>Problem 11</h3>\n<p>In linear algebra, <em>a Toeplitz matrix is one in which the elements on any given diagonal from top left to bottom right are identical.</em><br>\nHere is an example:</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1 2 3 4 8\n5 1 2 3 4\n4 5 1 2 3\n7 4 5 1 2</code></pre></div>\n<p>Write a program to determine whether a given input is a <code class=\"language-text\">Toeplitz</code> matrix.</p>\n<h3>Problem 12</h3>\n<p>Given a positive integer <code class=\"language-text\">N</code>, find the smallest number of steps it will take to reach <code class=\"language-text\">1</code>.</p>\n<p>There are two kinds of permitted steps:<br>\n— -> You may decrement N to N — 1.<br>\n— -> If <code class=\"language-text\">a * b = N</code>, you may decrement <code class=\"language-text\">N to the larger of a and b</code>.</p>\n<p>For example, given 100, you can reach 1 in 5 steps with the following route:<br>\n<code class=\"language-text\">100 -> 10 -> 9 -> 3 -> 2 -> 1.</code></p>\n<h3>Problem 13</h3>\n<p>Consider the following scenario: there are <code class=\"language-text\">N</code> mice and <code class=\"language-text\">N</code> holes placed at integer points along a line. Given this, find a method that maps mice to holes such that the largest number of steps any mouse takes is minimized.</p>\n<p>Each move consists of moving one mouse <code class=\"language-text\">one</code> unit to the <code class=\"language-text\">left</code> or <code class=\"language-text\">right</code>, and only <code class=\"language-text\">one</code> mouse can fit inside each hole.</p>\n<p>For example, suppose the mice are positioned at <code class=\"language-text\">[1, 4, 9, 15]</code>, and the holes are located at <code class=\"language-text\">[10, -5, 0, 16]</code>. In this case, the best pairing would require us to send the mouse at <code class=\"language-text\">1</code> to the hole at <code class=\"language-text\">-5</code>, so our function should return <code class=\"language-text\">6</code>.</p>\n<h3>My Blog:</h3>\n<a href=\"https://master--bgoonz-blog.netlify.app/\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://master--bgoonz-blog.netlify.app/\">\n<strong>Web-Dev-Hub</strong>\n<br />\n<em>Memoization, Tabulation, and Sorting Algorithms by Example Why is looking at runtime not a reliable method of…</em>master--bgoonz-blog.netlify.app</a>\n<a href=\"https://master--bgoonz-blog.netlify.app/\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\">\n</a>\n<a href=\"https://bryanguner.medium.com/a-list-of-all-of-my-articles-to-link-to-future-posts-1f6f88ebdf5b\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/a-list-of-all-of-my-articles-to-link-to-future-posts-1f6f88ebdf5b\">\n<strong>A list of all of my articles to link to future posts</strong>\n<br />\n<em>You should probably skip this one… seriously it's just for internal use!</em>bryanguner.medium.com</a>\n<a href=\"https://bryanguner.medium.com/a-list-of-all-of-my-articles-to-link-to-future-posts-1f6f88ebdf5b\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\">\n</a>\n<hr>\n<h1>Python</h1>\n<ul>\n<li>Python is an interpreted, high-level and general-purpose, dynamically typed programming language</li>\n<li>-</li>\n<li>It is also Object oriented, modular oriented and a</li>\n<li>-</li>\n<li>In Python, everything is considered as an Object.</li>\n<li>-</li>\n<li>A python file has an extension of .py</li>\n<li>Python follows Indentation to separate code blocks instead of flower brackets({}).</li>\n<li>\n<p>We can run a python file by the following command in cmd(Windows) or shell(mac/linux).</p>\n<p><code class=\"language-text\">python &lt;filename.py></code></p>\n</li>\n</ul>\n<h4>By default, the python doesn't require any imports to run a python file.</h4>\n<h2>Create and execute a program</h2>\n<ol>\n<li>Open up a terminal/cmd</li>\n<li>Create the program: nano/cat > nameProgram.py</li>\n<li>Write the program and save it</li>\n<li>python nameProgram.py</li>\n</ol>\n<br>\n<h3>Basic Datatypes</h3>\n<table>\n<thead>\n<tr>\n<th>Data Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>int</td>\n<td>Integer values [0, 1, -2, 3]</td>\n</tr>\n<tr>\n<td>float</td>\n<td>Floating point values [0.1, 4.532, -5.092]</td>\n</tr>\n<tr>\n<td>char</td>\n<td>Characters [a, b, @, !, `]</td>\n</tr>\n<tr>\n<td>str</td>\n<td>Strings [abc, AbC, A@B, sd!, `asa]</td>\n</tr>\n<tr>\n<td>bool</td>\n<td>Boolean Values [True, False]</td>\n</tr>\n<tr>\n<td>char</td>\n<td>Characters [a, b, @, !, `]</td>\n</tr>\n<tr>\n<td>complex</td>\n<td>Complex numbers [2+3j, 4-1j]</td>\n</tr>\n</tbody>\n</table>\n<br>\n<h2>Keywords</h2>\n<br>\n<table>\n<thead>\n<tr>\n<th>Keyword</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>break</td>\n<td>used to exit loop and used to exit</td>\n</tr>\n<tr>\n<td>char</td>\n<td>basic declaration of a type character</td>\n</tr>\n<tr>\n<td>const</td>\n<td>prefix declaration meaning variable can not be changed</td>\n</tr>\n<tr>\n<td>continue</td>\n<td>go to bottom of loop in for, while loops</td>\n</tr>\n<tr>\n<td>class</td>\n<td>to define a class</td>\n</tr>\n<tr>\n<td>def</td>\n<td>to define a function</td>\n</tr>\n<tr>\n<td>elif</td>\n<td>shortcut for (else if) used in else if ladder</td>\n</tr>\n<tr>\n<td>else</td>\n<td>executable statement, part of \"if\" structure</td>\n</tr>\n<tr>\n<td>float</td>\n<td>basic declaration of floating point</td>\n</tr>\n<tr>\n<td>for</td>\n<td>executable statement, for loop</td>\n</tr>\n<tr>\n<td>from</td>\n<td>executable statement, used to import only specific objects from a package</td>\n</tr>\n<tr>\n<td>if</td>\n<td>executable statement</td>\n</tr>\n<tr>\n<td>import</td>\n<td>to import modules</td>\n</tr>\n<tr>\n<td>pass</td>\n<td>keyword to specify noting is happening in the codeblock, generally used in classes</td>\n</tr>\n<tr>\n<td>return</td>\n<td>executable statement with or without a value</td>\n</tr>\n<tr>\n<td>while</td>\n<td>executable statement, while loop</td>\n</tr>\n</tbody>\n</table>\n<br>\n<h2>Operators</h2>\n<br>\n<table>\n<thead>\n<tr>\n<th>Operator</th>\n<th>Description</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>( )</td>\n<td>grouping parenthesis, function call, tuple declaration</td>\n<td></td>\n</tr>\n<tr>\n<td>[ ]</td>\n<td>array indexing, also declaring lists etc.</td>\n<td></td>\n</tr>\n<tr>\n<td>!</td>\n<td>relational not, complement, ! a yields true or false</td>\n<td></td>\n</tr>\n<tr>\n<td>~</td>\n<td>bitwise not, ones complement, ~a</td>\n<td></td>\n</tr>\n<tr>\n<td>-</td>\n<td>unary minus, - a</td>\n<td></td>\n</tr>\n<tr>\n<td>+</td>\n<td>unary plus, + a</td>\n<td></td>\n</tr>\n<tr>\n<td>*</td>\n<td>multiply, a * b</td>\n<td></td>\n</tr>\n<tr>\n<td>/</td>\n<td>divide, a / b</td>\n<td></td>\n</tr>\n<tr>\n<td>%</td>\n<td>modulo, a % b</td>\n<td></td>\n</tr>\n<tr>\n<td>+</td>\n<td>add, a + b</td>\n<td></td>\n</tr>\n<tr>\n<td>-</td>\n<td>subtract, a - b</td>\n<td></td>\n</tr>\n<tr>\n<td>&#x3C;&#x3C;</td>\n<td>shift left, left operand is shifted left by right operand bits</td>\n<td></td>\n</tr>\n<tr>\n<td>>></td>\n<td>shift right, left operand is shifted right by right operand bits</td>\n<td></td>\n</tr>\n<tr>\n<td>&#x3C;</td>\n<td>less than, result is true or false, a %lt; b</td>\n<td></td>\n</tr>\n<tr>\n<td>&#x3C;=</td>\n<td>less than or equal, result is true or false, a &#x3C;= b</td>\n<td></td>\n</tr>\n<tr>\n<td>></td>\n<td>greater than, result is true or false, a > b</td>\n<td></td>\n</tr>\n<tr>\n<td>>=</td>\n<td>greater than or equal, result is true or false, a >= b</td>\n<td></td>\n</tr>\n<tr>\n<td>==</td>\n<td>equal, result is true or false, a == b</td>\n<td></td>\n</tr>\n<tr>\n<td>!=</td>\n<td>not equal, result is true or false, a != b</td>\n<td></td>\n</tr>\n<tr>\n<td>&#x26;</td>\n<td>bitwise and, a &#x26; b</td>\n<td></td>\n</tr>\n<tr>\n<td>^</td>\n<td>bitwise exclusive or XOR, a ^ b</td>\n<td></td>\n</tr>\n<tr>\n<td>|</td>\n<td>bitwise or, a</td>\n<td>b</td>\n</tr>\n<tr>\n<td>&#x26;&#x26;, and</td>\n<td>relational and, result is true or false, a &#x3C; b &#x26;&#x26; c >= d</td>\n<td></td>\n</tr>\n<tr>\n<td>||, or</td>\n<td>relational or, result is true or false, a &#x3C; b || c >= d</td>\n<td></td>\n</tr>\n<tr>\n<td>=</td>\n<td>store or assignment</td>\n<td></td>\n</tr>\n<tr>\n<td>+=</td>\n<td>add and store</td>\n<td></td>\n</tr>\n<tr>\n<td>-=</td>\n<td>subtract and store</td>\n<td></td>\n</tr>\n<tr>\n<td>*=</td>\n<td>multiply and store</td>\n<td></td>\n</tr>\n<tr>\n<td>/=</td>\n<td>divide and store</td>\n<td></td>\n</tr>\n<tr>\n<td>%=</td>\n<td>modulo and store</td>\n<td></td>\n</tr>\n<tr>\n<td>&#x3C;&#x3C;=</td>\n<td>shift left and store</td>\n<td></td>\n</tr>\n<tr>\n<td>>>=</td>\n<td>shift right and store</td>\n<td></td>\n</tr>\n<tr>\n<td>&#x26;=</td>\n<td>bitwise and and store</td>\n<td></td>\n</tr>\n<tr>\n<td>^=</td>\n<td>bitwise exclusive or and store</td>\n<td></td>\n</tr>\n<tr>\n<td>|=</td>\n<td>bitwise or and store</td>\n<td></td>\n</tr>\n<tr>\n<td>,</td>\n<td>separator as in ( y=x,z=++x )</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Basic Data Structures</h3>\n<h3>List</h3>\n<ul>\n<li>List is a collection which is ordered and changeable. Allows duplicate members.</li>\n<li>-</li>\n<li>Lists are created using square brackets:</li>\n</ul>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">thislist = [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;]</code></pre></div>\n<ul>\n<li>List items are ordered, changeable, and allow duplicate values.</li>\n<li>-</li>\n<li>List items are indexed, the first item has index <code class=\"language-text\">[0]</code>, the second item has index <code class=\"language-text\">[1]</code> etc.</li>\n<li>-</li>\n<li>The list is changeable, meaning that we can change, add, and remove items in a list after it has been created.</li>\n<li>To determine how many items a list has, use the <code class=\"language-text\">len()</code> function.</li>\n<li>A list can contain different data types:</li>\n</ul>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">list1 = [&quot;abc&quot;, 34, True, 40, &quot;male&quot;]</code></pre></div>\n<ul>\n<li>It is also possible to use the list() constructor when creating a new list</li>\n</ul>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">thislist = list((&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;))  # note the double round-brackets</code></pre></div>\n<h3>Tuple</h3>\n<ul>\n<li>Tuple is a collection which is ordered and unchangeable. Allows duplicate members.</li>\n<li>A tuple is a collection which is ordered and unchangeable.</li>\n<li>Tuples are written with round brackets.</li>\n</ul>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">thistuple = (&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;)</code></pre></div>\n<ul>\n<li>Tuple items are ordered, unchangeable, and allow duplicate values.</li>\n<li>Tuple items are indexed, the first item has index <code class=\"language-text\">[0]</code>, the second item has index <code class=\"language-text\">[1]</code> etc.</li>\n<li>When we say that tuples are ordered, it means that the items have a defined order, and that order will not change.</li>\n<li>-</li>\n<li>Tuples are unchangeable, meaning that we cannot change, add or remo</li>\n<li>Since tuple are indexed, tuples can have items with the same value:</li>\n<li>Tuples allow duplicate values:</li>\n</ul>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">thistuple = (&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;apple&quot;, &quot;cherry&quot;)</code></pre></div>\n<ul>\n<li>To determine how many items a tuple has, use the <code class=\"language-text\">len()</code>function:</li>\n</ul>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">thistuple = (&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;)\nprint(len(thistuple))</code></pre></div>\n<ul>\n<li>To create a tuple with only one item, you have to add a comma after the item, otherwise Python will not recognize it as a tuple.</li>\n</ul>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">thistuple = (&quot;apple&quot;,)\nprint(type(thistuple))\n\n#NOT a tuple\nthistuple = (&quot;apple&quot;)\nprint(type(thistuple))</code></pre></div>\n<ul>\n<li>It is also possible to use the tuple() constructor to make a tuple.</li>\n</ul>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">thistuple = tuple((&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;)) # note the double round-brackets\nprint(thistuple)</code></pre></div>\n<h3>Set</h3>\n<ul>\n<li>Set is a collection which is unordered and unindexed. No duplicate members.</li>\n<li>A set is a collection which is both unordered and unindexed.</li>\n</ul>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">thisset = {&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;}</code></pre></div>\n<ul>\n<li>Set items are unordered, unchangeable, and do not allow duplicate values.</li>\n<li>Unordered means that the items in a set do not have a defined order.</li>\n<li>-</li>\n<li>Set items can appear in a different order every time you use them, and cannot be referred to b</li>\n<li>-</li>\n<li>Sets are unchangeable, meaning that we cannot change the items after the set has been created.</li>\n<li>Duplicate values will be ignored.</li>\n<li>To determine how many items a set has, use the <code class=\"language-text\">len()</code> method.</li>\n</ul>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">thisset = {&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;}\n\nprint(len(thisset))</code></pre></div>\n<ul>\n<li>Set items can be of any data type:</li>\n</ul>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">set1 = {&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;}\nset2 = {1, 5, 7, 9, 3}\nset3 = {True, False, False}\nset4 = {&quot;abc&quot;, 34, True, 40, &quot;male&quot;}</code></pre></div>\n<ul>\n<li>It is also possible to use the <code class=\"language-text\">set()</code> constructor to make a set.</li>\n</ul>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">thisset = set((&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;)) # note the double round-brackets</code></pre></div>\n<h3>Dictionary</h3>\n<ul>\n<li>Dictionary is a collection which is unordered and changeable. No duplicate members.</li>\n<li>Dictionaries are used to store data values in key:value pairs.</li>\n<li>Dictionaries are written with curly brackets, and have keys and values:</li>\n</ul>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">thisdict = {\n  &quot;brand&quot;: &quot;Ford&quot;,\n  &quot;model&quot;: &quot;Mustang&quot;,\n  &quot;year&quot;: 1964\n}</code></pre></div>\n<ul>\n<li>Dictionary items are presented in key:value pairs, and can be referred to by using the key name.</li>\n</ul>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">thisdict = {\n  &quot;brand&quot;: &quot;Ford&quot;,\n  &quot;model&quot;: &quot;Mustang&quot;,\n  &quot;year&quot;: 1964\n}\nprint(thisdict[&quot;brand&quot;])</code></pre></div>\n<ul>\n<li>Dictionaries are changeable, meaning that we can change, add or remove items after the dictionary has been created.</li>\n<li>Dictionaries cannot have two items with the same key.</li>\n<li>Duplicate values will overwrite existing values.</li>\n<li>To determine how many items a dictionary has, use the <code class=\"language-text\">len()</code> function.</li>\n</ul>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">print(len(thisdict))</code></pre></div>\n<ul>\n<li>The values in dictionary items can be of any data type</li>\n</ul>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">thisdict = {\n  &quot;brand&quot;: &quot;Ford&quot;,\n  &quot;electric&quot;: False,\n  &quot;year&quot;: 1964,\n  &quot;colors&quot;: [&quot;red&quot;, &quot;white&quot;, &quot;blue&quot;]\n}</code></pre></div>\n<h3>Conditional branching</h3>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">    if condition:\n        pass\n    elif condition2:\n        pass\n    else:\n        pass</code></pre></div>\n<h3>Loops</h3>\n<p>Python has two primitive loop commands:</p>\n<ol>\n<li>while loops</li>\n<li>for loops</li>\n</ol>\n<h4>While loop</h4>\n<ul>\n<li>With the <code class=\"language-text\">while</code> loop we can execute a set of statements as long as a condition is true.</li>\n<li>Example: Print i as long as i is less than 6</li>\n</ul>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">i = 1\nwhile i &lt; 6:\n  print(i)\n  i += 1</code></pre></div>\n<ul>\n<li>The while loop requires relevant variables to be ready, in this example we need to define an indexing variable, i, which we set to 1.</li>\n<li>With the <code class=\"language-text\">break</code> statement we can stop the loop even if the while condition is true</li>\n<li>With the continue statement we can stop the current iteration, and continue with the next.</li>\n<li>-</li>\n<li>With the else statement we can run a block of code once when the condition no longer is true.</li>\n</ul>\n<h4>For loop</h4>\n<ul>\n<li>A for loop is used for iterating over a sequence (that is either a list, a tuple, a dictionary, a set, or a string).</li>\n<li>-</li>\n<li>This is less like the for keyword in other programming languages, and works more like an iterator method as found in other object-orientated programming languages.</li>\n<li>With the for loop we can execute a set of statements, once for each item in a list, tuple, set etc.</li>\n</ul>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">fruits = [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;]\nfor x in fruits:\n  print(x)</code></pre></div>\n<ul>\n<li>The for loop does not require an indexing variable to set beforehand.</li>\n<li>To loop through a set of code a specified number of times, we can use the range() function.</li>\n<li>The range() function returns a sequence of numbers, starting from 0 by default, and increments by 1 (by default), and ends at a specified number.</li>\n<li>The range() function defaults to increment the sequence by 1, however it is possible to specify the increment value by adding a third parameter: range(2, 30, 3).</li>\n<li>The else keyword in a for loop specifies a block of code to be executed when the loop is finished.\nA nested loop is a loop inside a loop.</li>\n<li>The \"inner loop\" will be executed one time for each iteration of the \"outer loop\":</li>\n</ul>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">adj = [&quot;red&quot;, &quot;big&quot;, &quot;tasty&quot;]\nfruits = [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;]\n\nfor x in adj:\n  for y in fruits:\n    print(x, y)</code></pre></div>\n<ul>\n<li>for loops cannot be empty, but if you for some reason have a for loop with no content, put in the pass statement to avoid getting an error.</li>\n</ul>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">for x in [0, 1, 2]:\n  pass</code></pre></div>\n<h3>Function definition</h3>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">def function_name():\n    return</code></pre></div>\n<h3>Function call</h3>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">function_name()</code></pre></div>\n<ul>\n<li>We need not to specify the return type of the function.</li>\n<li>Functions by default return <code class=\"language-text\">None</code></li>\n<li>We can return any datatype.</li>\n</ul>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">def say_hi(name):\n    &quot;&quot;&quot;&lt;---- Multi-Line Comments and Docstrings\n    This is where you put your content for help() to inform the user\n    about what your function does and how to use it\n    &quot;&quot;&quot;\n    print(f&quot;Hello {name}!&quot;)\n\nprint(say_hi(&quot;Bryan&quot;))  # Should get the print inside the function, then None\n# Boolean Values\n# Work the same as in JS, except they are title case: True and False\na = True\nb = False\n# Logical Operators\n# ! = not, || = or, &amp;&amp; = and\nprint(True and True)\nprint(True and not True)\nprint(True or True)\n# Truthiness - Everything is True except...\n# False - None, False, &#39;&#39;, [], (), set(), range(0)\n# Number Values\n# Integers are numbers without a floating decimal point\nprint(type(3))  # type returns the type of whatever argument you pass in\n# Floating Point values are numbers with a floating decimal point\nprint(type(3.5))\n# Type Casting\n# You can convert between ints and floats (along with other types...)\nprint(float(3))  # If you convert a float to an int, it will truncate the decimal\nprint(int(4.5))\nprint(type(str(3)))\n# Python does not automatically convert types like JS\n# print(17.0 + &#39; heyooo &#39; + 17)  # TypeError\n# Arithmetic Operators\n# ** - exponent (comparable to Math.pow(num, pow))\n# // - integer division\n# There is no ++ or -- in Python\n# String Values\n# We can use single quotes, double quotes, or f&#39;&#39; for string formats\n# We can use triple single quotes for multiline strings\nprint(\n    &quot;&quot;&quot;This here&#39;s a story\nAll about how\nMy life got twist\nTurned upside down\n&quot;&quot;&quot;\n)\n# Three double quotes can also be used, but we typically reserve these for\n# multi-line comments and function docstrings (refer to lines 6-9)(Nice :D)\n# We use len() to get the length of something\nprint(len(&quot;Bryan G&quot;))  # 7 characters\nprint(len([&quot;hey&quot;, &quot;ho&quot;, &quot;hey&quot;, &quot;hey&quot;, &quot;ho&quot;]))  # 5 list items\nprint(len({1, 2, 3, 4, 5, 6, 7, 9}))  # 8 set items\n# We can index into strings, list, etc..self.\nname = &quot;Bryan&quot;\nfor i in range(len(name)):\n    print(name[i])  # B, r, y, a, n\n# We can index starting from the end as well, with negatives\noccupation = &quot;Full Stack Software Engineer&quot;\nprint(occupation[-3])  # e\n# We can also get ranges in the index with the [start:stop:step] syntax\nprint(occupation[0:4:1])  # step and stop are optional, stop is exclusive\nprint(occupation[::4])  # beginning to end, every 4th letter\nprint(occupation[4:14:2])  # Let&#39;s get weird with it!\n# NOTE: Indexing out of range will give you an IndexError\n# We can also get the index og things with the .index() method, similar to indexOf()\nprint(occupation.index(&quot;Stack&quot;))\nprint([&quot;Mike&quot;, &quot;Barry&quot;, &quot;Cole&quot;, &quot;James&quot;, &quot;Mark&quot;].index(&quot;Cole&quot;))\n# We can count how many times a substring/item appears in something as well\nprint(occupation.count(&quot;S&quot;))\nprint(\n    &quot;&quot;&quot;Now this here&#39;s a story all about how\nMy life got twist turned upside down\nI forget the rest but the the the potato\nsmells like the potato&quot;&quot;&quot;.count(\n        &quot;the&quot;\n    )\n)\n# We concatenate the same as Javascript, but we can also multiply strings\nprint(&quot;dog &quot; + &quot;show&quot;)\nprint(&quot;ha&quot; * 10)\n# We can use format for a multitude of things, from spaces to decimal places\nfirst_name = &quot;Bryan&quot;\nlast_name = &quot;Guner&quot;\nprint(&quot;Your name is {0} {1}&quot;.format(first_name, last_name))\n# Useful String Methods\nprint(&quot;Hello&quot;.upper())  # HELLO\nprint(&quot;Hello&quot;.lower())  # hello\nprint(&quot;HELLO&quot;.islower())  # False\nprint(&quot;HELLO&quot;.isupper())  # True\nprint(&quot;Hello&quot;.startswith(&quot;he&quot;))  # False\nprint(&quot;Hello&quot;.endswith(&quot;lo&quot;))  # True\nprint(&quot;Hello There&quot;.split())  # [Hello, There]\nprint(&quot;hello1&quot;.isalpha())  # False,  must consist only of letters\nprint(&quot;hello1&quot;.isalnum())  # True, must consist of only letters and numbers\nprint(&quot;3215235123&quot;.isdecimal())  # True, must be all numbers\n# True, must consist of only spaces/tabs/newlines\nprint(&quot;       \\n     &quot;.isspace())\n# False, index 0 must be upper case and the rest lower\nprint(&quot;Bryan Guner&quot;.istitle())\nprint(&quot;Michael Lee&quot;.istitle())  # True!\n# Duck Typing - If it walks like a duck, and talks like a duck, it must be a duck\n# Assignment - All like JS, but there are no special keywords like let or const\na = 3\nb = a\nc = &quot;heyoo&quot;\nb = [&quot;reassignment&quot;, &quot;is&quot;, &quot;fine&quot;, &quot;G!&quot;]\n# Comparison Operators - Python uses the same equality operators as JS, but no ===\n# &lt; - Less than\n# &gt; - Greater than\n# &lt;= - Less than or Equal\n# &gt;= - Greater than or Equal\n# == - Equal to\n# != - Not equal to\n# is - Refers to exact same memory location\n# not - !\n# Precedence - Negative Signs(not) are applied first(part of each number)\n#            - Multiplication and Division(and) happen next\n#            - Addition and Subtraction(or) are the last step\n#  NOTE: Be careful when using not along with ==\nprint(not a == b)  # True\n# print(a == not b) # Syntax Error\nprint(a == (not b))  # This fixes it. Answer: False\n# Python does short-circuit evaluation\n# Assignment Operators - Mostly the same as JS except Python has **= and //= (int division)\n# Flow Control Statements - if, while, for\n# Note: Python smushes &#39;else if&#39; into &#39;elif&#39;!\nif 10 &lt; 1:\n    print(&quot;We don&#39;t get here&quot;)\nelif 10 &lt; 5:\n    print(&quot;Nor here...&quot;)\nelse:\n    print(&quot;Hey there!&quot;)\n# Looping over a string\nfor c in &quot;abcdefgh&quot;:\n    print(c)\n# Looping over a range\nfor i in range(5):\n    print(i + 1)\n# Looping over a list\nlst = [1, 2, 3, 4]\nfor i in lst:\n    print(i)\n# Looping over a dictionary\nspam = {&quot;color&quot;: &quot;red&quot;, &quot;age&quot;: 42, &quot;items&quot;: [(1, &quot;hey&quot;), (2, &quot;hooo!&quot;)]}\nfor v in spam.values():\n    print(v)\n# Loop over a list of tuples and destructuring the values\n# Assuming spam.items returns a list of tuples each containing two items (k, v)\nfor k, v in spam.items():\n    print(f&quot;{k}: {v}&quot;)\n# While loops as long as the condition is True\n#  - Exit loop early with break\n#  - Exit iteration early with continue\nspam = 0\nwhile True:\n    print(&quot;Sike That&#39;s the wrong Numba&quot;)\n    spam += 1\n    if spam &lt; 5:\n        continue\n    break\n\n# Functions - use def keyword to define a function in Python\ndef printCopyright():\n    print(&quot;Copyright 2021, Bgoonz&quot;)\n\n# Lambdas are one liners! (Should be at least, you can use parenthesis to disobey)\navg = lambda num1, num2: print(num1 + num2)\navg(1, 2)\n# Calling it with keyword arguments, order does not matter\navg(num2=20, num1=1252)\nprintCopyright()\n# We can give parameters default arguments like JS\ndef greeting(name, saying=&quot;Hello&quot;):\n    print(saying, name)\n\ngreeting(&quot;Mike&quot;)  # Hello Mike\ngreeting(&quot;Bryan&quot;, saying=&quot;Hello there...&quot;)\n# A common gotcha is using a mutable object for a default parameter\n# All invocations of the function reference the same mutable object\ndef append_item(item_name, item_list=[]):  # Will it obey and give us a new list?\n    item_list.append(item_name)\n    return item_list\n\n# Uses same item list unless otherwise stated which is counterintuitive\nprint(append_item(&quot;notebook&quot;))\nprint(append_item(&quot;notebook&quot;))\nprint(append_item(&quot;notebook&quot;, []))\n# Errors - Unlike JS, if we pass the incorrect amount of arguments to a function,\n#          it will throw an error\n# avg(1)  # TypeError\n# avg(1, 2, 2) # TypeError\n# ----------------------------------- DAY 2 ----------------------------------------\n# Functions - * to get rest of position arguments as tuple\n#           - ** to get rest of keyword arguments as a dictionary\n# Variable Length positional arguments\ndef add(a, b, *args):\n    # args is a tuple of the rest of the arguments\n    total = a + b\n    for n in args:\n        total += n\n    return total\n\nprint(add(1, 2))  # args is None, returns 3\nprint(add(1, 2, 3, 4, 5, 6))  # args is (3, 4, 5, 6), returns 21\n# Variable Length Keyword Arguments\ndef print_names_and_countries(greeting, **kwargs):\n    # kwargs is a dictionary of the rest of the keyword arguments\n    for k, v in kwargs.items():\n        print(greeting, k, &quot;from&quot;, v)\n\nprint_names_and_countries(\n    &quot;Hey there&quot;, Monica=&quot;Sweden&quot;, Mike=&quot;The United States&quot;, Mark=&quot;China&quot;\n)\n# We can combine all of these together\ndef example2(arg1, arg2, *args, kw_1=&quot;cheese&quot;, kw_2=&quot;horse&quot;, **kwargs):\n    pass\n\n# Lists are mutable arrays\nempty_list = []\nroomates = [&quot;Beau&quot;, &quot;Delynn&quot;]\n# List built-in function makes a list too\nspecials = list()\n# We can use &#39;in&#39; to test if something is in the list, like &#39;includes&#39; in JS\nprint(1 in [1, 2, 4])  # True\nprint(2 in [1, 3, 5])  # False\n# Dictionaries - Similar to JS POJO&#39;s or Map, containing key value pairs\na = {&quot;one&quot;: 1, &quot;two&quot;: 2, &quot;three&quot;: 3}\nb = dict(one=1, two=2, three=3)\n# Can use &#39;in&#39; on dictionaries too (for keys)\nprint(&quot;one&quot; in a)  # True\nprint(3 in b)  # False\n# Sets - Just like JS, unordered collection of distinct objects\nbedroom = {&quot;bed&quot;, &quot;tv&quot;, &quot;computer&quot;, &quot;clothes&quot;, &quot;playstation 4&quot;}\n# bedroom = set(&quot;bed&quot;, &quot;tv&quot;, &quot;computer&quot;, &quot;clothes&quot;, &quot;playstation 5&quot;)\nschool_bag = set(\n    [&quot;book&quot;, &quot;paper&quot;, &quot;pencil&quot;, &quot;pencil&quot;, &quot;book&quot;, &quot;book&quot;, &quot;book&quot;, &quot;eraser&quot;]\n)\nprint(school_bag)\nprint(bedroom)\n# We can use &#39;in&#39; on sets as wel\nprint(1 in {1, 2, 3})  # True\nprint(4 in {1, 3, 5})  # False\n# Tuples are immutable lists of items\ntime_blocks = (&quot;AM&quot;, &quot;PM&quot;)\ncolors = &quot;red&quot;, &quot;green&quot;, &quot;blue&quot;  # Parenthesis not needed but encouraged\n# The tuple built-in function can be used to convert things to tuples\nprint(tuple(&quot;abc&quot;))\nprint(tuple([1, 2, 3]))\n# &#39;in&#39; may be used on tuples as well\nprint(1 in (1, 2, 3))  # True\nprint(5 in (1, 4, 3))  # False\n# Ranges are immutable lists of numbers, often used with for loops\n#   - start - default: 0, first number in sequence\n#   - stop - required, next number past last number in sequence\n#   - step - default: 1, difference between each number in sequence\nrange1 = range(5)  # [0,1,2,3,4]\nrange2 = range(1, 5)  # [1,2,3,4]\nrange3 = range(0, 25, 5)  # [0,5,10,15,20]\nrange4 = range(0)  # []\nfor i in range1:\n    print(i)\n# Built-in functions:\n# Filter\nisOdd = lambda num: num % 2 == 1\nfiltered = filter(isOdd, [1, 2, 3, 4])\nprint(list(filtered))\nfor num in filtered:\n    print(f&quot;first way: {num}&quot;)\nprint(&quot;--&quot; * 20)\n[print(f&quot;list comprehension: {i}&quot;) for i in [1, 2, 3, 4, 5, 6, 7, 8] if i % 2 == 1]\n# Map\ndef toUpper(str):\n    return str.upper()\n\nupperCased = map(toUpper, [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;])\nprint(list(upperCased))\n# Sorted\nsorted_items = sorted([&quot;john&quot;, &quot;tom&quot;, &quot;sonny&quot;, &quot;Mike&quot;])\nprint(list(sorted_items))  # Notice uppercase comes before lowercase\n# Using a key function to control the sorting and make it case insensitive\nsorted_items = sorted([&quot;john&quot;, &quot;tom&quot;, &quot;sonny&quot;, &quot;Mike&quot;], key=str.lower)\nprint(sorted_items)\n# You can also reverse the sort\nsorted_items = sorted([&quot;john&quot;, &quot;tom&quot;, &quot;sonny&quot;, &quot;Mike&quot;], key=str.lower, reverse=True)\nprint(sorted_items)\n# Enumerate creates a tuple with an index for what you&#39;re enumerating\nquarters = [&quot;First&quot;, &quot;Second&quot;, &quot;Third&quot;, &quot;Fourth&quot;]\nprint(list(enumerate(quarters)))\nprint(list(enumerate(quarters, start=1)))\n# Zip takes list and combines them as key value pairs, or really however you need\nkeys = (&quot;Name&quot;, &quot;Email&quot;)\nvalues = (&quot;Buster&quot;, &quot;cheetoh@johhnydepp.com&quot;)\nzipped = zip(keys, values)\nprint(list(zipped))\n# You can zip more than 2\nx_coords = [0, 1, 2, 3, 4]\ny_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\nprint_len = lambda item: print(len(item))  # doing this to save myself some typing\nprint_len(&quot;Mike&quot;)\nprint_len([1, 5, 2, 10, 3, 10])\nprint_len({1, 5, 10, 9, 10})  # 4 because there is a duplicate here (10)\nprint_len((1, 4, 10, 9, 20))\n# Max will return the max number in a given scenario\nprint(max(1, 2, 35, 1012, 1))\n# Min\nprint(min(1, 5, 2, 10))\nprint(min([1, 4, 7, 10]))\n# Sum\nprint(sum([1, 2, 4]))\n# Any\nprint(any([True, False, False]))\nprint(any([False, False, False]))\n# All\nprint(all([True, True, False]))\nprint(all([True, True, True]))\n# Dir returns all the attributes of an object including it&#39;s methods and dunder methods\nuser = {&quot;Name&quot;: &quot;Bob&quot;, &quot;Email&quot;: &quot;bob@bob.com&quot;}\nprint(dir(user))\n# Importing packages and modules\n#  - Module - A Python code in a file or directory\n#  - Package - A module which is a directory containing an __init__.py file\n#  - Submodule - A module which is contained within a package\n#  - Name - An exported function, class, or variable in a module\n# Unlike JS, modules export ALL names contained within them without any special export key\n# Assuming we have the following package with four submodules\n#  math\n#  |  __init__.py\n#  | addition.py\n#  | subtraction.py\n#  | multiplication.py\n#  | division.py\n# If we peek into the addition.py file we see there&#39;s an add function\n# addition.py\n# We can import &#39;add&#39; from other places because it&#39;s a &#39;name&#39; and is automatically exported\ndef add(num1, num2):\n    return num1 + num2\n\n# Notice the . syntax because this package can import it&#39;s own submodules.\n# Our __init__.py has the following files\n# This imports the &#39;add&#39; function\n# And now it&#39;s also re-exported in here as well\n# from .addition import add\n# These import and re-export the rest of the functions from the submodule\n# from .subtraction import subtract\n# from .division import divide\n# from .multiplication import multiply\n# So if we have a script.py and want to import add, we could do it many ways\n# This will load and execute the &#39;math/__init__.py&#39; file and give\n# us an object with the exported names in &#39;math/__init__.py&#39;\nimport math\n# print(math.add(1,2))\n# This imports JUST the add from &#39;math/__init__.py&#39;\n# from math import add\n# print(add(1, 2))\n# This skips importing from &#39;math/__init__.py&#39; (although it still runs)\n# and imports directly from the addition.py file\n# from math.addition import add\n# This imports all the functions individually from &#39;math/__init__.py&#39;\n# from math import add, subtract, multiply, divide\n# print(add(1, 2))\n# print(subtract(2, 1))\n# This imports &#39;add&#39; renames it to &#39;add_some_numbers&#39;\n# from math import add as add_some_numbers\n# --------------------------------------- DAY 3 ---------------------------------------\n# Classes, Methods, and Properties\nclass AngryBird:\n    # Slots optimize property access and memory usage and prevent you\n    # from arbitrarily assigning new properties the instance\n    __slots__ = [&quot;_x&quot;, &quot;_y&quot;]\n    # Constructor\n    def __init__(self, x=0, y=0):\n        # Doc String\n        &quot;&quot;&quot;\n        Construct a new AngryBird by setting it&#39;s position to (0, 0)\n        &quot;&quot;&quot;\n        ## Instance Variables\n        self._x = x\n        self._y = y\n    # Instance Method\n    def move_up_by(self, delta):\n        self._y += delta\n    # Getter\n    @property\n    def x(self):\n        return self._x\n    # Setter\n    @x.setter\n    def x(self, value):\n        if value &lt; 0:\n            value = 0\n        self._x = value\n    @property\n    def y(self):\n        return self._y\n    @y.setter\n    def y(self, value):\n        self._y = value\n    # Dunder Repr... called by &#39;print&#39;\n    def __repr__(self):\n        return f&quot;&lt;AngryBird ({self._x}, {self._y})&gt;&quot;\n\n# JS to Python Classes cheat table\n#        JS                    Python\n#   constructor()         def __init__(self):\n#      super()            super().__init__()\n#   this.property           self.property\n#    this.method            self.method()\n# method(arg1, arg2){}    def method(self, arg1, ...)\n# get someProperty(){}    @property\n# set someProperty(){}    @someProperty.setter\n# List Comprehensions are a way to transform a list from one format to another\n#  - Pythonic Alternative to using map or filter\n#  - Syntax of a list comprehension\n#     - new_list = [value loop condition]\n# Using a for loop\nsquares = []\nfor i in range(10):\n    squares.append(i ** 2)\nprint(squares)\n# value = i ** 2\n# loop = for i in range(10)\nsquares = [i ** 2 for i in range(10)]\nprint(list(squares))\nsentence = &quot;the rocket came back from mars&quot;\nvowels = [character for character in sentence if character in &quot;aeiou&quot;]\nprint(vowels)\n# You can also use them on dictionaries. We can use the items() method\n# for the dictionary to loop through it getting the keys and values out at once\nperson = {&quot;name&quot;: &quot;Corina&quot;, &quot;age&quot;: 32, &quot;height&quot;: 1.4}\n# This loops through and capitalizes the first letter of all keys\nnewPerson = {key.title(): value for key, value in person.items()}\nprint(list(newPerson.items()))</code></pre></div>"}