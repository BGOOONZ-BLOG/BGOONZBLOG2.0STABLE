{"expireTime":9007200909776267000,"key":"transformer-remark-markdown-ast-39e9bde14a94baf235e0a002af5798a2-gatsby-remark-prismjs-copy-buttongatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"image","title":null,"url":"ds-cheat-sheet-operations.png","alt":null,"position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":37,"offset":37},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":37,"offset":37},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Its always good to have a look at worst-case time complexities of common data structure operations frequently.","position":{"start":{"line":4,"column":3,"offset":41},"end":{"line":4,"column":113,"offset":151},"indent":[]}}],"position":{"start":{"line":4,"column":3,"offset":41},"end":{"line":4,"column":113,"offset":151},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":39},"end":{"line":4,"column":113,"offset":151},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Its always good to have a look at worst-case time complexities of common data structure operations frequently.","position":{"start":{"line":6,"column":1,"offset":153},"end":{"line":6,"column":111,"offset":263},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":153},"end":{"line":6,"column":111,"offset":263},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://miro.medium.com/max/60/1*6NpRbTpekXG_1l5hh1XeIQ.png?q=20","alt":"Image for post","position":{"start":{"line":8,"column":1,"offset":265},"end":{"line":8,"column":84,"offset":348},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":265},"end":{"line":8,"column":84,"offset":348},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://miro.medium.com/max/3572/1*6NpRbTpekXG_1l5hh1XeIQ.png","alt":"Image for post","position":{"start":{"line":10,"column":1,"offset":350},"end":{"line":10,"column":81,"offset":430},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":350},"end":{"line":10,"column":81,"offset":430},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Arrays are one of the basic and important data structures to learn, They take constant time to read and Insert elements at the end and takes a linear time for the remaining.","position":{"start":{"line":12,"column":1,"offset":432},"end":{"line":12,"column":174,"offset":605},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":432},"end":{"line":12,"column":174,"offset":605},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://miro.medium.com/max/60/1*vFbcvaNX-aWr5-wERwKFIA.png?q=20","alt":"Image for post","position":{"start":{"line":14,"column":1,"offset":607},"end":{"line":14,"column":84,"offset":690},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":607},"end":{"line":14,"column":84,"offset":690},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://miro.medium.com/max/3746/1*vFbcvaNX-aWr5-wERwKFIA.png","alt":"Image for post","position":{"start":{"line":16,"column":1,"offset":692},"end":{"line":16,"column":81,"offset":772},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":692},"end":{"line":16,"column":81,"offset":772},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Stack takes constant time for Push, Pop & Peek operations.","position":{"start":{"line":18,"column":1,"offset":774},"end":{"line":18,"column":59,"offset":832},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":774},"end":{"line":18,"column":59,"offset":832},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://miro.medium.com/max/60/1*HgkpbE06UCWm2G3U54J8ew.png?q=20","alt":"Image for post","position":{"start":{"line":20,"column":1,"offset":834},"end":{"line":20,"column":84,"offset":917},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":834},"end":{"line":20,"column":84,"offset":917},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://miro.medium.com/max/2512/1*HgkpbE06UCWm2G3U54J8ew.png","alt":"Image for post","position":{"start":{"line":22,"column":1,"offset":919},"end":{"line":22,"column":81,"offset":999},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":919},"end":{"line":22,"column":81,"offset":999},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In Queue for Enqueue, Dequeue & Peek operations it takes only Constant time.","position":{"start":{"line":24,"column":1,"offset":1001},"end":{"line":24,"column":77,"offset":1077},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":1001},"end":{"line":24,"column":77,"offset":1077},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://miro.medium.com/max/60/1*amq4OYYapQjaN2QXIG5eUw.png?q=20","alt":"Image for post","position":{"start":{"line":26,"column":1,"offset":1079},"end":{"line":26,"column":84,"offset":1162},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":1079},"end":{"line":26,"column":84,"offset":1162},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://miro.medium.com/max/3942/1*amq4OYYapQjaN2QXIG5eUw.png","alt":"Image for post","position":{"start":{"line":28,"column":1,"offset":1164},"end":{"line":28,"column":81,"offset":1244},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":1164},"end":{"line":28,"column":81,"offset":1244},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here we are considering we are using tails for all single linked lists (Some implementations might not have it).\nLinked List is the data structure that comes with a lot of different operational scenarios, we have to think about head & tail usage in every operation we are doing. And operation logic and complexity changes at the head, tail, and middle. Typically insertion at head & tail takes constant time and insertion in middle takes linear time. Search can take linear time. Deletion at the head takes constant time and it can take linear time in remaining scenarios.","position":{"start":{"line":30,"column":1,"offset":1246},"end":{"line":31,"column":460,"offset":1818},"indent":[1]}}],"position":{"start":{"line":30,"column":1,"offset":1246},"end":{"line":31,"column":460,"offset":1818},"indent":[1]}},{"type":"thematicBreak","position":{"start":{"line":33,"column":1,"offset":1820},"end":{"line":33,"column":4,"offset":1823},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","title":"Trees: basic concepts","url":"#Trees-basic-concepts","children":[],"position":{"start":{"line":35,"column":4,"offset":1828},"end":{"line":35,"column":53,"offset":1877},"indent":[]}},{"type":"text","value":"Trees: basic concepts","position":{"start":{"line":35,"column":53,"offset":1877},"end":{"line":35,"column":74,"offset":1898},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":1825},"end":{"line":35,"column":74,"offset":1898},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A tree is a data structure where a node can have zero or more children. Each node contains a ","position":{"start":{"line":37,"column":1,"offset":1900},"end":{"line":37,"column":94,"offset":1993},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"value","position":{"start":{"line":37,"column":96,"offset":1995},"end":{"line":37,"column":101,"offset":2000},"indent":[]}}],"position":{"start":{"line":37,"column":94,"offset":1993},"end":{"line":37,"column":103,"offset":2002},"indent":[]}},{"type":"text","value":". Like graphs, the connection between nodes is called ","position":{"start":{"line":37,"column":103,"offset":2002},"end":{"line":37,"column":157,"offset":2056},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"edges","position":{"start":{"line":37,"column":159,"offset":2058},"end":{"line":37,"column":164,"offset":2063},"indent":[]}}],"position":{"start":{"line":37,"column":157,"offset":2056},"end":{"line":37,"column":166,"offset":2065},"indent":[]}},{"type":"text","value":". A tree is a type of graph, but not all of them are trees (more on that later).","position":{"start":{"line":37,"column":166,"offset":2065},"end":{"line":37,"column":246,"offset":2145},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":1900},"end":{"line":37,"column":246,"offset":2145},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"These data structures are called \"trees\" because the data structure resembles a tree ðŸŒ³. It starts with a ","position":{"start":{"line":39,"column":1,"offset":2147},"end":{"line":39,"column":107,"offset":2253},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"root","position":{"start":{"line":39,"column":109,"offset":2255},"end":{"line":39,"column":113,"offset":2259},"indent":[]}}],"position":{"start":{"line":39,"column":107,"offset":2253},"end":{"line":39,"column":115,"offset":2261},"indent":[]}},{"type":"text","value":" node and ","position":{"start":{"line":39,"column":115,"offset":2261},"end":{"line":39,"column":125,"offset":2271},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"branch","position":{"start":{"line":39,"column":127,"offset":2273},"end":{"line":39,"column":133,"offset":2279},"indent":[]}}],"position":{"start":{"line":39,"column":125,"offset":2271},"end":{"line":39,"column":135,"offset":2281},"indent":[]}},{"type":"text","value":" off with its descendants, and finally, there are ","position":{"start":{"line":39,"column":135,"offset":2281},"end":{"line":39,"column":185,"offset":2331},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"leaves","position":{"start":{"line":39,"column":187,"offset":2333},"end":{"line":39,"column":193,"offset":2339},"indent":[]}}],"position":{"start":{"line":39,"column":185,"offset":2331},"end":{"line":39,"column":195,"offset":2341},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":39,"column":195,"offset":2341},"end":{"line":39,"column":196,"offset":2342},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":2147},"end":{"line":39,"column":196,"offset":2342},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"chrome-extension://cjedbglnccaioiolemnfhjncicchinao/images/tree-parts.jpg","alt":null,"position":{"start":{"line":41,"column":1,"offset":2344},"end":{"line":41,"column":79,"offset":2422},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":2344},"end":{"line":41,"column":79,"offset":2422},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here are some properties of trees:","position":{"start":{"line":43,"column":1,"offset":2424},"end":{"line":43,"column":35,"offset":2458},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":2424},"end":{"line":43,"column":35,"offset":2458},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The top-most node is called ","position":{"start":{"line":45,"column":5,"offset":2464},"end":{"line":45,"column":33,"offset":2492},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"root","position":{"start":{"line":45,"column":35,"offset":2494},"end":{"line":45,"column":39,"offset":2498},"indent":[]}}],"position":{"start":{"line":45,"column":33,"offset":2492},"end":{"line":45,"column":41,"offset":2500},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":45,"column":41,"offset":2500},"end":{"line":45,"column":42,"offset":2501},"indent":[]}}],"position":{"start":{"line":45,"column":5,"offset":2464},"end":{"line":45,"column":42,"offset":2501},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":2460},"end":{"line":45,"column":42,"offset":2501},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"A node without children is called ","position":{"start":{"line":46,"column":5,"offset":2506},"end":{"line":46,"column":39,"offset":2540},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"leaf","position":{"start":{"line":46,"column":41,"offset":2542},"end":{"line":46,"column":45,"offset":2546},"indent":[]}}],"position":{"start":{"line":46,"column":39,"offset":2540},"end":{"line":46,"column":47,"offset":2548},"indent":[]}},{"type":"text","value":" node or ","position":{"start":{"line":46,"column":47,"offset":2548},"end":{"line":46,"column":56,"offset":2557},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"terminal","position":{"start":{"line":46,"column":58,"offset":2559},"end":{"line":46,"column":66,"offset":2567},"indent":[]}}],"position":{"start":{"line":46,"column":56,"offset":2557},"end":{"line":46,"column":68,"offset":2569},"indent":[]}},{"type":"text","value":" node.","position":{"start":{"line":46,"column":68,"offset":2569},"end":{"line":46,"column":74,"offset":2575},"indent":[]}}],"position":{"start":{"line":46,"column":5,"offset":2506},"end":{"line":46,"column":74,"offset":2575},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":2502},"end":{"line":46,"column":74,"offset":2575},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Height","position":{"start":{"line":47,"column":7,"offset":2582},"end":{"line":47,"column":13,"offset":2588},"indent":[]}}],"position":{"start":{"line":47,"column":5,"offset":2580},"end":{"line":47,"column":15,"offset":2590},"indent":[]}},{"type":"text","value":" (","position":{"start":{"line":47,"column":15,"offset":2590},"end":{"line":47,"column":17,"offset":2592},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"h","position":{"start":{"line":47,"column":18,"offset":2593},"end":{"line":47,"column":19,"offset":2594},"indent":[]}}],"position":{"start":{"line":47,"column":17,"offset":2592},"end":{"line":47,"column":20,"offset":2595},"indent":[]}},{"type":"text","value":") of the tree is the distance (edge count) between the farthest leaf to the root.","position":{"start":{"line":47,"column":20,"offset":2595},"end":{"line":47,"column":101,"offset":2676},"indent":[]}}],"position":{"start":{"line":47,"column":5,"offset":2580},"end":{"line":47,"column":101,"offset":2676},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">A</code>","position":{"start":{"line":48,"column":9,"offset":2685},"end":{"line":48,"column":12,"offset":2688},"indent":[]}},{"type":"text","value":" has a height of 3","position":{"start":{"line":48,"column":12,"offset":2688},"end":{"line":48,"column":30,"offset":2706},"indent":[]}}],"position":{"start":{"line":48,"column":9,"offset":2685},"end":{"line":48,"column":30,"offset":2706},"indent":[]}}],"position":{"start":{"line":48,"column":5,"offset":2681},"end":{"line":48,"column":30,"offset":2706},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">I</code>","position":{"start":{"line":49,"column":9,"offset":2715},"end":{"line":49,"column":12,"offset":2718},"indent":[]}},{"type":"text","value":" has a height of 0","position":{"start":{"line":49,"column":12,"offset":2718},"end":{"line":49,"column":30,"offset":2736},"indent":[]}}],"position":{"start":{"line":49,"column":9,"offset":2715},"end":{"line":49,"column":30,"offset":2736},"indent":[]}}],"position":{"start":{"line":49,"column":5,"offset":2711},"end":{"line":49,"column":30,"offset":2736},"indent":[]}}],"position":{"start":{"line":48,"column":5,"offset":2681},"end":{"line":49,"column":30,"offset":2736},"indent":[5]}}],"position":{"start":{"line":47,"column":1,"offset":2576},"end":{"line":49,"column":30,"offset":2736},"indent":[1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Depth","position":{"start":{"line":50,"column":7,"offset":2743},"end":{"line":50,"column":12,"offset":2748},"indent":[]}}],"position":{"start":{"line":50,"column":5,"offset":2741},"end":{"line":50,"column":14,"offset":2750},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":50,"column":14,"offset":2750},"end":{"line":50,"column":18,"offset":2754},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"level","position":{"start":{"line":50,"column":20,"offset":2756},"end":{"line":50,"column":25,"offset":2761},"indent":[]}}],"position":{"start":{"line":50,"column":18,"offset":2754},"end":{"line":50,"column":27,"offset":2763},"indent":[]}},{"type":"text","value":" of a node is the distance between the root and the node in question.","position":{"start":{"line":50,"column":27,"offset":2763},"end":{"line":50,"column":96,"offset":2832},"indent":[]}}],"position":{"start":{"line":50,"column":5,"offset":2741},"end":{"line":50,"column":96,"offset":2832},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">H</code>","position":{"start":{"line":51,"column":9,"offset":2841},"end":{"line":51,"column":12,"offset":2844},"indent":[]}},{"type":"text","value":" has a depth of 2","position":{"start":{"line":51,"column":12,"offset":2844},"end":{"line":51,"column":29,"offset":2861},"indent":[]}}],"position":{"start":{"line":51,"column":9,"offset":2841},"end":{"line":51,"column":29,"offset":2861},"indent":[]}}],"position":{"start":{"line":51,"column":5,"offset":2837},"end":{"line":51,"column":29,"offset":2861},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">B</code>","position":{"start":{"line":52,"column":9,"offset":2870},"end":{"line":52,"column":12,"offset":2873},"indent":[]}},{"type":"text","value":" has a depth of 1","position":{"start":{"line":52,"column":12,"offset":2873},"end":{"line":52,"column":29,"offset":2890},"indent":[]}}],"position":{"start":{"line":52,"column":9,"offset":2870},"end":{"line":52,"column":29,"offset":2890},"indent":[]}}],"position":{"start":{"line":52,"column":5,"offset":2866},"end":{"line":52,"column":29,"offset":2890},"indent":[]}}],"position":{"start":{"line":51,"column":5,"offset":2837},"end":{"line":52,"column":29,"offset":2890},"indent":[5]}}],"position":{"start":{"line":50,"column":1,"offset":2737},"end":{"line":52,"column":29,"offset":2890},"indent":[1,1]}}],"position":{"start":{"line":45,"column":1,"offset":2460},"end":{"line":52,"column":29,"offset":2890},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"link","title":"Implementing a simple tree data structure","url":"#Implementing-a-simple-tree-data-structure","children":[],"position":{"start":{"line":54,"column":5,"offset":2896},"end":{"line":54,"column":95,"offset":2986},"indent":[]}},{"type":"text","value":"Implementing a simple tree data structure","position":{"start":{"line":54,"column":95,"offset":2986},"end":{"line":54,"column":136,"offset":3027},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":2892},"end":{"line":54,"column":136,"offset":3027},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As we saw earlier, a tree node is just a data structure that has a value and has links to their descendants.","position":{"start":{"line":56,"column":1,"offset":3029},"end":{"line":56,"column":109,"offset":3137},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":3029},"end":{"line":56,"column":109,"offset":3137},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here's an example of a tree node:","position":{"start":{"line":58,"column":1,"offset":3139},"end":{"line":58,"column":34,"offset":3172},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":3139},"end":{"line":58,"column":34,"offset":3172},"indent":[]}},{"type":"html","value":"<table><tbody><tr><td><pre><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></pre></td><td><pre><span><span><span>class</span> <span>TreeNode</span> </span>{</span><br><span>  <span>constructor</span>(value) {</span><br><span>    <span>this</span>.value = value;</span><br><span>    <span>this</span>.descendents = [];</span><br><span>  }</span><br><span>}</span><br></pre></td></tr></tbody></table>","position":{"start":{"line":60,"column":1,"offset":3174},"end":{"line":60,"column":459,"offset":3632},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We can create a tree with 3 descendents as follows:","position":{"start":{"line":62,"column":1,"offset":3634},"end":{"line":62,"column":52,"offset":3685},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":3634},"end":{"line":62,"column":52,"offset":3685},"indent":[]}},{"type":"html","value":"<table><tbody><tr><td><pre><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></pre></td><td><pre><span></span><br><span><span>const</span> abe = <span>new</span> TreeNode(<span>'Abe'</span>);</span><br><span><span>const</span> homer = <span>new</span> TreeNode(<span>'Homer'</span>);</span><br><span><span>const</span> bart = <span>new</span> TreeNode(<span>'Bart'</span>);</span><br><span><span>const</span> lisa = <span>new</span> TreeNode(<span>'Lisa'</span>);</span><br><span><span>const</span> maggie = <span>new</span> TreeNode(<span>'Maggie'</span>);</span><br><span></span><br><span></span><br><span>abe.descendents.push(homer);</span><br><span>homer.descendents.push(bart, lisa, maggie);</span><br></pre></td></tr></tbody></table>","position":{"start":{"line":64,"column":1,"offset":3687},"end":{"line":64,"column":871,"offset":4557},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"That's all; we have a tree data structure!","position":{"start":{"line":66,"column":1,"offset":4559},"end":{"line":66,"column":43,"offset":4601},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":4559},"end":{"line":66,"column":43,"offset":4601},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":"Simpson tree data structure","url":"chrome-extension://cjedbglnccaioiolemnfhjncicchinao/images/simpson2-tree.jpg","alt":null,"position":{"start":{"line":68,"column":1,"offset":4603},"end":{"line":68,"column":112,"offset":4714},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":4603},"end":{"line":68,"column":112,"offset":4714},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The node ","position":{"start":{"line":70,"column":1,"offset":4716},"end":{"line":70,"column":10,"offset":4725},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">abe</code>","position":{"start":{"line":70,"column":10,"offset":4725},"end":{"line":70,"column":15,"offset":4730},"indent":[]}},{"type":"text","value":" is the ","position":{"start":{"line":70,"column":15,"offset":4730},"end":{"line":70,"column":23,"offset":4738},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"root","position":{"start":{"line":70,"column":25,"offset":4740},"end":{"line":70,"column":29,"offset":4744},"indent":[]}}],"position":{"start":{"line":70,"column":23,"offset":4738},"end":{"line":70,"column":31,"offset":4746},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":70,"column":31,"offset":4746},"end":{"line":70,"column":36,"offset":4751},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">bart</code>","position":{"start":{"line":70,"column":36,"offset":4751},"end":{"line":70,"column":42,"offset":4757},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":70,"column":42,"offset":4757},"end":{"line":70,"column":44,"offset":4759},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">lisa</code>","position":{"start":{"line":70,"column":44,"offset":4759},"end":{"line":70,"column":50,"offset":4765},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":70,"column":50,"offset":4765},"end":{"line":70,"column":55,"offset":4770},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">maggie</code>","position":{"start":{"line":70,"column":55,"offset":4770},"end":{"line":70,"column":63,"offset":4778},"indent":[]}},{"type":"text","value":" are the ","position":{"start":{"line":70,"column":63,"offset":4778},"end":{"line":70,"column":72,"offset":4787},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"leaf","position":{"start":{"line":70,"column":74,"offset":4789},"end":{"line":70,"column":78,"offset":4793},"indent":[]}}],"position":{"start":{"line":70,"column":72,"offset":4787},"end":{"line":70,"column":80,"offset":4795},"indent":[]}},{"type":"text","value":" nodes of the tree. Notice that the tree's node can have a different number of descendants: 0, 1, 3, or any other value.","position":{"start":{"line":70,"column":80,"offset":4795},"end":{"line":70,"column":200,"offset":4915},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":4716},"end":{"line":70,"column":200,"offset":4915},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Tree data structures have many applications such as:","position":{"start":{"line":72,"column":1,"offset":4917},"end":{"line":72,"column":53,"offset":4969},"indent":[]}}],"position":{"start":{"line":72,"column":1,"offset":4917},"end":{"line":72,"column":53,"offset":4969},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://adrianmejia.com/blog/2018/04/28/data-structures-time-complexity-for-beginners-arrays-hashmaps-linked-lists-stacks-queues-tutorial/#HashMaps","children":[{"type":"text","value":"Maps","position":{"start":{"line":74,"column":6,"offset":4976},"end":{"line":74,"column":10,"offset":4980},"indent":[]}}],"position":{"start":{"line":74,"column":5,"offset":4975},"end":{"line":74,"column":160,"offset":5130},"indent":[]}}],"position":{"start":{"line":74,"column":5,"offset":4975},"end":{"line":74,"column":160,"offset":5130},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":4971},"end":{"line":74,"column":160,"offset":5130},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://adrianmejia.com/blog/2018/04/28/data-structures-time-complexity-for-beginners-arrays-hashmaps-linked-lists-stacks-queues-tutorial/#Sets","children":[{"type":"text","value":"Sets","position":{"start":{"line":75,"column":6,"offset":5136},"end":{"line":75,"column":10,"offset":5140},"indent":[]}}],"position":{"start":{"line":75,"column":5,"offset":5135},"end":{"line":75,"column":156,"offset":5286},"indent":[]}}],"position":{"start":{"line":75,"column":5,"offset":5135},"end":{"line":75,"column":156,"offset":5286},"indent":[]}}],"position":{"start":{"line":75,"column":1,"offset":5131},"end":{"line":75,"column":156,"offset":5286},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Databases","position":{"start":{"line":76,"column":5,"offset":5291},"end":{"line":76,"column":14,"offset":5300},"indent":[]}}],"position":{"start":{"line":76,"column":5,"offset":5291},"end":{"line":76,"column":14,"offset":5300},"indent":[]}}],"position":{"start":{"line":76,"column":1,"offset":5287},"end":{"line":76,"column":14,"offset":5300},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Priority Queues","position":{"start":{"line":77,"column":5,"offset":5305},"end":{"line":77,"column":20,"offset":5320},"indent":[]}}],"position":{"start":{"line":77,"column":5,"offset":5305},"end":{"line":77,"column":20,"offset":5320},"indent":[]}}],"position":{"start":{"line":77,"column":1,"offset":5301},"end":{"line":77,"column":20,"offset":5320},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Querying an LDAP (Lightweight Directory Access Protocol)","position":{"start":{"line":78,"column":5,"offset":5325},"end":{"line":78,"column":61,"offset":5381},"indent":[]}}],"position":{"start":{"line":78,"column":5,"offset":5325},"end":{"line":78,"column":61,"offset":5381},"indent":[]}}],"position":{"start":{"line":78,"column":1,"offset":5321},"end":{"line":78,"column":61,"offset":5381},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Representing the Document Object Model (DOM) for HTML on Websites.","position":{"start":{"line":79,"column":5,"offset":5386},"end":{"line":79,"column":71,"offset":5452},"indent":[]}}],"position":{"start":{"line":79,"column":5,"offset":5386},"end":{"line":79,"column":71,"offset":5452},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":5382},"end":{"line":79,"column":71,"offset":5452},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":4971},"end":{"line":79,"column":71,"offset":5452},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"link","title":"Binary Trees","url":"#Binary-Trees","children":[],"position":{"start":{"line":81,"column":4,"offset":5457},"end":{"line":81,"column":36,"offset":5489},"indent":[]}},{"type":"text","value":"Binary Trees","position":{"start":{"line":81,"column":36,"offset":5489},"end":{"line":81,"column":48,"offset":5501},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":5454},"end":{"line":81,"column":48,"offset":5501},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Trees nodes can have zero or more children. However, when a tree has at the most two children, then it's called ","position":{"start":{"line":83,"column":1,"offset":5503},"end":{"line":83,"column":113,"offset":5615},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"binary tree","position":{"start":{"line":83,"column":115,"offset":5617},"end":{"line":83,"column":126,"offset":5628},"indent":[]}}],"position":{"start":{"line":83,"column":113,"offset":5615},"end":{"line":83,"column":128,"offset":5630},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":83,"column":128,"offset":5630},"end":{"line":83,"column":129,"offset":5631},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":5503},"end":{"line":83,"column":129,"offset":5631},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","title":"Full, Complete and Perfect binary trees","url":"#Full-Complete-and-Perfect-binary-trees","children":[],"position":{"start":{"line":85,"column":5,"offset":5637},"end":{"line":85,"column":90,"offset":5722},"indent":[]}},{"type":"text","value":"Full, Complete and Perfect binary trees","position":{"start":{"line":85,"column":90,"offset":5722},"end":{"line":85,"column":129,"offset":5761},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":5633},"end":{"line":85,"column":129,"offset":5761},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Depending on how nodes are arranged in a binary tree, it can be ","position":{"start":{"line":87,"column":1,"offset":5763},"end":{"line":87,"column":65,"offset":5827},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"full","position":{"start":{"line":87,"column":67,"offset":5829},"end":{"line":87,"column":71,"offset":5833},"indent":[]}}],"position":{"start":{"line":87,"column":65,"offset":5827},"end":{"line":87,"column":73,"offset":5835},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":87,"column":73,"offset":5835},"end":{"line":87,"column":75,"offset":5837},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"complete","position":{"start":{"line":87,"column":77,"offset":5839},"end":{"line":87,"column":85,"offset":5847},"indent":[]}}],"position":{"start":{"line":87,"column":75,"offset":5837},"end":{"line":87,"column":87,"offset":5849},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":87,"column":87,"offset":5849},"end":{"line":87,"column":92,"offset":5854},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"perfect","position":{"start":{"line":87,"column":94,"offset":5856},"end":{"line":87,"column":101,"offset":5863},"indent":[]}}],"position":{"start":{"line":87,"column":92,"offset":5854},"end":{"line":87,"column":103,"offset":5865},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":87,"column":103,"offset":5865},"end":{"line":87,"column":104,"offset":5866},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":5763},"end":{"line":87,"column":104,"offset":5866},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Full binary tree","position":{"start":{"line":89,"column":7,"offset":5874},"end":{"line":89,"column":23,"offset":5890},"indent":[]}}],"position":{"start":{"line":89,"column":5,"offset":5872},"end":{"line":89,"column":25,"offset":5892},"indent":[]}},{"type":"text","value":": each node has exactly 0 or 2 children (but never 1).","position":{"start":{"line":89,"column":25,"offset":5892},"end":{"line":89,"column":79,"offset":5946},"indent":[]}}],"position":{"start":{"line":89,"column":5,"offset":5872},"end":{"line":89,"column":79,"offset":5946},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":5868},"end":{"line":89,"column":79,"offset":5946},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Complete binary tree","position":{"start":{"line":90,"column":7,"offset":5953},"end":{"line":90,"column":27,"offset":5973},"indent":[]}}],"position":{"start":{"line":90,"column":5,"offset":5951},"end":{"line":90,"column":29,"offset":5975},"indent":[]}},{"type":"text","value":": when all levels except the last one are ","position":{"start":{"line":90,"column":29,"offset":5975},"end":{"line":90,"column":71,"offset":6017},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"full","position":{"start":{"line":90,"column":73,"offset":6019},"end":{"line":90,"column":77,"offset":6023},"indent":[]}}],"position":{"start":{"line":90,"column":71,"offset":6017},"end":{"line":90,"column":79,"offset":6025},"indent":[]}},{"type":"text","value":" with nodes.","position":{"start":{"line":90,"column":79,"offset":6025},"end":{"line":90,"column":91,"offset":6037},"indent":[]}}],"position":{"start":{"line":90,"column":5,"offset":5951},"end":{"line":90,"column":91,"offset":6037},"indent":[]}}],"position":{"start":{"line":90,"column":1,"offset":5947},"end":{"line":90,"column":91,"offset":6037},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Perfect binary tree","position":{"start":{"line":91,"column":7,"offset":6044},"end":{"line":91,"column":26,"offset":6063},"indent":[]}}],"position":{"start":{"line":91,"column":5,"offset":6042},"end":{"line":91,"column":28,"offset":6065},"indent":[]}},{"type":"text","value":": when all the levels (including the last one) are full of nodes.","position":{"start":{"line":91,"column":28,"offset":6065},"end":{"line":91,"column":93,"offset":6130},"indent":[]}}],"position":{"start":{"line":91,"column":5,"offset":6042},"end":{"line":91,"column":93,"offset":6130},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":6038},"end":{"line":91,"column":93,"offset":6130},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":5868},"end":{"line":91,"column":93,"offset":6130},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Look at these examples:","position":{"start":{"line":93,"column":1,"offset":6132},"end":{"line":93,"column":24,"offset":6155},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":6132},"end":{"line":93,"column":24,"offset":6155},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":"Full vs. Complete vs. Perfect Binary Tree","url":"chrome-extension://cjedbglnccaioiolemnfhjncicchinao/images/full-complete-perfect-binary-tree.jpg","alt":null,"position":{"start":{"line":95,"column":1,"offset":6157},"end":{"line":95,"column":146,"offset":6302},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":6157},"end":{"line":95,"column":146,"offset":6302},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"These properties are not always mutually exclusive. You can have more than one:","position":{"start":{"line":97,"column":1,"offset":6304},"end":{"line":97,"column":80,"offset":6383},"indent":[]}}],"position":{"start":{"line":97,"column":1,"offset":6304},"end":{"line":97,"column":80,"offset":6383},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"A perfect tree is ","position":{"start":{"line":99,"column":5,"offset":6389},"end":{"line":99,"column":23,"offset":6407},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"always","position":{"start":{"line":99,"column":25,"offset":6409},"end":{"line":99,"column":31,"offset":6415},"indent":[]}}],"position":{"start":{"line":99,"column":23,"offset":6407},"end":{"line":99,"column":33,"offset":6417},"indent":[]}},{"type":"text","value":" complete and full.","position":{"start":{"line":99,"column":33,"offset":6417},"end":{"line":99,"column":52,"offset":6436},"indent":[]}}],"position":{"start":{"line":99,"column":5,"offset":6389},"end":{"line":99,"column":52,"offset":6436},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Perfect binary trees have precisely 2k","position":{"start":{"line":100,"column":9,"offset":6445},"end":{"line":100,"column":47,"offset":6483},"indent":[]}},{"type":"text","value":"-","position":{"start":{"line":100,"column":47,"offset":6483},"end":{"line":100,"column":49,"offset":6485},"indent":[]}},{"type":"text","value":"1 nodes, where ","position":{"start":{"line":100,"column":49,"offset":6485},"end":{"line":100,"column":64,"offset":6500},"indent":[]}},{"type":"emphasis","children":[{"type":"html","value":"<code class=\"language-text\">k</code>","position":{"start":{"line":100,"column":65,"offset":6501},"end":{"line":100,"column":68,"offset":6504},"indent":[]}}],"position":{"start":{"line":100,"column":64,"offset":6500},"end":{"line":100,"column":69,"offset":6505},"indent":[]}},{"type":"text","value":" is the last level of the tree (starting with 1).","position":{"start":{"line":100,"column":69,"offset":6505},"end":{"line":100,"column":118,"offset":6554},"indent":[]}}],"position":{"start":{"line":100,"column":9,"offset":6445},"end":{"line":100,"column":118,"offset":6554},"indent":[]}}],"position":{"start":{"line":100,"column":5,"offset":6441},"end":{"line":100,"column":118,"offset":6554},"indent":[]}}],"position":{"start":{"line":100,"column":5,"offset":6441},"end":{"line":100,"column":118,"offset":6554},"indent":[]}}],"position":{"start":{"line":99,"column":1,"offset":6385},"end":{"line":100,"column":118,"offset":6554},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"A complete tree is ","position":{"start":{"line":101,"column":5,"offset":6559},"end":{"line":101,"column":24,"offset":6578},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"not","position":{"start":{"line":101,"column":26,"offset":6580},"end":{"line":101,"column":29,"offset":6583},"indent":[]}}],"position":{"start":{"line":101,"column":24,"offset":6578},"end":{"line":101,"column":31,"offset":6585},"indent":[]}},{"type":"text","value":" always ","position":{"start":{"line":101,"column":31,"offset":6585},"end":{"line":101,"column":39,"offset":6593},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">full</code>","position":{"start":{"line":101,"column":39,"offset":6593},"end":{"line":101,"column":45,"offset":6599},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":101,"column":45,"offset":6599},"end":{"line":101,"column":46,"offset":6600},"indent":[]}}],"position":{"start":{"line":101,"column":5,"offset":6559},"end":{"line":101,"column":46,"offset":6600},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Like in our \"complete\" example, since it has a parent with only one child. If we remove the rightmost gray node, then we would have a ","position":{"start":{"line":102,"column":9,"offset":6609},"end":{"line":102,"column":143,"offset":6743},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"complete","position":{"start":{"line":102,"column":145,"offset":6745},"end":{"line":102,"column":153,"offset":6753},"indent":[]}}],"position":{"start":{"line":102,"column":143,"offset":6743},"end":{"line":102,"column":155,"offset":6755},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":102,"column":155,"offset":6755},"end":{"line":102,"column":160,"offset":6760},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"full","position":{"start":{"line":102,"column":162,"offset":6762},"end":{"line":102,"column":166,"offset":6766},"indent":[]}}],"position":{"start":{"line":102,"column":160,"offset":6760},"end":{"line":102,"column":168,"offset":6768},"indent":[]}},{"type":"text","value":" tree but not perfect.","position":{"start":{"line":102,"column":168,"offset":6768},"end":{"line":102,"column":190,"offset":6790},"indent":[]}}],"position":{"start":{"line":102,"column":9,"offset":6609},"end":{"line":102,"column":190,"offset":6790},"indent":[]}}],"position":{"start":{"line":102,"column":5,"offset":6605},"end":{"line":102,"column":190,"offset":6790},"indent":[]}}],"position":{"start":{"line":102,"column":5,"offset":6605},"end":{"line":102,"column":190,"offset":6790},"indent":[]}}],"position":{"start":{"line":101,"column":1,"offset":6555},"end":{"line":102,"column":190,"offset":6790},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"A full tree is not always complete and perfect.","position":{"start":{"line":103,"column":5,"offset":6795},"end":{"line":103,"column":52,"offset":6842},"indent":[]}}],"position":{"start":{"line":103,"column":5,"offset":6795},"end":{"line":103,"column":52,"offset":6842},"indent":[]}}],"position":{"start":{"line":103,"column":1,"offset":6791},"end":{"line":103,"column":52,"offset":6842},"indent":[]}}],"position":{"start":{"line":99,"column":1,"offset":6385},"end":{"line":103,"column":52,"offset":6842},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"link","title":"Binary Search Tree (BST)","url":"#Binary-Search-Tree-BST","children":[],"position":{"start":{"line":105,"column":4,"offset":6847},"end":{"line":105,"column":58,"offset":6901},"indent":[]}},{"type":"text","value":"Binary Search Tree (BST)","position":{"start":{"line":105,"column":58,"offset":6901},"end":{"line":105,"column":82,"offset":6925},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":6844},"end":{"line":105,"column":82,"offset":6925},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Binary Search Trees or BST for short are a particular application of binary trees. BST has at most two nodes (like all binary trees). However, the values are in such a way that the left children value must be less than the parent, and the right children is must be higher.","position":{"start":{"line":107,"column":1,"offset":6927},"end":{"line":107,"column":273,"offset":7199},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":6927},"end":{"line":107,"column":273,"offset":7199},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Duplicates:","position":{"start":{"line":109,"column":3,"offset":7203},"end":{"line":109,"column":14,"offset":7214},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":7201},"end":{"line":109,"column":16,"offset":7216},"indent":[]}},{"type":"text","value":" Some BST doesn't allow duplicates while others add the same values as a right child. Other implementations might keep a count on a case of the duplicity (we are going to do this one later).","position":{"start":{"line":109,"column":16,"offset":7216},"end":{"line":109,"column":206,"offset":7406},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":7201},"end":{"line":109,"column":206,"offset":7406},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Let's implement a Binary Search Tree!","position":{"start":{"line":111,"column":1,"offset":7408},"end":{"line":111,"column":38,"offset":7445},"indent":[]}}],"position":{"start":{"line":111,"column":1,"offset":7408},"end":{"line":111,"column":38,"offset":7445},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","title":"BST Implementation","url":"#BST-Implementation","children":[],"position":{"start":{"line":113,"column":5,"offset":7451},"end":{"line":113,"column":49,"offset":7495},"indent":[]}},{"type":"text","value":"BST Implementation","position":{"start":{"line":113,"column":49,"offset":7495},"end":{"line":113,"column":67,"offset":7513},"indent":[]}}],"position":{"start":{"line":113,"column":1,"offset":7447},"end":{"line":113,"column":67,"offset":7513},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"BST are very similar to our previous ","position":{"start":{"line":115,"column":1,"offset":7515},"end":{"line":115,"column":38,"offset":7552},"indent":[]}},{"type":"link","title":null,"url":"#Implementing-a-simple-tree-data-structure","children":[{"type":"text","value":"implementation of a tree","position":{"start":{"line":115,"column":39,"offset":7553},"end":{"line":115,"column":63,"offset":7577},"indent":[]}}],"position":{"start":{"line":115,"column":38,"offset":7552},"end":{"line":115,"column":108,"offset":7622},"indent":[]}},{"type":"text","value":". However, there are some differences:","position":{"start":{"line":115,"column":108,"offset":7622},"end":{"line":115,"column":146,"offset":7660},"indent":[]}}],"position":{"start":{"line":115,"column":1,"offset":7515},"end":{"line":115,"column":146,"offset":7660},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Nodes can have at most, only two children: left and right.","position":{"start":{"line":117,"column":5,"offset":7666},"end":{"line":117,"column":63,"offset":7724},"indent":[]}}],"position":{"start":{"line":117,"column":5,"offset":7666},"end":{"line":117,"column":63,"offset":7724},"indent":[]}}],"position":{"start":{"line":117,"column":1,"offset":7662},"end":{"line":117,"column":63,"offset":7724},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Nodes values has to be ordered as ","position":{"start":{"line":118,"column":5,"offset":7729},"end":{"line":118,"column":39,"offset":7763},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">left &lt; parent &lt; right</code>","position":{"start":{"line":118,"column":39,"offset":7763},"end":{"line":118,"column":62,"offset":7786},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":118,"column":62,"offset":7786},"end":{"line":118,"column":63,"offset":7787},"indent":[]}}],"position":{"start":{"line":118,"column":5,"offset":7729},"end":{"line":118,"column":63,"offset":7787},"indent":[]}}],"position":{"start":{"line":118,"column":1,"offset":7725},"end":{"line":118,"column":63,"offset":7787},"indent":[]}}],"position":{"start":{"line":117,"column":1,"offset":7662},"end":{"line":118,"column":63,"offset":7787},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Here's the tree node. Very similar to what we did before, but we added some handy getters and setters for left and right children. Notice that is also keeping a reference to the parent and we update it every time add children.","position":{"start":{"line":120,"column":1,"offset":7789},"end":{"line":120,"column":227,"offset":8015},"indent":[]}}],"position":{"start":{"line":120,"column":1,"offset":7789},"end":{"line":120,"column":227,"offset":8015},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"TreeNode.js","position":{"start":{"line":122,"column":1,"offset":8017},"end":{"line":122,"column":12,"offset":8028},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/amejiarosario/dsa.js/blob/master/src/data-structures/trees/tree-node.js","children":[{"type":"text","value":"Code","position":{"start":{"line":122,"column":13,"offset":8029},"end":{"line":122,"column":17,"offset":8033},"indent":[]}}],"position":{"start":{"line":122,"column":12,"offset":8028},"end":{"line":122,"column":110,"offset":8126},"indent":[]}}],"position":{"start":{"line":122,"column":1,"offset":8017},"end":{"line":122,"column":110,"offset":8126},"indent":[]}},{"type":"html","value":"<table><tbody><tr><td><pre><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br></pre></td><td><pre><span><span>const</span> LEFT = <span>0</span>;</span><br><span><span>const</span> RIGHT = <span>1</span>;</span><br><span></span><br><span><span><span>class</span> <span>TreeNode</span> </span>{</span><br><span>  <span>constructor</span>(value) {</span><br><span>    <span>this</span>.value = value;</span><br><span>    <span>this</span>.descendents = [];</span><br><span>    <span>this</span>.parent = <span>null</span>;</span><br><span>  }</span><br><span></span><br><span>  <span>get</span> <span>left</span>() {</span><br><span>    <span>return</span> <span>this</span>.descendents[LEFT];</span><br><span>  }</span><br><span></span><br><span>  <span>set</span> <span>left</span>(<span>node</span>) {</span><br><span>    <span>this</span>.descendents[LEFT] = node;</span><br><span>    <span>if</span> (node) {</span><br><span>      node.parent = <span>this</span>;</span><br><span>    }</span><br><span>  }</span><br><span></span><br><span>  <span>get</span> <span>right</span>() {</span><br><span>    <span>return</span> <span>this</span>.descendents[RIGHT];</span><br><span>  }</span><br><span></span><br><span>  <span>set</span> <span>right</span>(<span>node</span>) {</span><br><span>    <span>this</span>.descendents[RIGHT] = node;</span><br><span>    <span>if</span> (node) {</span><br><span>      node.parent = <span>this</span>;</span><br><span>    }</span><br><span>  }</span><br><span>}</span><br></pre></td></tr></tbody></table>","position":{"start":{"line":124,"column":1,"offset":8128},"end":{"line":124,"column":2090,"offset":10217},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Ok, so far we can add a left and right child. Now, let's do the BST class that enforces the ","position":{"start":{"line":126,"column":1,"offset":10219},"end":{"line":126,"column":93,"offset":10311},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">left &lt; parent &lt; right</code>","position":{"start":{"line":126,"column":93,"offset":10311},"end":{"line":126,"column":116,"offset":10334},"indent":[]}},{"type":"text","value":" rule.","position":{"start":{"line":126,"column":116,"offset":10334},"end":{"line":126,"column":122,"offset":10340},"indent":[]}}],"position":{"start":{"line":126,"column":1,"offset":10219},"end":{"line":126,"column":122,"offset":10340},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"BinarySearchTree.js linkUrl linkText","position":{"start":{"line":128,"column":1,"offset":10342},"end":{"line":128,"column":37,"offset":10378},"indent":[]}}],"position":{"start":{"line":128,"column":1,"offset":10342},"end":{"line":128,"column":37,"offset":10378},"indent":[]}},{"type":"html","value":"<table><tbody><tr><td><pre><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></pre></td><td><pre><span></span><br><span><span><span>class</span> <span>BinarySearchTree</span> </span>{</span><br><span>  <span>constructor</span>() {</span><br><span>    <span>this</span>.root = <span>null</span>;</span><br><span>    <span>this</span>.size = <span>0</span>;</span><br><span>  }</span><br><span></span><br><span>  add(value) {  }</span><br><span>  find(value) {  }</span><br><span>  remove(value) {  }</span><br><span>  getMax() {  }</span><br><span>  getMin() {  }</span><br><span>}</span><br></pre></td></tr></tbody></table>","position":{"start":{"line":130,"column":1,"offset":10380},"end":{"line":130,"column":812,"offset":11191},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Let's implementing insertion.","position":{"start":{"line":132,"column":1,"offset":11193},"end":{"line":132,"column":30,"offset":11222},"indent":[]}}],"position":{"start":{"line":132,"column":1,"offset":11193},"end":{"line":132,"column":30,"offset":11222},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","title":"BST Node Insertion","url":"#BST-Node-Insertion","children":[],"position":{"start":{"line":134,"column":5,"offset":11228},"end":{"line":134,"column":49,"offset":11272},"indent":[]}},{"type":"text","value":"BST Node Insertion","position":{"start":{"line":134,"column":49,"offset":11272},"end":{"line":134,"column":67,"offset":11290},"indent":[]}}],"position":{"start":{"line":134,"column":1,"offset":11224},"end":{"line":134,"column":67,"offset":11290},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To insert a node in a binary tree, we do the following:","position":{"start":{"line":136,"column":1,"offset":11292},"end":{"line":136,"column":56,"offset":11347},"indent":[]}}],"position":{"start":{"line":136,"column":1,"offset":11292},"end":{"line":136,"column":56,"offset":11347},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"If a tree is empty, the first node becomes the ","position":{"start":{"line":138,"column":5,"offset":11353},"end":{"line":138,"column":52,"offset":11400},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"root","position":{"start":{"line":138,"column":54,"offset":11402},"end":{"line":138,"column":58,"offset":11406},"indent":[]}}],"position":{"start":{"line":138,"column":52,"offset":11400},"end":{"line":138,"column":60,"offset":11408},"indent":[]}},{"type":"text","value":" and you are done.","position":{"start":{"line":138,"column":60,"offset":11408},"end":{"line":138,"column":78,"offset":11426},"indent":[]}}],"position":{"start":{"line":138,"column":5,"offset":11353},"end":{"line":138,"column":78,"offset":11426},"indent":[]}}],"position":{"start":{"line":138,"column":1,"offset":11349},"end":{"line":138,"column":78,"offset":11426},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Compare root/parent's value if it's ","position":{"start":{"line":139,"column":5,"offset":11431},"end":{"line":139,"column":41,"offset":11467},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"higher","position":{"start":{"line":139,"column":42,"offset":11468},"end":{"line":139,"column":48,"offset":11474},"indent":[]}}],"position":{"start":{"line":139,"column":41,"offset":11467},"end":{"line":139,"column":49,"offset":11475},"indent":[]}},{"type":"text","value":" go ","position":{"start":{"line":139,"column":49,"offset":11475},"end":{"line":139,"column":53,"offset":11479},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"right","position":{"start":{"line":139,"column":55,"offset":11481},"end":{"line":139,"column":60,"offset":11486},"indent":[]}}],"position":{"start":{"line":139,"column":53,"offset":11479},"end":{"line":139,"column":62,"offset":11488},"indent":[]}},{"type":"text","value":", if it's ","position":{"start":{"line":139,"column":62,"offset":11488},"end":{"line":139,"column":72,"offset":11498},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"lower","position":{"start":{"line":139,"column":73,"offset":11499},"end":{"line":139,"column":78,"offset":11504},"indent":[]}}],"position":{"start":{"line":139,"column":72,"offset":11498},"end":{"line":139,"column":79,"offset":11505},"indent":[]}},{"type":"text","value":" go ","position":{"start":{"line":139,"column":79,"offset":11505},"end":{"line":139,"column":83,"offset":11509},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"left","position":{"start":{"line":139,"column":85,"offset":11511},"end":{"line":139,"column":89,"offset":11515},"indent":[]}}],"position":{"start":{"line":139,"column":83,"offset":11509},"end":{"line":139,"column":91,"offset":11517},"indent":[]}},{"type":"text","value":". If it's the same, then the value already exists so you can increase the duplicate count (multiplicity).","position":{"start":{"line":139,"column":91,"offset":11517},"end":{"line":139,"column":196,"offset":11622},"indent":[]}}],"position":{"start":{"line":139,"column":5,"offset":11431},"end":{"line":139,"column":196,"offset":11622},"indent":[]}}],"position":{"start":{"line":139,"column":1,"offset":11427},"end":{"line":139,"column":196,"offset":11622},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Repeat #2 until we found an empty slot to insert the new node.","position":{"start":{"line":140,"column":5,"offset":11627},"end":{"line":140,"column":67,"offset":11689},"indent":[]}}],"position":{"start":{"line":140,"column":5,"offset":11627},"end":{"line":140,"column":67,"offset":11689},"indent":[]}}],"position":{"start":{"line":140,"column":1,"offset":11623},"end":{"line":140,"column":67,"offset":11689},"indent":[]}}],"position":{"start":{"line":138,"column":1,"offset":11349},"end":{"line":140,"column":67,"offset":11689},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Let's do an illustration how to insert 30, 40, 10, 15, 12, 50:","position":{"start":{"line":142,"column":1,"offset":11691},"end":{"line":142,"column":63,"offset":11753},"indent":[]}}],"position":{"start":{"line":142,"column":1,"offset":11691},"end":{"line":142,"column":63,"offset":11753},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":"Inserting nodes on a Binary Search Tree (BST)","url":"chrome-extension://cjedbglnccaioiolemnfhjncicchinao/images/bst2.gif","alt":null,"position":{"start":{"line":144,"column":1,"offset":11755},"end":{"line":144,"column":121,"offset":11875},"indent":[]}}],"position":{"start":{"line":144,"column":1,"offset":11755},"end":{"line":144,"column":121,"offset":11875},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We can implement insert as follows:","position":{"start":{"line":146,"column":1,"offset":11877},"end":{"line":146,"column":36,"offset":11912},"indent":[]}}],"position":{"start":{"line":146,"column":1,"offset":11877},"end":{"line":146,"column":36,"offset":11912},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"BinarySearchTree.prototype.add","position":{"start":{"line":148,"column":1,"offset":11914},"end":{"line":148,"column":31,"offset":11944},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/amejiarosario/dsa.js/blob/master/src/data-structures/trees/binary-search-tree.js#L11","children":[{"type":"text","value":"Full Code","position":{"start":{"line":148,"column":32,"offset":11945},"end":{"line":148,"column":41,"offset":11954},"indent":[]}}],"position":{"start":{"line":148,"column":31,"offset":11944},"end":{"line":148,"column":147,"offset":12060},"indent":[]}}],"position":{"start":{"line":148,"column":1,"offset":11914},"end":{"line":148,"column":147,"offset":12060},"indent":[]}},{"type":"html","value":"<table><tbody><tr><td><pre><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></pre></td><td><pre><span>add(value) {</span><br><span>  <span>const</span> newNode = <span>new</span> TreeNode(value);</span><br><span></span><br><span>  <span>if</span> (<span>this</span>.root) {</span><br><span>    <span>const</span> { found, parent } = <span>this</span>.findNodeAndParent(value);</span><br><span>    <span>if</span> (found) { </span><br><span>      found.meta.multiplicity = (found.meta.multiplicity || <span>1</span>) + <span>1</span>;</span><br><span>    } <span>else</span> <span>if</span> (value &lt; parent.value) {</span><br><span>      parent.left = newNode;</span><br><span>    } <span>else</span> {</span><br><span>      parent.right = newNode;</span><br><span>    }</span><br><span>  } <span>else</span> {</span><br><span>    <span>this</span>.root = newNode;</span><br><span>  }</span><br><span></span><br><span>  <span>this</span>.size += <span>1</span>;</span><br><span>  <span>return</span> newNode;</span><br><span>}</span><br></pre></td></tr></tbody></table>","position":{"start":{"line":150,"column":1,"offset":12062},"end":{"line":150,"column":1375,"offset":13436},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We are using a helper function called ","position":{"start":{"line":152,"column":1,"offset":13438},"end":{"line":152,"column":39,"offset":13476},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">findNodeAndParent</code>","position":{"start":{"line":152,"column":39,"offset":13476},"end":{"line":152,"column":58,"offset":13495},"indent":[]}},{"type":"text","value":". If we found that the node already exists in the tree, then we increase the ","position":{"start":{"line":152,"column":58,"offset":13495},"end":{"line":152,"column":135,"offset":13572},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">multiplicity</code>","position":{"start":{"line":152,"column":135,"offset":13572},"end":{"line":152,"column":149,"offset":13586},"indent":[]}},{"type":"text","value":" counter. Let's see how this function is implemented:","position":{"start":{"line":152,"column":149,"offset":13586},"end":{"line":152,"column":202,"offset":13639},"indent":[]}}],"position":{"start":{"line":152,"column":1,"offset":13438},"end":{"line":152,"column":202,"offset":13639},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"BinarySearchTree.prototype.findNodeAndParent","position":{"start":{"line":154,"column":1,"offset":13641},"end":{"line":154,"column":45,"offset":13685},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/amejiarosario/dsa.js/blob/master/src/data-structures/trees/binary-search-tree.js#L44","children":[{"type":"text","value":"Full Code","position":{"start":{"line":154,"column":46,"offset":13686},"end":{"line":154,"column":55,"offset":13695},"indent":[]}}],"position":{"start":{"line":154,"column":45,"offset":13685},"end":{"line":154,"column":161,"offset":13801},"indent":[]}}],"position":{"start":{"line":154,"column":1,"offset":13641},"end":{"line":154,"column":161,"offset":13801},"indent":[]}},{"type":"html","value":"<table><tbody><tr><td><pre><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></pre></td><td><pre><span>findNodeAndParent(value) {</span><br><span>  <span>let</span> node = <span>this</span>.root;</span><br><span>  <span>let</span> parent;</span><br><span></span><br><span>  <span>while</span> (node) {</span><br><span>    <span>if</span> (node.value === value) {</span><br><span>      <span>break</span>;</span><br><span>    }</span><br><span>    parent = node;</span><br><span>    node = ( value &gt;= node.value) ? node.right : node.left;</span><br><span>  }</span><br><span></span><br><span>  <span>return</span> { <span>found</span>: node, parent };</span><br><span>}</span><br></pre></td></tr></tbody></table>","position":{"start":{"line":156,"column":1,"offset":13803},"end":{"line":156,"column":922,"offset":14724},"indent":[]}},{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">findNodeAndParent</code>","position":{"start":{"line":158,"column":1,"offset":14726},"end":{"line":158,"column":20,"offset":14745},"indent":[]}},{"type":"text","value":" goes through the tree searching for the value. It starts at the root (line 2) and then goes left or right based on the value (line 10). If the value already exists, it will return the node ","position":{"start":{"line":158,"column":20,"offset":14745},"end":{"line":158,"column":210,"offset":14935},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">found</code>","position":{"start":{"line":158,"column":210,"offset":14935},"end":{"line":158,"column":217,"offset":14942},"indent":[]}},{"type":"text","value":" and also the parent. In case that the node doesn't exist, we still return the ","position":{"start":{"line":158,"column":217,"offset":14942},"end":{"line":158,"column":296,"offset":15021},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">parent</code>","position":{"start":{"line":158,"column":296,"offset":15021},"end":{"line":158,"column":304,"offset":15029},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":158,"column":304,"offset":15029},"end":{"line":158,"column":305,"offset":15030},"indent":[]}}],"position":{"start":{"line":158,"column":1,"offset":14726},"end":{"line":158,"column":305,"offset":15030},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","title":"BST Node Deletion","url":"#BST-Node-Deletion","children":[],"position":{"start":{"line":160,"column":5,"offset":15036},"end":{"line":160,"column":47,"offset":15078},"indent":[]}},{"type":"text","value":"BST Node Deletion","position":{"start":{"line":160,"column":47,"offset":15078},"end":{"line":160,"column":64,"offset":15095},"indent":[]}}],"position":{"start":{"line":160,"column":1,"offset":15032},"end":{"line":160,"column":64,"offset":15095},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We know how to insert and search for value. Now, we are going to implement the delete operation. It's a little trickier than adding, so let's explain it with the following cases:","position":{"start":{"line":162,"column":1,"offset":15097},"end":{"line":162,"column":179,"offset":15275},"indent":[]}}],"position":{"start":{"line":162,"column":1,"offset":15097},"end":{"line":162,"column":179,"offset":15275},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Deleting a leaf node (0 children)","position":{"start":{"line":164,"column":3,"offset":15279},"end":{"line":164,"column":36,"offset":15312},"indent":[]}}],"position":{"start":{"line":164,"column":1,"offset":15277},"end":{"line":164,"column":38,"offset":15314},"indent":[]}}],"position":{"start":{"line":164,"column":1,"offset":15277},"end":{"line":164,"column":38,"offset":15314},"indent":[]}},{"type":"html","value":"<table><tbody><tr><td><pre><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></pre></td><td><pre><span>    30                             30</span><br><span> /     \\         remove(12)     /     \\</span><br><span>10      40       ---------&gt;    10      40</span><br><span>  \\    /  \\                      \\    /  \\</span><br><span>  15  35   50                    15  35   50</span><br><span>  /</span><br><span>12*</span><br></pre></td></tr></tbody></table>","position":{"start":{"line":166,"column":1,"offset":15316},"end":{"line":166,"column":537,"offset":15852},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We just remove the reference from node's parent (15) to be null.","position":{"start":{"line":168,"column":1,"offset":15854},"end":{"line":168,"column":65,"offset":15918},"indent":[]}}],"position":{"start":{"line":168,"column":1,"offset":15854},"end":{"line":168,"column":65,"offset":15918},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Deleting a node with one child.","position":{"start":{"line":170,"column":3,"offset":15922},"end":{"line":170,"column":34,"offset":15953},"indent":[]}}],"position":{"start":{"line":170,"column":1,"offset":15920},"end":{"line":170,"column":36,"offset":15955},"indent":[]}}],"position":{"start":{"line":170,"column":1,"offset":15920},"end":{"line":170,"column":36,"offset":15955},"indent":[]}},{"type":"html","value":"<table><tbody><tr><td><pre><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></pre></td><td><pre><span>    30                              30</span><br><span> /     \\         remove(10)      /     \\</span><br><span>10*     40       ---------&gt;     15      40</span><br><span>  \\    /  \\                            /  \\</span><br><span>  15  35   50                         35   50</span><br></pre></td></tr></tbody></table>","position":{"start":{"line":172,"column":1,"offset":15957},"end":{"line":172,"column":466,"offset":16422},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In this case, we go to the parent (30) and replace the child (10), with a child's child (15).","position":{"start":{"line":174,"column":1,"offset":16424},"end":{"line":174,"column":94,"offset":16517},"indent":[]}}],"position":{"start":{"line":174,"column":1,"offset":16424},"end":{"line":174,"column":94,"offset":16517},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Deleting a node with two children","position":{"start":{"line":176,"column":3,"offset":16521},"end":{"line":176,"column":36,"offset":16554},"indent":[]}}],"position":{"start":{"line":176,"column":1,"offset":16519},"end":{"line":176,"column":38,"offset":16556},"indent":[]}}],"position":{"start":{"line":176,"column":1,"offset":16519},"end":{"line":176,"column":38,"offset":16556},"indent":[]}},{"type":"html","value":"<table><tbody><tr><td><pre><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></pre></td><td><pre><span>    30                              30</span><br><span> /     \\         remove(40)      /     \\</span><br><span>15      40*      ---------&gt;     15      50</span><br><span>       /  \\                            /</span><br><span>      35   50                         35</span><br></pre></td></tr></tbody></table>","position":{"start":{"line":178,"column":1,"offset":16558},"end":{"line":178,"column":458,"offset":17015},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We are removing node 40, that has two children (35 and 50). We replace the parent's (30) child (40) with the child's right child (50). Then we keep the left child (35) in the same place it was before, so we have to make it the left child of 50.","position":{"start":{"line":180,"column":1,"offset":17017},"end":{"line":180,"column":245,"offset":17261},"indent":[]}}],"position":{"start":{"line":180,"column":1,"offset":17017},"end":{"line":180,"column":245,"offset":17261},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Another way to do it to remove node 40, is to move the left child (35) up and then keep the right child (50) where it was.","position":{"start":{"line":182,"column":1,"offset":17263},"end":{"line":182,"column":123,"offset":17385},"indent":[]}}],"position":{"start":{"line":182,"column":1,"offset":17263},"end":{"line":182,"column":123,"offset":17385},"indent":[]}},{"type":"html","value":"<table><tbody><tr><td><pre><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></pre></td><td><pre><span>    30</span><br><span> /     \\</span><br><span>15      35</span><br><span>          \\</span><br><span>           50</span><br></pre></td></tr></tbody></table>","position":{"start":{"line":184,"column":1,"offset":17387},"end":{"line":184,"column":303,"offset":17689},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Either way is ok as long as you keep the binary search tree property: ","position":{"start":{"line":186,"column":1,"offset":17691},"end":{"line":186,"column":71,"offset":17761},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">left &lt; parent &lt; right</code>","position":{"start":{"line":186,"column":71,"offset":17761},"end":{"line":186,"column":94,"offset":17784},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":186,"column":94,"offset":17784},"end":{"line":186,"column":95,"offset":17785},"indent":[]}}],"position":{"start":{"line":186,"column":1,"offset":17691},"end":{"line":186,"column":95,"offset":17785},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Deleting the root.","position":{"start":{"line":188,"column":3,"offset":17789},"end":{"line":188,"column":21,"offset":17807},"indent":[]}}],"position":{"start":{"line":188,"column":1,"offset":17787},"end":{"line":188,"column":23,"offset":17809},"indent":[]}}],"position":{"start":{"line":188,"column":1,"offset":17787},"end":{"line":188,"column":23,"offset":17809},"indent":[]}},{"type":"html","value":"<table><tbody><tr><td><pre><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></pre></td><td><pre><span>   30*                            50</span><br><span> /     \\       remove(30)      /     \\</span><br><span>15      50     ---------&gt;     15      35</span><br><span>       /</span><br><span>      35</span><br></pre></td></tr></tbody></table>","position":{"start":{"line":190,"column":1,"offset":17811},"end":{"line":190,"column":388,"offset":18198},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Deleting the root is very similar to removing nodes with 0, 1, or 2 children that we discussed earlier. The only difference is that afterward, we need to update the reference of the root of the tree.","position":{"start":{"line":192,"column":1,"offset":18200},"end":{"line":192,"column":200,"offset":18399},"indent":[]}}],"position":{"start":{"line":192,"column":1,"offset":18200},"end":{"line":192,"column":200,"offset":18399},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here's an animation of what we discussed.","position":{"start":{"line":194,"column":1,"offset":18401},"end":{"line":194,"column":42,"offset":18442},"indent":[]}}],"position":{"start":{"line":194,"column":1,"offset":18401},"end":{"line":194,"column":42,"offset":18442},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":"Removing a node with 0, 1, 2 children from a binary search tree","url":"chrome-extension://cjedbglnccaioiolemnfhjncicchinao/images/bst-remove.gif","alt":null,"position":{"start":{"line":196,"column":1,"offset":18444},"end":{"line":196,"column":145,"offset":18588},"indent":[]}}],"position":{"start":{"line":196,"column":1,"offset":18444},"end":{"line":196,"column":145,"offset":18588},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the animation, it moves up the left child/subtree and keeps the right child/subtree in place.","position":{"start":{"line":198,"column":1,"offset":18590},"end":{"line":198,"column":97,"offset":18686},"indent":[]}}],"position":{"start":{"line":198,"column":1,"offset":18590},"end":{"line":198,"column":97,"offset":18686},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now that we have a good idea how it should work, let's implement it:","position":{"start":{"line":200,"column":1,"offset":18688},"end":{"line":200,"column":69,"offset":18756},"indent":[]}}],"position":{"start":{"line":200,"column":1,"offset":18688},"end":{"line":200,"column":69,"offset":18756},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"BinarySearchTree.prototype.remove","position":{"start":{"line":202,"column":1,"offset":18758},"end":{"line":202,"column":34,"offset":18791},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/amejiarosario/dsa.js/blob/master/src/data-structures/trees/binary-search-tree.js#L89","children":[{"type":"text","value":"Full Code","position":{"start":{"line":202,"column":35,"offset":18792},"end":{"line":202,"column":44,"offset":18801},"indent":[]}}],"position":{"start":{"line":202,"column":34,"offset":18791},"end":{"line":202,"column":150,"offset":18907},"indent":[]}}],"position":{"start":{"line":202,"column":1,"offset":18758},"end":{"line":202,"column":150,"offset":18907},"indent":[]}},{"type":"html","value":"<table><tbody><tr><td><pre><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></pre></td><td><pre><span>remove(value) {</span><br><span>  <span>const</span> nodeToRemove = <span>this</span>.find(value);</span><br><span>  <span>if</span> (!nodeToRemove) <span>return</span> <span>false</span>;</span><br><span></span><br><span>  </span><br><span>  <span>const</span> nodeToRemoveChildren = <span>this</span>.combineLeftIntoRightSubtree(nodeToRemove);</span><br><span></span><br><span>  <span>if</span> (nodeToRemove.meta.multiplicity &amp;&amp; nodeToRemove.meta.multiplicity &gt; <span>1</span>) {</span><br><span>    nodeToRemove.meta.multiplicity -= <span>1</span>; </span><br><span>  } <span>else</span> <span>if</span> (nodeToRemove === <span>this</span>.root) {</span><br><span>    </span><br><span>    <span>this</span>.root = nodeToRemoveChildren;</span><br><span>    <span>this</span>.root.parent = <span>null</span>; </span><br><span>  } <span>else</span> {</span><br><span>    <span>const</span> side = nodeToRemove.isParentLeftChild ? <span>'left'</span> : <span>'right'</span>;</span><br><span>    <span>const</span> { parent } = nodeToRemove; </span><br><span>    </span><br><span>    parent[side] = nodeToRemoveChildren;</span><br><span>  }</span><br><span></span><br><span>  <span>this</span>.size -= <span>1</span>;</span><br><span>  <span>return</span> <span>true</span>;</span><br><span>}</span><br></pre></td></tr></tbody></table>","position":{"start":{"line":204,"column":1,"offset":18909},"end":{"line":204,"column":1827,"offset":20735},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here are some highlights of the implementation:","position":{"start":{"line":206,"column":1,"offset":20737},"end":{"line":206,"column":48,"offset":20784},"indent":[]}}],"position":{"start":{"line":206,"column":1,"offset":20737},"end":{"line":206,"column":48,"offset":20784},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"First, we search if the node exists. If it doesn't, we return false and we are done!","position":{"start":{"line":208,"column":5,"offset":20790},"end":{"line":208,"column":89,"offset":20874},"indent":[]}}],"position":{"start":{"line":208,"column":5,"offset":20790},"end":{"line":208,"column":89,"offset":20874},"indent":[]}}],"position":{"start":{"line":208,"column":1,"offset":20786},"end":{"line":208,"column":89,"offset":20874},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"If the node to remove exists, then combine left and right children into one subtree.","position":{"start":{"line":209,"column":5,"offset":20879},"end":{"line":209,"column":89,"offset":20963},"indent":[]}}],"position":{"start":{"line":209,"column":5,"offset":20879},"end":{"line":209,"column":89,"offset":20963},"indent":[]}}],"position":{"start":{"line":209,"column":1,"offset":20875},"end":{"line":209,"column":89,"offset":20963},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Replace node to delete with the combined subtree.","position":{"start":{"line":210,"column":5,"offset":20968},"end":{"line":210,"column":54,"offset":21017},"indent":[]}}],"position":{"start":{"line":210,"column":5,"offset":20968},"end":{"line":210,"column":54,"offset":21017},"indent":[]}}],"position":{"start":{"line":210,"column":1,"offset":20964},"end":{"line":210,"column":54,"offset":21017},"indent":[]}}],"position":{"start":{"line":208,"column":1,"offset":20786},"end":{"line":210,"column":54,"offset":21017},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The function that combines left into right subtree is the following:","position":{"start":{"line":212,"column":1,"offset":21019},"end":{"line":212,"column":69,"offset":21087},"indent":[]}}],"position":{"start":{"line":212,"column":1,"offset":21019},"end":{"line":212,"column":69,"offset":21087},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"BinarySearchTree.prototype.combineLeftIntoRightSubtree","position":{"start":{"line":214,"column":1,"offset":21089},"end":{"line":214,"column":55,"offset":21143},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/amejiarosario/dsa.js/blob/master/src/data-structures/trees/binary-search-tree.js#L89","children":[{"type":"text","value":"Full Code","position":{"start":{"line":214,"column":56,"offset":21144},"end":{"line":214,"column":65,"offset":21153},"indent":[]}}],"position":{"start":{"line":214,"column":55,"offset":21143},"end":{"line":214,"column":171,"offset":21259},"indent":[]}}],"position":{"start":{"line":214,"column":1,"offset":21089},"end":{"line":214,"column":171,"offset":21259},"indent":[]}},{"type":"html","value":"<table><tbody><tr><td><pre><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></pre></td><td><pre><span>combineLeftIntoRightSubtree(node) {</span><br><span>  <span>if</span> (node.right) {</span><br><span>    <span>const</span> leftmost = <span>this</span>.getLeftmost(node.right);</span><br><span>    leftmost.left = node.left;</span><br><span>    <span>return</span> node.right;</span><br><span>  }</span><br><span>  <span>return</span> node.left;</span><br><span>}</span><br></pre></td></tr></tbody></table>","position":{"start":{"line":216,"column":1,"offset":21261},"end":{"line":216,"column":604,"offset":21864},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For instance, let's say that we want to combine the following tree and we are about to delete node ","position":{"start":{"line":218,"column":1,"offset":21866},"end":{"line":218,"column":100,"offset":21965},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">30</code>","position":{"start":{"line":218,"column":100,"offset":21965},"end":{"line":218,"column":104,"offset":21969},"indent":[]}},{"type":"text","value":". We want to mix 30's left subtree into the right one. The result is this:","position":{"start":{"line":218,"column":104,"offset":21969},"end":{"line":218,"column":178,"offset":22043},"indent":[]}}],"position":{"start":{"line":218,"column":1,"offset":21866},"end":{"line":218,"column":178,"offset":22043},"indent":[]}},{"type":"html","value":"<table><tbody><tr><td><pre><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></pre></td><td><pre><span>   30*                             40</span><br><span> /     \\                          /  \\</span><br><span>10      40    combine(30)       35   50</span><br><span>  \\    /  \\   -----------&gt;      /</span><br><span>  15  35   50                  10</span><br><span>                                \\</span><br><span>                                 15</span><br></pre></td></tr></tbody></table>","position":{"start":{"line":220,"column":1,"offset":22045},"end":{"line":220,"column":576,"offset":22620},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now, and if we make the new subtree the root, then node ","position":{"start":{"line":222,"column":1,"offset":22622},"end":{"line":222,"column":57,"offset":22678},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">30</code>","position":{"start":{"line":222,"column":57,"offset":22678},"end":{"line":222,"column":61,"offset":22682},"indent":[]}},{"type":"text","value":" is no more!","position":{"start":{"line":222,"column":61,"offset":22682},"end":{"line":222,"column":73,"offset":22694},"indent":[]}}],"position":{"start":{"line":222,"column":1,"offset":22622},"end":{"line":222,"column":73,"offset":22694},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","title":"Binary Tree Transversal","url":"#Binary-Tree-Transversal","children":[],"position":{"start":{"line":224,"column":4,"offset":22699},"end":{"line":224,"column":58,"offset":22753},"indent":[]}},{"type":"text","value":"Binary Tree Transversal","position":{"start":{"line":224,"column":58,"offset":22753},"end":{"line":224,"column":81,"offset":22776},"indent":[]}}],"position":{"start":{"line":224,"column":1,"offset":22696},"end":{"line":224,"column":81,"offset":22776},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"There are different ways of traversing a Binary Tree, depending on the order that the nodes are visited: in-order, pre-order, and post-order. Also, we can use them ","position":{"start":{"line":226,"column":1,"offset":22778},"end":{"line":226,"column":165,"offset":22942},"indent":[]}},{"type":"link","title":null,"url":"chrome-extension://cjedbglnccaioiolemnfhjncicchinao/blog/2018/05/14/Data-Structures-for-Beginners-Graphs-Time-Complexity-tutorial/#Depth-first-search-DFS-Graph-search","children":[{"type":"text","value":"DFS","position":{"start":{"line":226,"column":166,"offset":22943},"end":{"line":226,"column":169,"offset":22946},"indent":[]}}],"position":{"start":{"line":226,"column":165,"offset":22942},"end":{"line":226,"column":338,"offset":23115},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":226,"column":338,"offset":23115},"end":{"line":226,"column":343,"offset":23120},"indent":[]}},{"type":"link","title":null,"url":"chrome-extension://cjedbglnccaioiolemnfhjncicchinao/blog/2018/05/14/Data-Structures-for-Beginners-Graphs-Time-Complexity-tutorial/#Breadth-frirst-search-BFS-Graph-search","children":[{"type":"text","value":"BFS","position":{"start":{"line":226,"column":344,"offset":23121},"end":{"line":226,"column":347,"offset":23124},"indent":[]}}],"position":{"start":{"line":226,"column":343,"offset":23120},"end":{"line":226,"column":519,"offset":23296},"indent":[]}},{"type":"text","value":" that we learned from the ","position":{"start":{"line":226,"column":519,"offset":23296},"end":{"line":226,"column":545,"offset":23322},"indent":[]}},{"type":"link","title":null,"url":"chrome-extension://cjedbglnccaioiolemnfhjncicchinao/blog/2018/05/14/Data-Structures-for-Beginners-Graphs-Time-Complexity-tutorial/","children":[{"type":"text","value":"graph post.","position":{"start":{"line":226,"column":546,"offset":23323},"end":{"line":226,"column":557,"offset":23334},"indent":[]}}],"position":{"start":{"line":226,"column":545,"offset":23322},"end":{"line":226,"column":690,"offset":23467},"indent":[]}},{"type":"text","value":" Let's go through each one.","position":{"start":{"line":226,"column":690,"offset":23467},"end":{"line":226,"column":717,"offset":23494},"indent":[]}}],"position":{"start":{"line":226,"column":1,"offset":22778},"end":{"line":226,"column":717,"offset":23494},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"In-Order Traversal","position":{"start":{"line":228,"column":3,"offset":23498},"end":{"line":228,"column":21,"offset":23516},"indent":[]}}],"position":{"start":{"line":228,"column":1,"offset":23496},"end":{"line":228,"column":23,"offset":23518},"indent":[]}}],"position":{"start":{"line":228,"column":1,"offset":23496},"end":{"line":228,"column":23,"offset":23518},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In-order traversal visit nodes on this order: left, parent, right.","position":{"start":{"line":230,"column":1,"offset":23520},"end":{"line":230,"column":67,"offset":23586},"indent":[]}}],"position":{"start":{"line":230,"column":1,"offset":23520},"end":{"line":230,"column":67,"offset":23586},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"BinarySearchTree.prototype.inOrderTraversal","position":{"start":{"line":232,"column":1,"offset":23588},"end":{"line":232,"column":44,"offset":23631},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/amejiarosario/dsa.js/blob/master/src/data-structures/trees/binary-search-tree.js","children":[{"type":"text","value":"Full Code","position":{"start":{"line":232,"column":45,"offset":23632},"end":{"line":232,"column":54,"offset":23641},"indent":[]}}],"position":{"start":{"line":232,"column":44,"offset":23631},"end":{"line":232,"column":156,"offset":23743},"indent":[]}}],"position":{"start":{"line":232,"column":1,"offset":23588},"end":{"line":232,"column":156,"offset":23743},"indent":[]}},{"type":"html","value":"<table><tbody><tr><td><pre><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></pre></td><td><pre><span>*inOrderTraversal(node = <span>this</span>.root) {</span><br><span>  <span>if</span> (node.left) { <span>yield</span>* <span>this</span>.inOrderTraversal(node.left); }</span><br><span>  <span>yield</span> node;</span><br><span>  <span>if</span> (node.right) { <span>yield</span>* <span>this</span>.inOrderTraversal(node.right); }</span><br><span>}</span><br></pre></td></tr></tbody></table>","position":{"start":{"line":234,"column":1,"offset":23745},"end":{"line":234,"column":534,"offset":24278},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Let's use this tree to make the example:","position":{"start":{"line":236,"column":1,"offset":24280},"end":{"line":236,"column":41,"offset":24320},"indent":[]}}],"position":{"start":{"line":236,"column":1,"offset":24280},"end":{"line":236,"column":41,"offset":24320},"indent":[]}},{"type":"html","value":"<table><tbody><tr><td><pre><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></pre></td><td><pre><span>         10</span><br><span>       /    \\</span><br><span>      5      30</span><br><span>    /       /  \\</span><br><span>   4       15   40</span><br><span> /</span><br><span>3</span><br></pre></td></tr></tbody></table>","position":{"start":{"line":238,"column":1,"offset":24322},"end":{"line":238,"column":401,"offset":24722},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In-order traversal would print out the following values: ","position":{"start":{"line":240,"column":1,"offset":24724},"end":{"line":240,"column":58,"offset":24781},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">3, 4, 5, 10, 15, 30, 40</code>","position":{"start":{"line":240,"column":58,"offset":24781},"end":{"line":240,"column":83,"offset":24806},"indent":[]}},{"type":"text","value":". If the tree is a BST, then the nodes will be sorted in ascendent order as in our example.","position":{"start":{"line":240,"column":83,"offset":24806},"end":{"line":240,"column":174,"offset":24897},"indent":[]}}],"position":{"start":{"line":240,"column":1,"offset":24724},"end":{"line":240,"column":174,"offset":24897},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Post-Order Traversal","position":{"start":{"line":242,"column":3,"offset":24901},"end":{"line":242,"column":23,"offset":24921},"indent":[]}}],"position":{"start":{"line":242,"column":1,"offset":24899},"end":{"line":242,"column":25,"offset":24923},"indent":[]}}],"position":{"start":{"line":242,"column":1,"offset":24899},"end":{"line":242,"column":25,"offset":24923},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Post-order traversal visit nodes on this order: left, right, parent.","position":{"start":{"line":244,"column":1,"offset":24925},"end":{"line":244,"column":69,"offset":24993},"indent":[]}}],"position":{"start":{"line":244,"column":1,"offset":24925},"end":{"line":244,"column":69,"offset":24993},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"BinarySearchTree.prototype.postOrderTraversal","position":{"start":{"line":246,"column":1,"offset":24995},"end":{"line":246,"column":46,"offset":25040},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/amejiarosario/dsa.js/blob/master/src/data-structures/trees/binary-search-tree.js","children":[{"type":"text","value":"Full Code","position":{"start":{"line":246,"column":47,"offset":25041},"end":{"line":246,"column":56,"offset":25050},"indent":[]}}],"position":{"start":{"line":246,"column":46,"offset":25040},"end":{"line":246,"column":158,"offset":25152},"indent":[]}}],"position":{"start":{"line":246,"column":1,"offset":24995},"end":{"line":246,"column":158,"offset":25152},"indent":[]}},{"type":"html","value":"<table><tbody><tr><td><pre><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></pre></td><td><pre><span>*postOrderTraversal(node = <span>this</span>.root) {</span><br><span>  <span>if</span> (node.left) { <span>yield</span>* <span>this</span>.postOrderTraversal(node.left); }</span><br><span>  <span>if</span> (node.right) { <span>yield</span>* <span>this</span>.postOrderTraversal(node.right); }</span><br><span>  <span>yield</span> node;</span><br><span>}</span><br></pre></td></tr></tbody></table>","position":{"start":{"line":248,"column":1,"offset":25154},"end":{"line":248,"column":540,"offset":25693},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Post-order traversal would print out the following values: ","position":{"start":{"line":250,"column":1,"offset":25695},"end":{"line":250,"column":60,"offset":25754},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">3, 4, 5, 15, 40, 30, 10</code>","position":{"start":{"line":250,"column":60,"offset":25754},"end":{"line":250,"column":85,"offset":25779},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":250,"column":85,"offset":25779},"end":{"line":250,"column":86,"offset":25780},"indent":[]}}],"position":{"start":{"line":250,"column":1,"offset":25695},"end":{"line":250,"column":86,"offset":25780},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Pre-Order Traversal and DFS","position":{"start":{"line":252,"column":3,"offset":25784},"end":{"line":252,"column":30,"offset":25811},"indent":[]}}],"position":{"start":{"line":252,"column":1,"offset":25782},"end":{"line":252,"column":32,"offset":25813},"indent":[]}}],"position":{"start":{"line":252,"column":1,"offset":25782},"end":{"line":252,"column":32,"offset":25813},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In-order traversal visit nodes on this order: parent, left, right.","position":{"start":{"line":254,"column":1,"offset":25815},"end":{"line":254,"column":67,"offset":25881},"indent":[]}}],"position":{"start":{"line":254,"column":1,"offset":25815},"end":{"line":254,"column":67,"offset":25881},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"BinarySearchTree.prototype.preOrderTraversal","position":{"start":{"line":256,"column":1,"offset":25883},"end":{"line":256,"column":45,"offset":25927},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/amejiarosario/dsa.js/blob/master/src/data-structures/trees/binary-search-tree.js","children":[{"type":"text","value":"Full Code","position":{"start":{"line":256,"column":46,"offset":25928},"end":{"line":256,"column":55,"offset":25937},"indent":[]}}],"position":{"start":{"line":256,"column":45,"offset":25927},"end":{"line":256,"column":157,"offset":26039},"indent":[]}}],"position":{"start":{"line":256,"column":1,"offset":25883},"end":{"line":256,"column":157,"offset":26039},"indent":[]}},{"type":"html","value":"<table><tbody><tr><td><pre><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></pre></td><td><pre><span>*preOrderTraversal(node = <span>this</span>.root) {</span><br><span>  <span>yield</span> node;</span><br><span>  <span>if</span> (node.left) { <span>yield</span>* <span>this</span>.preOrderTraversal(node.left); }</span><br><span>  <span>if</span> (node.right) { <span>yield</span>* <span>this</span>.preOrderTraversal(node.right); }</span><br><span>}</span><br></pre></td></tr></tbody></table>","position":{"start":{"line":258,"column":1,"offset":26041},"end":{"line":258,"column":537,"offset":26577},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Pre-order traversal would print out the following values: ","position":{"start":{"line":260,"column":1,"offset":26579},"end":{"line":260,"column":59,"offset":26637},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">10, 5, 4, 3, 30, 15, 40</code>","position":{"start":{"line":260,"column":59,"offset":26637},"end":{"line":260,"column":84,"offset":26662},"indent":[]}},{"type":"text","value":". This order of numbers is the same result that we would get if we run the Depth-First Search (DFS).","position":{"start":{"line":260,"column":84,"offset":26662},"end":{"line":260,"column":184,"offset":26762},"indent":[]}}],"position":{"start":{"line":260,"column":1,"offset":26579},"end":{"line":260,"column":184,"offset":26762},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"BinarySearchTree.prototype.dfs","position":{"start":{"line":262,"column":1,"offset":26764},"end":{"line":262,"column":31,"offset":26794},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/amejiarosario/dsa.js/blob/master/src/data-structures/trees/binary-search-tree.js","children":[{"type":"text","value":"Full Code","position":{"start":{"line":262,"column":32,"offset":26795},"end":{"line":262,"column":41,"offset":26804},"indent":[]}}],"position":{"start":{"line":262,"column":31,"offset":26794},"end":{"line":262,"column":143,"offset":26906},"indent":[]}}],"position":{"start":{"line":262,"column":1,"offset":26764},"end":{"line":262,"column":143,"offset":26906},"indent":[]}},{"type":"html","value":"<table><tbody><tr><td><pre><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></pre></td><td><pre><span>* dfs() {</span><br><span>  <span>const</span> stack = <span>new</span> Stack();</span><br><span></span><br><span>  stack.add(<span>this</span>.root);</span><br><span></span><br><span>  <span>while</span> (!stack.isEmpty()) {</span><br><span>    <span>const</span> node = stack.remove();</span><br><span>    <span>yield</span> node;</span><br><span>    </span><br><span>    node.descendents.reverse().forEach(<span><span>child</span> =&gt;</span> stack.add(child));</span><br><span>  }</span><br><span>}</span><br></pre></td></tr></tbody></table>","position":{"start":{"line":264,"column":1,"offset":26908},"end":{"line":264,"column":819,"offset":27726},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you need a refresher on DFS, we covered in details on ","position":{"start":{"line":266,"column":1,"offset":27728},"end":{"line":266,"column":58,"offset":27785},"indent":[]}},{"type":"link","title":null,"url":"chrome-extension://cjedbglnccaioiolemnfhjncicchinao/blog/2018/05/14/Data-Structures-for-Beginners-Graphs-Time-Complexity-tutorial/#Depth-first-search-DFS-Graph-search","children":[{"type":"text","value":"Graph post","position":{"start":{"line":266,"column":59,"offset":27786},"end":{"line":266,"column":69,"offset":27796},"indent":[]}}],"position":{"start":{"line":266,"column":58,"offset":27785},"end":{"line":266,"column":238,"offset":27965},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":266,"column":238,"offset":27965},"end":{"line":266,"column":239,"offset":27966},"indent":[]}}],"position":{"start":{"line":266,"column":1,"offset":27728},"end":{"line":266,"column":239,"offset":27966},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Breadth-First Search (BFS)","position":{"start":{"line":268,"column":3,"offset":27970},"end":{"line":268,"column":29,"offset":27996},"indent":[]}}],"position":{"start":{"line":268,"column":1,"offset":27968},"end":{"line":268,"column":31,"offset":27998},"indent":[]}}],"position":{"start":{"line":268,"column":1,"offset":27968},"end":{"line":268,"column":31,"offset":27998},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Similar to DFS, we can implement a BFS by switching the ","position":{"start":{"line":270,"column":1,"offset":28000},"end":{"line":270,"column":57,"offset":28056},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">Stack</code>","position":{"start":{"line":270,"column":57,"offset":28056},"end":{"line":270,"column":64,"offset":28063},"indent":[]}},{"type":"text","value":" by a ","position":{"start":{"line":270,"column":64,"offset":28063},"end":{"line":270,"column":70,"offset":28069},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">Queue</code>","position":{"start":{"line":270,"column":70,"offset":28069},"end":{"line":270,"column":77,"offset":28076},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":270,"column":77,"offset":28076},"end":{"line":270,"column":78,"offset":28077},"indent":[]}}],"position":{"start":{"line":270,"column":1,"offset":28000},"end":{"line":270,"column":78,"offset":28077},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"BinarySearchTree.prototype.bfs","position":{"start":{"line":272,"column":1,"offset":28079},"end":{"line":272,"column":31,"offset":28109},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/amejiarosario/dsa.js/blob/master/src/data-structures/trees/binary-search-tree.js","children":[{"type":"text","value":"Full Code","position":{"start":{"line":272,"column":32,"offset":28110},"end":{"line":272,"column":41,"offset":28119},"indent":[]}}],"position":{"start":{"line":272,"column":31,"offset":28109},"end":{"line":272,"column":143,"offset":28221},"indent":[]}}],"position":{"start":{"line":272,"column":1,"offset":28079},"end":{"line":272,"column":143,"offset":28221},"indent":[]}},{"type":"html","value":"<table><tbody><tr><td><pre><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></pre></td><td><pre><span>* bfs() {</span><br><span>  <span>const</span> queue = <span>new</span> Queue();</span><br><span></span><br><span>  queue.add(<span>this</span>.root);</span><br><span></span><br><span>  <span>while</span> (!queue.isEmpty()) {</span><br><span>    <span>const</span> node = queue.remove();</span><br><span>    <span>yield</span> node;</span><br><span>    node.descendents.forEach(<span><span>child</span> =&gt;</span> queue.add(child));</span><br><span>  }</span><br><span>}</span><br></pre></td></tr></tbody></table>","position":{"start":{"line":274,"column":1,"offset":28223},"end":{"line":274,"column":769,"offset":28991},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The BFS order is: ","position":{"start":{"line":276,"column":1,"offset":28993},"end":{"line":276,"column":19,"offset":29011},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">10, 5, 30, 4, 15, 40, 3</code>","position":{"start":{"line":276,"column":19,"offset":29011},"end":{"line":276,"column":44,"offset":29036},"indent":[]}}],"position":{"start":{"line":276,"column":1,"offset":28993},"end":{"line":276,"column":44,"offset":29036},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","title":"Balanced vs. Non-balanced Trees","url":"#Balanced-vs-Non-balanced-Trees","children":[],"position":{"start":{"line":278,"column":4,"offset":29041},"end":{"line":278,"column":73,"offset":29110},"indent":[]}},{"type":"text","value":"Balanced vs. Non-balanced Trees","position":{"start":{"line":278,"column":73,"offset":29110},"end":{"line":278,"column":104,"offset":29141},"indent":[]}}],"position":{"start":{"line":278,"column":1,"offset":29038},"end":{"line":278,"column":104,"offset":29141},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So far, we have discussed how to ","position":{"start":{"line":280,"column":1,"offset":29143},"end":{"line":280,"column":34,"offset":29176},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">add</code>","position":{"start":{"line":280,"column":34,"offset":29176},"end":{"line":280,"column":39,"offset":29181},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":280,"column":39,"offset":29181},"end":{"line":280,"column":41,"offset":29183},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">remove</code>","position":{"start":{"line":280,"column":41,"offset":29183},"end":{"line":280,"column":49,"offset":29191},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":280,"column":49,"offset":29191},"end":{"line":280,"column":54,"offset":29196},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">find</code>","position":{"start":{"line":280,"column":54,"offset":29196},"end":{"line":280,"column":60,"offset":29202},"indent":[]}},{"type":"text","value":" elements. However, we haven't talked about runtimes. Let's think about the worst-case scenarios.","position":{"start":{"line":280,"column":60,"offset":29202},"end":{"line":280,"column":157,"offset":29299},"indent":[]}}],"position":{"start":{"line":280,"column":1,"offset":29143},"end":{"line":280,"column":157,"offset":29299},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Let's say that we want to add numbers in ascending order.","position":{"start":{"line":282,"column":1,"offset":29301},"end":{"line":282,"column":58,"offset":29358},"indent":[]}}],"position":{"start":{"line":282,"column":1,"offset":29301},"end":{"line":282,"column":58,"offset":29358},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":"Inserting values in ascending order in a Binary Search Tree","url":"chrome-extension://cjedbglnccaioiolemnfhjncicchinao/images/bst-asc.gif","alt":null,"position":{"start":{"line":284,"column":1,"offset":29360},"end":{"line":284,"column":138,"offset":29497},"indent":[]}}],"position":{"start":{"line":284,"column":1,"offset":29360},"end":{"line":284,"column":138,"offset":29497},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We will end up with all the nodes on the left side! This unbalanced tree is no better than a LinkedList, so finding an element would take ","position":{"start":{"line":286,"column":1,"offset":29499},"end":{"line":286,"column":139,"offset":29637},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"O(n)","position":{"start":{"line":286,"column":140,"offset":29638},"end":{"line":286,"column":144,"offset":29642},"indent":[]}}],"position":{"start":{"line":286,"column":139,"offset":29637},"end":{"line":286,"column":145,"offset":29643},"indent":[]}},{"type":"text","value":". ðŸ˜±","position":{"start":{"line":286,"column":145,"offset":29643},"end":{"line":286,"column":149,"offset":29647},"indent":[]}}],"position":{"start":{"line":286,"column":1,"offset":29499},"end":{"line":286,"column":149,"offset":29647},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Looking for something in an unbalanced tree is like looking for a word in the dictionary page by page. When the tree is balanced, you can open the dictionary in the middle and from there you know if you have to go left or right depending on the alphabet and the word you are looking for.","position":{"start":{"line":288,"column":1,"offset":29649},"end":{"line":288,"column":288,"offset":29936},"indent":[]}}],"position":{"start":{"line":288,"column":1,"offset":29649},"end":{"line":288,"column":288,"offset":29936},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We need to find a way to balance the tree!","position":{"start":{"line":290,"column":1,"offset":29938},"end":{"line":290,"column":43,"offset":29980},"indent":[]}}],"position":{"start":{"line":290,"column":1,"offset":29938},"end":{"line":290,"column":43,"offset":29980},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If the tree was ","position":{"start":{"line":292,"column":1,"offset":29982},"end":{"line":292,"column":17,"offset":29998},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"balanced","position":{"start":{"line":292,"column":19,"offset":30000},"end":{"line":292,"column":27,"offset":30008},"indent":[]}}],"position":{"start":{"line":292,"column":17,"offset":29998},"end":{"line":292,"column":29,"offset":30010},"indent":[]}},{"type":"text","value":", then we could find elements in ","position":{"start":{"line":292,"column":29,"offset":30010},"end":{"line":292,"column":62,"offset":30043},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"O(log n)","position":{"start":{"line":292,"column":63,"offset":30044},"end":{"line":292,"column":71,"offset":30052},"indent":[]}}],"position":{"start":{"line":292,"column":62,"offset":30043},"end":{"line":292,"column":72,"offset":30053},"indent":[]}},{"type":"text","value":" instead of going through each node. Let's talk about what balanced tree means.","position":{"start":{"line":292,"column":72,"offset":30053},"end":{"line":292,"column":151,"offset":30132},"indent":[]}}],"position":{"start":{"line":292,"column":1,"offset":29982},"end":{"line":292,"column":151,"offset":30132},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":"Balanced vs unbalanced Tree","url":"chrome-extension://cjedbglnccaioiolemnfhjncicchinao/images/balanced-vs-non-balanced-tree.jpg","alt":null,"position":{"start":{"line":294,"column":1,"offset":30134},"end":{"line":294,"column":128,"offset":30261},"indent":[]}}],"position":{"start":{"line":294,"column":1,"offset":30134},"end":{"line":294,"column":128,"offset":30261},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If we are searching for ","position":{"start":{"line":296,"column":1,"offset":30263},"end":{"line":296,"column":25,"offset":30287},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">7</code>","position":{"start":{"line":296,"column":25,"offset":30287},"end":{"line":296,"column":28,"offset":30290},"indent":[]}},{"type":"text","value":" in the non-balanced tree, we have to go from 1 to 7. However, in the balanced tree, we visit: ","position":{"start":{"line":296,"column":28,"offset":30290},"end":{"line":296,"column":123,"offset":30385},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">4</code>","position":{"start":{"line":296,"column":123,"offset":30385},"end":{"line":296,"column":126,"offset":30388},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":296,"column":126,"offset":30388},"end":{"line":296,"column":128,"offset":30390},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">6</code>","position":{"start":{"line":296,"column":128,"offset":30390},"end":{"line":296,"column":131,"offset":30393},"indent":[]}},{"type":"text","value":", and ","position":{"start":{"line":296,"column":131,"offset":30393},"end":{"line":296,"column":137,"offset":30399},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">7</code>","position":{"start":{"line":296,"column":137,"offset":30399},"end":{"line":296,"column":140,"offset":30402},"indent":[]}},{"type":"text","value":". It gets even worse with larger trees. If you have one million nodes, searching for a non-existing element might require to visit all million while on a balanced tree it just requires 20 visits! That's a huge difference!","position":{"start":{"line":296,"column":140,"offset":30402},"end":{"line":296,"column":361,"offset":30623},"indent":[]}}],"position":{"start":{"line":296,"column":1,"offset":30263},"end":{"line":296,"column":361,"offset":30623},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We are going to solve this issue in the next post using self-balanced trees (AVL trees).","position":{"start":{"line":298,"column":1,"offset":30625},"end":{"line":298,"column":89,"offset":30713},"indent":[]}}],"position":{"start":{"line":298,"column":1,"offset":30625},"end":{"line":298,"column":89,"offset":30713},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Big O Notation","position":{"start":{"line":300,"column":4,"offset":30718},"end":{"line":300,"column":18,"offset":30732},"indent":[]}}],"position":{"start":{"line":300,"column":1,"offset":30715},"end":{"line":300,"column":18,"offset":30732},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"time complexity","position":{"start":{"line":302,"column":5,"offset":30738},"end":{"line":302,"column":20,"offset":30753},"indent":[]}}],"position":{"start":{"line":302,"column":1,"offset":30734},"end":{"line":302,"column":20,"offset":30753},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"it allow us to talk formally about how the runtime of an algorithm grows as the input grows.","position":{"start":{"line":304,"column":1,"offset":30755},"end":{"line":304,"column":93,"offset":30847},"indent":[]}}],"position":{"start":{"line":304,"column":1,"offset":30755},"end":{"line":304,"column":93,"offset":30847},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"n = number of operation the computer has to do can be:\nf(n) = n\nf(n) = n^2\nf(n) = 1","position":{"start":{"line":306,"column":1,"offset":30849},"end":{"line":309,"column":9,"offset":30932},"indent":[1,1,1]}}],"position":{"start":{"line":306,"column":1,"offset":30849},"end":{"line":309,"column":9,"offset":30932},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"f(n) = could be something entirely different !","position":{"start":{"line":311,"column":1,"offset":30934},"end":{"line":311,"column":47,"offset":30980},"indent":[]}}],"position":{"start":{"line":311,"column":1,"offset":30934},"end":{"line":311,"column":47,"offset":30980},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"O(n):","position":{"start":{"line":313,"column":1,"offset":30982},"end":{"line":313,"column":6,"offset":30987},"indent":[]}}],"position":{"start":{"line":313,"column":1,"offset":30982},"end":{"line":313,"column":6,"offset":30987},"indent":[]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">addUpToSimple</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">n</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        total <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> total<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":315,"column":1,"offset":30989},"end":{"line":323,"column":4,"offset":31141},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"O(1):","position":{"start":{"line":325,"column":1,"offset":31143},"end":{"line":325,"column":6,"offset":31148},"indent":[]}}],"position":{"start":{"line":325,"column":1,"offset":31143},"end":{"line":325,"column":6,"offset":31148},"indent":[]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">addUpComplex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">n</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":327,"column":1,"offset":31150},"end":{"line":331,"column":4,"offset":31234},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"O(n): maybe thinking O(2n) but we see big picture! BigONotation doesn't care about precision only about general trends ","position":{"start":{"line":333,"column":1,"offset":31236},"end":{"line":333,"column":120,"offset":31355},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"linear? quadric? constant?","position":{"start":{"line":333,"column":121,"offset":31356},"end":{"line":333,"column":147,"offset":31382},"indent":[]}}],"position":{"start":{"line":333,"column":120,"offset":31355},"end":{"line":333,"column":148,"offset":31383},"indent":[]}}],"position":{"start":{"line":333,"column":1,"offset":31236},"end":{"line":333,"column":148,"offset":31383},"indent":[]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">printUpAndDown</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">n</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Going up'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Going down'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":335,"column":1,"offset":31385},"end":{"line":346,"column":4,"offset":31633},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"O(n^2)","position":{"start":{"line":348,"column":1,"offset":31635},"end":{"line":348,"column":7,"offset":31641},"indent":[]}}],"position":{"start":{"line":348,"column":1,"offset":31635},"end":{"line":348,"column":7,"offset":31641},"indent":[]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">printAllPairs</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">n</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":350,"column":1,"offset":31643},"end":{"line":359,"column":4,"offset":31838},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"O(n) : cuz as soon as n grows complexity grows too","position":{"start":{"line":361,"column":1,"offset":31840},"end":{"line":361,"column":51,"offset":31890},"indent":[]}}],"position":{"start":{"line":361,"column":1,"offset":31840},"end":{"line":361,"column":51,"offset":31890},"indent":[]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">logAtLeastFive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">n</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":363,"column":1,"offset":31892},"end":{"line":369,"column":4,"offset":32026},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"O(1)","position":{"start":{"line":371,"column":1,"offset":32028},"end":{"line":371,"column":5,"offset":32032},"indent":[]}}],"position":{"start":{"line":371,"column":1,"offset":32028},"end":{"line":371,"column":5,"offset":32032},"indent":[]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">logAtMostFive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">n</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":373,"column":1,"offset":32034},"end":{"line":379,"column":4,"offset":32167},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"space complexity","position":{"start":{"line":381,"column":5,"offset":32173},"end":{"line":381,"column":21,"offset":32189},"indent":[]}}],"position":{"start":{"line":381,"column":1,"offset":32169},"end":{"line":381,"column":21,"offset":32189},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Rules of Thumb","position":{"start":{"line":383,"column":1,"offset":32191},"end":{"line":383,"column":15,"offset":32205},"indent":[]}}],"position":{"start":{"line":383,"column":1,"offset":32191},"end":{"line":383,"column":15,"offset":32205},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"<==(","position":{"start":{"line":385,"column":5,"offset":32211},"end":{"line":385,"column":9,"offset":32215},"indent":[]}},{"type":"emphasis","children":[{"type":"strong","children":[{"type":"text","value":"most primitive booleans numbers undefined null are constant space","position":{"start":{"line":385,"column":12,"offset":32218},"end":{"line":385,"column":77,"offset":32283},"indent":[]}}],"position":{"start":{"line":385,"column":10,"offset":32216},"end":{"line":385,"column":79,"offset":32285},"indent":[]}}],"position":{"start":{"line":385,"column":9,"offset":32215},"end":{"line":385,"column":80,"offset":32286},"indent":[]}},{"type":"text","value":")==>.","position":{"start":{"line":385,"column":80,"offset":32286},"end":{"line":385,"column":85,"offset":32291},"indent":[]}}],"position":{"start":{"line":385,"column":5,"offset":32211},"end":{"line":385,"column":85,"offset":32291},"indent":[]}}],"position":{"start":{"line":385,"column":1,"offset":32207},"end":{"line":385,"column":85,"offset":32291},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"<==(","position":{"start":{"line":386,"column":5,"offset":32296},"end":{"line":386,"column":9,"offset":32300},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"*","position":{"start":{"line":386,"column":10,"offset":32301},"end":{"line":386,"column":12,"offset":32303},"indent":[]}},{"type":"text","value":"*","position":{"start":{"line":386,"column":12,"offset":32303},"end":{"line":386,"column":14,"offset":32305},"indent":[]}},{"type":"text","value":"strings and reference types like objects an arrays require O(n) space \\","position":{"start":{"line":386,"column":14,"offset":32305},"end":{"line":386,"column":85,"offset":32376},"indent":[]}}],"position":{"start":{"line":386,"column":9,"offset":32300},"end":{"line":386,"column":86,"offset":32377},"indent":[]}},{"type":"text","value":"n is string length or number of keys","position":{"start":{"line":386,"column":86,"offset":32377},"end":{"line":386,"column":122,"offset":32413},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"*","position":{"start":{"line":386,"column":123,"offset":32414},"end":{"line":386,"column":125,"offset":32416},"indent":[]}},{"type":"text","value":"*","position":{"start":{"line":386,"column":125,"offset":32416},"end":{"line":386,"column":127,"offset":32418},"indent":[]}},{"type":"text","value":"\\","position":{"start":{"line":386,"column":127,"offset":32418},"end":{"line":386,"column":128,"offset":32419},"indent":[]}}],"position":{"start":{"line":386,"column":122,"offset":32413},"end":{"line":386,"column":129,"offset":32420},"indent":[]}},{"type":"text","value":")==>","position":{"start":{"line":386,"column":129,"offset":32420},"end":{"line":386,"column":133,"offset":32424},"indent":[]}}],"position":{"start":{"line":386,"column":5,"offset":32296},"end":{"line":386,"column":133,"offset":32424},"indent":[]}}],"position":{"start":{"line":386,"column":1,"offset":32292},"end":{"line":386,"column":133,"offset":32424},"indent":[]}}],"position":{"start":{"line":385,"column":1,"offset":32207},"end":{"line":386,"column":133,"offset":32424},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"O(1)","position":{"start":{"line":388,"column":1,"offset":32426},"end":{"line":388,"column":5,"offset":32430},"indent":[]}}],"position":{"start":{"line":388,"column":1,"offset":32426},"end":{"line":388,"column":5,"offset":32430},"indent":[]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">arr</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        total <span class=\"token operator\">+=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":390,"column":1,"offset":32432},"end":{"line":397,"column":4,"offset":32574},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"O(n)","position":{"start":{"line":399,"column":1,"offset":32576},"end":{"line":399,"column":5,"offset":32580},"indent":[]}}],"position":{"start":{"line":399,"column":1,"offset":32576},"end":{"line":399,"column":5,"offset":32580},"indent":[]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">double</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">arr</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> newArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        array<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> newArr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":401,"column":1,"offset":32582},"end":{"line":409,"column":4,"offset":32757},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"quick note around object, array through BigO lens","position":{"start":{"line":411,"column":5,"offset":32763},"end":{"line":411,"column":54,"offset":32812},"indent":[]}}],"position":{"start":{"line":411,"column":1,"offset":32759},"end":{"line":411,"column":54,"offset":32812},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"object:","position":{"start":{"line":413,"column":5,"offset":32818},"end":{"line":413,"column":12,"offset":32825},"indent":[]}}],"position":{"start":{"line":413,"column":5,"offset":32818},"end":{"line":413,"column":12,"offset":32825},"indent":[]}}],"position":{"start":{"line":413,"column":1,"offset":32814},"end":{"line":413,"column":12,"offset":32825},"indent":[]}}],"position":{"start":{"line":413,"column":1,"offset":32814},"end":{"line":413,"column":12,"offset":32825},"indent":[]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">hobbies</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'reading'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sleeping'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"name\", \"age\", \"hobbies\"] --->              O(n)</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"John\", 22, Array(2)]--->                 O(n)</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [Array(2), Array(2), Array(2)]--->        O(n)</span>\nperson<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true --->                          O(1)</span></code></pre></div>","position":{"start":{"line":415,"column":1,"offset":32827},"end":{"line":422,"column":4,"offset":33217},"indent":[1,1,1,1,1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"array:\n","position":{"start":{"line":424,"column":5,"offset":33223},"end":{"line":425,"column":5,"offset":33234},"indent":[5]}},{"type":"strong","children":[{"type":"emphasis","children":[{"type":"text","value":"push() and pop()","position":{"start":{"line":425,"column":8,"offset":33237},"end":{"line":425,"column":24,"offset":33253},"indent":[]}}],"position":{"start":{"line":425,"column":7,"offset":33236},"end":{"line":425,"column":25,"offset":33254},"indent":[]}},{"type":"text","value":" are always faster than ","position":{"start":{"line":425,"column":25,"offset":33254},"end":{"line":425,"column":49,"offset":33278},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"unshift() and shift()","position":{"start":{"line":425,"column":50,"offset":33279},"end":{"line":425,"column":71,"offset":33300},"indent":[]}}],"position":{"start":{"line":425,"column":49,"offset":33278},"end":{"line":425,"column":72,"offset":33301},"indent":[]}},{"type":"text","value":" because inserting or removing element from beginning of an array requires reIndexing all elements","position":{"start":{"line":425,"column":72,"offset":33301},"end":{"line":425,"column":170,"offset":33399},"indent":[]}}],"position":{"start":{"line":425,"column":5,"offset":33234},"end":{"line":425,"column":172,"offset":33401},"indent":[]}}],"position":{"start":{"line":424,"column":5,"offset":33223},"end":{"line":425,"column":172,"offset":33401},"indent":[5]}}],"position":{"start":{"line":424,"column":1,"offset":33219},"end":{"line":425,"column":172,"offset":33401},"indent":[1]}}],"position":{"start":{"line":424,"column":1,"offset":33219},"end":{"line":425,"column":172,"offset":33401},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Common Patterns","position":{"start":{"line":427,"column":4,"offset":33406},"end":{"line":427,"column":19,"offset":33421},"indent":[]}}],"position":{"start":{"line":427,"column":1,"offset":33403},"end":{"line":427,"column":19,"offset":33421},"indent":[]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">sortedArr</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> min <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> max <span class=\"token operator\">=</span> sortedArr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>min <span class=\"token operator\">&lt;=</span> max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> middle <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>min <span class=\"token operator\">+</span> max<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sortedArr<span class=\"token punctuation\">[</span>middle<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            min <span class=\"token operator\">=</span> middle <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sortedArr<span class=\"token punctuation\">[</span>middle<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            max <span class=\"token operator\">=</span> middle <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> middle<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":429,"column":1,"offset":33423},"end":{"line":446,"column":4,"offset":33863},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Recursion","position":{"start":{"line":448,"column":4,"offset":33868},"end":{"line":448,"column":13,"offset":33877},"indent":[]}}],"position":{"start":{"line":448,"column":1,"offset":33865},"end":{"line":448,"column":13,"offset":33877},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"a process that calls itself","position":{"start":{"line":450,"column":1,"offset":33879},"end":{"line":450,"column":28,"offset":33906},"indent":[]}}],"position":{"start":{"line":450,"column":1,"offset":33879},"end":{"line":450,"column":28,"offset":33906},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"quick note around callStack","position":{"start":{"line":452,"column":1,"offset":33908},"end":{"line":452,"column":28,"offset":33935},"indent":[]}}],"position":{"start":{"line":452,"column":1,"offset":33908},"end":{"line":452,"column":28,"offset":33935},"indent":[]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">wakeUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// callStack [wakeUp]</span>\n    <span class=\"token function\">takeShower</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">eatBreakfast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Ready to go ... '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// callStack []</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">takeShower</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// callStack [takeShower, wakeUp]</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'taking shower'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// callStack[wakeUp]</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">eatBreakfast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// callStack [eatBreakfast, wakeUp]</span>\n    <span class=\"token keyword\">const</span> meal <span class=\"token operator\">=</span> <span class=\"token function\">cookBreakFast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">eating </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>meal<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// callStack [wakeUp]</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">cookBreakFast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// callStack [cookBreakFast, eatBreakfast, wakeUp]</span>\n    <span class=\"token keyword\">const</span> meals <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Cheese'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Protein Shake'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Coffee'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> meals<span class=\"token punctuation\">[</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> meals<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// callStack [eatBreakFast, wakeUp]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">wakeUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":454,"column":1,"offset":33937},"end":{"line":480,"column":4,"offset":34622},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"two essential part of recursive functions","position":{"start":{"line":482,"column":1,"offset":34624},"end":{"line":482,"column":42,"offset":34665},"indent":[]}}],"position":{"start":{"line":482,"column":1,"offset":34624},"end":{"line":482,"column":42,"offset":34665},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"base case : end of the line","position":{"start":{"line":484,"column":7,"offset":34673},"end":{"line":484,"column":34,"offset":34700},"indent":[]}}],"position":{"start":{"line":484,"column":5,"offset":34671},"end":{"line":484,"column":36,"offset":34702},"indent":[]}}],"position":{"start":{"line":484,"column":5,"offset":34671},"end":{"line":484,"column":36,"offset":34702},"indent":[]}}],"position":{"start":{"line":484,"column":1,"offset":34667},"end":{"line":484,"column":36,"offset":34702},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"different input : recursive should call by different piece of data","position":{"start":{"line":485,"column":7,"offset":34709},"end":{"line":485,"column":73,"offset":34775},"indent":[]}}],"position":{"start":{"line":485,"column":5,"offset":34707},"end":{"line":485,"column":75,"offset":34777},"indent":[]}}],"position":{"start":{"line":485,"column":5,"offset":34707},"end":{"line":485,"column":75,"offset":34777},"indent":[]}}],"position":{"start":{"line":485,"column":1,"offset":34703},"end":{"line":485,"column":75,"offset":34777},"indent":[]}}],"position":{"start":{"line":484,"column":1,"offset":34667},"end":{"line":485,"column":75,"offset":34777},"indent":[1]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">sumRange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">num</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> num <span class=\"token operator\">+</span> <span class=\"token function\">sumRange</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">num</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> num <span class=\"token operator\">*</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":487,"column":1,"offset":34779},"end":{"line":497,"column":4,"offset":34999},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"helper method recursion vs pure recursion","position":{"start":{"line":499,"column":1,"offset":35001},"end":{"line":499,"column":42,"offset":35042},"indent":[]}}],"position":{"start":{"line":499,"column":1,"offset":35001},"end":{"line":499,"column":42,"offset":35042},"indent":[]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// helper method recursion approach</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">collectOdd</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">arr</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">helper</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">helperArr</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>helperArr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>helperArr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>helperArr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token function\">helper</span><span class=\"token punctuation\">(</span>helperArr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">helper</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// pure recursion approach</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">collectOdd</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">arr</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    result <span class=\"token operator\">=</span> <span class=\"token function\">collectOdd</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":501,"column":1,"offset":35044},"end":{"line":538,"column":4,"offset":35724},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Searching Algorithms","position":{"start":{"line":540,"column":4,"offset":35729},"end":{"line":540,"column":24,"offset":35749},"indent":[]}}],"position":{"start":{"line":540,"column":1,"offset":35726},"end":{"line":540,"column":24,"offset":35749},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"linear search","position":{"start":{"line":542,"column":5,"offset":35755},"end":{"line":542,"column":18,"offset":35768},"indent":[]}}],"position":{"start":{"line":542,"column":1,"offset":35751},"end":{"line":542,"column":18,"offset":35768},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"indexOf() includes() find() findIndex()","position":{"start":{"line":544,"column":2,"offset":35771},"end":{"line":544,"column":41,"offset":35810},"indent":[]}}],"position":{"start":{"line":544,"column":1,"offset":35770},"end":{"line":544,"column":42,"offset":35811},"indent":[]}},{"type":"text","value":" all this methods doing linear search behind the scene","position":{"start":{"line":544,"column":42,"offset":35811},"end":{"line":544,"column":96,"offset":35865},"indent":[]}}],"position":{"start":{"line":544,"column":1,"offset":35770},"end":{"line":544,"column":96,"offset":35865},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"O(n)","position":{"start":{"line":546,"column":1,"offset":35867},"end":{"line":546,"column":5,"offset":35871},"indent":[]}}],"position":{"start":{"line":546,"column":1,"offset":35867},"end":{"line":546,"column":5,"offset":35871},"indent":[]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">linearSearch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">arr</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":548,"column":1,"offset":35873},"end":{"line":557,"column":4,"offset":36086},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"binary search","position":{"start":{"line":559,"column":5,"offset":36092},"end":{"line":559,"column":18,"offset":36105},"indent":[]}}],"position":{"start":{"line":559,"column":1,"offset":36088},"end":{"line":559,"column":18,"offset":36105},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"O(Log n)","position":{"start":{"line":561,"column":1,"offset":36107},"end":{"line":561,"column":9,"offset":36115},"indent":[]}}],"position":{"start":{"line":561,"column":1,"offset":36107},"end":{"line":561,"column":9,"offset":36115},"indent":[]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">sortedArr</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> right <span class=\"token operator\">=</span> sortedArr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> middle <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>right <span class=\"token operator\">+</span> left<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sortedArr<span class=\"token punctuation\">[</span>middle<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            right <span class=\"token operator\">=</span> middle <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sortedArr<span class=\"token punctuation\">[</span>middle<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            left <span class=\"token operator\">=</span> middle <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> middle<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":563,"column":1,"offset":36117},"end":{"line":581,"column":4,"offset":36572},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Sorting Algorithms","position":{"start":{"line":583,"column":4,"offset":36577},"end":{"line":583,"column":22,"offset":36595},"indent":[]}}],"position":{"start":{"line":583,"column":1,"offset":36574},"end":{"line":583,"column":22,"offset":36595},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"array.sort()","position":{"start":{"line":585,"column":5,"offset":36601},"end":{"line":585,"column":17,"offset":36613},"indent":[]}}],"position":{"start":{"line":585,"column":1,"offset":36597},"end":{"line":585,"column":17,"offset":36613},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"array.sort(cb) will turn all values to ","position":{"start":{"line":587,"column":1,"offset":36615},"end":{"line":587,"column":40,"offset":36654},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"string","position":{"start":{"line":587,"column":41,"offset":36655},"end":{"line":587,"column":47,"offset":36661},"indent":[]}}],"position":{"start":{"line":587,"column":40,"offset":36654},"end":{"line":587,"column":48,"offset":36662},"indent":[]}},{"type":"text","value":" then sort it based on it's ","position":{"start":{"line":587,"column":48,"offset":36662},"end":{"line":587,"column":76,"offset":36690},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"unicode","position":{"start":{"line":587,"column":77,"offset":36691},"end":{"line":587,"column":84,"offset":36698},"indent":[]}}],"position":{"start":{"line":587,"column":76,"offset":36690},"end":{"line":587,"column":85,"offset":36699},"indent":[]}}],"position":{"start":{"line":587,"column":1,"offset":36615},"end":{"line":587,"column":85,"offset":36699},"indent":[]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// (5) [\"a\", \"b\", \"c\", \"d\", \"f\"]</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//(7) [1, 10, 2, 3, 5, 6, 8]</span>\n\n<span class=\"token comment\">/* \nalso receive callback function by two arguments:\n    a: previous number \n    b: next number \n\n*/</span>\n<span class=\"token comment\">// if callback return NEGATIVE number a will placed before b</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// (7) [1, 2, 3, 5, 6, 8, 10]</span>\n\n<span class=\"token comment\">// if callback return POSITIVE number a will placed after b</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> b <span class=\"token operator\">-</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// (7) [10, 8, 6, 5, 3, 2, 1]</span>\n\n<span class=\"token comment\">// if callback return ZERO a and b will placed at the same position</span></code></pre></div>","position":{"start":{"line":589,"column":1,"offset":36701},"end":{"line":606,"column":4,"offset":37295},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Quadric","position":{"start":{"line":608,"column":4,"offset":37300},"end":{"line":608,"column":11,"offset":37307},"indent":[]}}],"position":{"start":{"line":608,"column":1,"offset":37297},"end":{"line":608,"column":11,"offset":37307},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"bubble sort","position":{"start":{"line":610,"column":5,"offset":37313},"end":{"line":610,"column":16,"offset":37324},"indent":[]}}],"position":{"start":{"line":610,"column":1,"offset":37309},"end":{"line":610,"column":16,"offset":37324},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"general: O(n^2)\nnearlySortedData: O(n)","position":{"start":{"line":612,"column":1,"offset":37326},"end":{"line":613,"column":23,"offset":37364},"indent":[1]}}],"position":{"start":{"line":612,"column":1,"offset":37326},"end":{"line":613,"column":23,"offset":37364},"indent":[1]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">arr</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> noSwap <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                noSwap <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>noSwap<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// or</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">arr</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> noSwap <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                noSwap <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>noSwap<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":615,"column":1,"offset":37366},"end":{"line":645,"column":4,"offset":38132},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"selection sort","position":{"start":{"line":647,"column":5,"offset":38138},"end":{"line":647,"column":19,"offset":38152},"indent":[]}}],"position":{"start":{"line":647,"column":1,"offset":38134},"end":{"line":647,"column":19,"offset":38152},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"O(n^2)","position":{"start":{"line":649,"column":1,"offset":38154},"end":{"line":649,"column":7,"offset":38160},"indent":[]}}],"position":{"start":{"line":649,"column":1,"offset":38154},"end":{"line":649,"column":7,"offset":38160},"indent":[]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">selectionSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">arr</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> min <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>min<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                min <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>min <span class=\"token operator\">!==</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>min<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>min<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":651,"column":1,"offset":38162},"end":{"line":666,"column":4,"offset":38532},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"insertion sort","position":{"start":{"line":668,"column":5,"offset":38538},"end":{"line":668,"column":19,"offset":38552},"indent":[]}}],"position":{"start":{"line":668,"column":1,"offset":38534},"end":{"line":668,"column":19,"offset":38552},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"general: O(n^2)\nnearlySortedData: O(n)","position":{"start":{"line":670,"column":1,"offset":38554},"end":{"line":671,"column":23,"offset":38592},"indent":[1]}}],"position":{"start":{"line":670,"column":1,"offset":38554},"end":{"line":671,"column":23,"offset":38592},"indent":[1]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">insertionSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> currentVal<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        currentVal <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> currentVal<span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> currentVal<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":673,"column":1,"offset":38594},"end":{"line":685,"column":4,"offset":38899},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"quadric sorting algorithms comparison","position":{"start":{"line":687,"column":5,"offset":38905},"end":{"line":687,"column":42,"offset":38942},"indent":[]}}],"position":{"start":{"line":687,"column":1,"offset":38901},"end":{"line":687,"column":42,"offset":38942},"indent":[]}},{"type":"table","align":["center","center","center","center","center"],"children":[{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Algorithm","position":{"start":{"line":689,"column":5,"offset":38948},"end":{"line":689,"column":14,"offset":38957},"indent":[]}}],"position":{"start":{"line":689,"column":5,"offset":38948},"end":{"line":689,"column":17,"offset":38960},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Time Complexity (Best)","position":{"start":{"line":689,"column":20,"offset":38963},"end":{"line":689,"column":42,"offset":38985},"indent":[]}}],"position":{"start":{"line":689,"column":20,"offset":38963},"end":{"line":689,"column":42,"offset":38985},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Time Complexity (Average)","position":{"start":{"line":689,"column":45,"offset":38988},"end":{"line":689,"column":70,"offset":39013},"indent":[]}}],"position":{"start":{"line":689,"column":45,"offset":38988},"end":{"line":689,"column":70,"offset":39013},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Time Complexity (worst)","position":{"start":{"line":689,"column":73,"offset":39016},"end":{"line":689,"column":96,"offset":39039},"indent":[]}}],"position":{"start":{"line":689,"column":73,"offset":39016},"end":{"line":689,"column":96,"offset":39039},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Space Complexity","position":{"start":{"line":689,"column":99,"offset":39042},"end":{"line":689,"column":115,"offset":39058},"indent":[]}}],"position":{"start":{"line":689,"column":99,"offset":39042},"end":{"line":689,"column":115,"offset":39058},"indent":[]}}],"position":{"start":{"line":689,"column":1,"offset":38944},"end":{"line":689,"column":117,"offset":39060},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"bubble sort","position":{"start":{"line":691,"column":4,"offset":39181},"end":{"line":691,"column":15,"offset":39192},"indent":[]}}],"position":{"start":{"line":691,"column":4,"offset":39181},"end":{"line":691,"column":17,"offset":39194},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(n)","position":{"start":{"line":691,"column":29,"offset":39206},"end":{"line":691,"column":33,"offset":39210},"indent":[]}}],"position":{"start":{"line":691,"column":29,"offset":39206},"end":{"line":691,"column":42,"offset":39219},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(n^2)","position":{"start":{"line":691,"column":54,"offset":39231},"end":{"line":691,"column":60,"offset":39237},"indent":[]}}],"position":{"start":{"line":691,"column":54,"offset":39231},"end":{"line":691,"column":70,"offset":39247},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(n^2)","position":{"start":{"line":691,"column":81,"offset":39258},"end":{"line":691,"column":87,"offset":39264},"indent":[]}}],"position":{"start":{"line":691,"column":81,"offset":39258},"end":{"line":691,"column":96,"offset":39273},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(1)","position":{"start":{"line":691,"column":105,"offset":39282},"end":{"line":691,"column":109,"offset":39286},"indent":[]}}],"position":{"start":{"line":691,"column":105,"offset":39282},"end":{"line":691,"column":115,"offset":39292},"indent":[]}}],"position":{"start":{"line":691,"column":1,"offset":39178},"end":{"line":691,"column":117,"offset":39294},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"insertion sort","position":{"start":{"line":692,"column":3,"offset":39297},"end":{"line":692,"column":17,"offset":39311},"indent":[]}}],"position":{"start":{"line":692,"column":3,"offset":39297},"end":{"line":692,"column":17,"offset":39311},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(n)","position":{"start":{"line":692,"column":29,"offset":39323},"end":{"line":692,"column":33,"offset":39327},"indent":[]}}],"position":{"start":{"line":692,"column":29,"offset":39323},"end":{"line":692,"column":42,"offset":39336},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(n^2)","position":{"start":{"line":692,"column":54,"offset":39348},"end":{"line":692,"column":60,"offset":39354},"indent":[]}}],"position":{"start":{"line":692,"column":54,"offset":39348},"end":{"line":692,"column":70,"offset":39364},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(n^2)","position":{"start":{"line":692,"column":81,"offset":39375},"end":{"line":692,"column":87,"offset":39381},"indent":[]}}],"position":{"start":{"line":692,"column":81,"offset":39375},"end":{"line":692,"column":96,"offset":39390},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(1)","position":{"start":{"line":692,"column":105,"offset":39399},"end":{"line":692,"column":109,"offset":39403},"indent":[]}}],"position":{"start":{"line":692,"column":105,"offset":39399},"end":{"line":692,"column":115,"offset":39409},"indent":[]}}],"position":{"start":{"line":692,"column":1,"offset":39295},"end":{"line":692,"column":117,"offset":39411},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"selection sort","position":{"start":{"line":693,"column":3,"offset":39414},"end":{"line":693,"column":17,"offset":39428},"indent":[]}}],"position":{"start":{"line":693,"column":3,"offset":39414},"end":{"line":693,"column":17,"offset":39428},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(n^2)","position":{"start":{"line":693,"column":28,"offset":39439},"end":{"line":693,"column":34,"offset":39445},"indent":[]}}],"position":{"start":{"line":693,"column":28,"offset":39439},"end":{"line":693,"column":42,"offset":39453},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(n^2)","position":{"start":{"line":693,"column":54,"offset":39465},"end":{"line":693,"column":60,"offset":39471},"indent":[]}}],"position":{"start":{"line":693,"column":54,"offset":39465},"end":{"line":693,"column":70,"offset":39481},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(n^2)","position":{"start":{"line":693,"column":81,"offset":39492},"end":{"line":693,"column":87,"offset":39498},"indent":[]}}],"position":{"start":{"line":693,"column":81,"offset":39492},"end":{"line":693,"column":96,"offset":39507},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(1)","position":{"start":{"line":693,"column":105,"offset":39516},"end":{"line":693,"column":109,"offset":39520},"indent":[]}}],"position":{"start":{"line":693,"column":105,"offset":39516},"end":{"line":693,"column":115,"offset":39526},"indent":[]}}],"position":{"start":{"line":693,"column":1,"offset":39412},"end":{"line":693,"column":117,"offset":39528},"indent":[]}}],"position":{"start":{"line":689,"column":1,"offset":38944},"end":{"line":693,"column":117,"offset":39528},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Fancy","position":{"start":{"line":695,"column":4,"offset":39533},"end":{"line":695,"column":9,"offset":39538},"indent":[]}}],"position":{"start":{"line":695,"column":1,"offset":39530},"end":{"line":695,"column":9,"offset":39538},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"merge sort","position":{"start":{"line":697,"column":5,"offset":39544},"end":{"line":697,"column":15,"offset":39554},"indent":[]}}],"position":{"start":{"line":697,"column":1,"offset":39540},"end":{"line":697,"column":15,"offset":39554},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"O(n Log n)","position":{"start":{"line":699,"column":1,"offset":39556},"end":{"line":699,"column":11,"offset":39566},"indent":[]}}],"position":{"start":{"line":699,"column":1,"offset":39556},"end":{"line":699,"column":11,"offset":39566},"indent":[]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// merge two sorted array</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">arr1</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">arr2</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> arr1<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;</span> arr2<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> arr1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;</span> arr2<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">arr</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> middle <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> left <span class=\"token operator\">=</span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> middle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> right <span class=\"token operator\">=</span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>middle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":701,"column":1,"offset":39568},"end":{"line":740,"column":4,"offset":40385},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"quick sort","position":{"start":{"line":742,"column":5,"offset":40391},"end":{"line":742,"column":15,"offset":40401},"indent":[]}}],"position":{"start":{"line":742,"column":1,"offset":40387},"end":{"line":742,"column":15,"offset":40401},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"./assets/Quicksort.gif","alt":"quick sort","position":{"start":{"line":744,"column":1,"offset":40403},"end":{"line":744,"column":38,"offset":40440},"indent":[]}}],"position":{"start":{"line":744,"column":1,"offset":40403},"end":{"line":744,"column":38,"offset":40440},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"in following implementation we always assume ","position":{"start":{"line":746,"column":1,"offset":40442},"end":{"line":746,"column":46,"offset":40487},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"first item","position":{"start":{"line":746,"column":47,"offset":40488},"end":{"line":746,"column":57,"offset":40498},"indent":[]}}],"position":{"start":{"line":746,"column":46,"offset":40487},"end":{"line":746,"column":58,"offset":40499},"indent":[]}},{"type":"text","value":" as pivot","position":{"start":{"line":746,"column":58,"offset":40499},"end":{"line":746,"column":67,"offset":40508},"indent":[]}}],"position":{"start":{"line":746,"column":1,"offset":40442},"end":{"line":746,"column":67,"offset":40508},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"general: O(n Log n)\nsorted: O(n^2)","position":{"start":{"line":748,"column":1,"offset":40510},"end":{"line":749,"column":15,"offset":40544},"indent":[1]}}],"position":{"start":{"line":748,"column":1,"offset":40510},"end":{"line":749,"column":15,"offset":40544},"indent":[1]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// place pivot in the right index and return pivot index</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">pivot</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">arr</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> pivot <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> pivotIndex <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> start <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> pivot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            pivotIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>pivotIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>pivotIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>pivotIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>pivotIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">arr</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> pivot <span class=\"token operator\">=</span> <span class=\"token function\">pivot</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// left</span>\n        <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> pivotIndex <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// right</span>\n        <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> pivotIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":751,"column":1,"offset":40546},"end":{"line":778,"column":4,"offset":41287},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"radix sort","position":{"start":{"line":780,"column":5,"offset":41293},"end":{"line":780,"column":15,"offset":41303},"indent":[]}}],"position":{"start":{"line":780,"column":1,"offset":41289},"end":{"line":780,"column":15,"offset":41303},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"O(nk)\nn: the number of items we sorting\nk: average length of those numbers","position":{"start":{"line":782,"column":1,"offset":41305},"end":{"line":784,"column":35,"offset":41379},"indent":[1,1]}}],"position":{"start":{"line":782,"column":1,"offset":41305},"end":{"line":784,"column":35,"offset":41379},"indent":[1,1]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// get the actual number at the given index</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getDigit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">num</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">i</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// get number length</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">digitCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">num</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">log10</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// return number by most length</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">mostDigits</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">arr</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> maxDigits <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        maxDigits <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maxDigits<span class=\"token punctuation\">,</span> <span class=\"token function\">digitCount</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> maxDigits<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">radixSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">arr</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> maxDigitCount <span class=\"token operator\">=</span> <span class=\"token function\">mostDigits</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> maxDigitCount<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> digitBuckets <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            digitBuckets<span class=\"token punctuation\">[</span><span class=\"token function\">getDigit</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>digitBuckets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":786,"column":1,"offset":41381},"end":{"line":817,"column":4,"offset":42323},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"fancy sorting algorithms comparison","position":{"start":{"line":819,"column":5,"offset":42329},"end":{"line":819,"column":40,"offset":42364},"indent":[]}}],"position":{"start":{"line":819,"column":1,"offset":42325},"end":{"line":819,"column":40,"offset":42364},"indent":[]}},{"type":"table","align":["center","center","center","center","center"],"children":[{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Algorithm","position":{"start":{"line":821,"column":3,"offset":42368},"end":{"line":821,"column":12,"offset":42377},"indent":[]}}],"position":{"start":{"line":821,"column":3,"offset":42368},"end":{"line":821,"column":13,"offset":42378},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Time Complexity (Best)","position":{"start":{"line":821,"column":16,"offset":42381},"end":{"line":821,"column":38,"offset":42403},"indent":[]}}],"position":{"start":{"line":821,"column":16,"offset":42381},"end":{"line":821,"column":38,"offset":42403},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Time Complexity (Average)","position":{"start":{"line":821,"column":41,"offset":42406},"end":{"line":821,"column":66,"offset":42431},"indent":[]}}],"position":{"start":{"line":821,"column":41,"offset":42406},"end":{"line":821,"column":66,"offset":42431},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Time Complexity (worst)","position":{"start":{"line":821,"column":69,"offset":42434},"end":{"line":821,"column":92,"offset":42457},"indent":[]}}],"position":{"start":{"line":821,"column":69,"offset":42434},"end":{"line":821,"column":92,"offset":42457},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Space Complexity","position":{"start":{"line":821,"column":95,"offset":42460},"end":{"line":821,"column":111,"offset":42476},"indent":[]}}],"position":{"start":{"line":821,"column":95,"offset":42460},"end":{"line":821,"column":111,"offset":42476},"indent":[]}}],"position":{"start":{"line":821,"column":1,"offset":42366},"end":{"line":821,"column":113,"offset":42478},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"merge sort","position":{"start":{"line":823,"column":3,"offset":42594},"end":{"line":823,"column":13,"offset":42604},"indent":[]}}],"position":{"start":{"line":823,"column":3,"offset":42594},"end":{"line":823,"column":13,"offset":42604},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(n Log n)","position":{"start":{"line":823,"column":22,"offset":42613},"end":{"line":823,"column":32,"offset":42623},"indent":[]}}],"position":{"start":{"line":823,"column":22,"offset":42613},"end":{"line":823,"column":38,"offset":42629},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(n Log n)","position":{"start":{"line":823,"column":48,"offset":42639},"end":{"line":823,"column":58,"offset":42649},"indent":[]}}],"position":{"start":{"line":823,"column":48,"offset":42639},"end":{"line":823,"column":66,"offset":42657},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(n Log n)","position":{"start":{"line":823,"column":75,"offset":42666},"end":{"line":823,"column":85,"offset":42676},"indent":[]}}],"position":{"start":{"line":823,"column":75,"offset":42666},"end":{"line":823,"column":92,"offset":42683},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(n)","position":{"start":{"line":823,"column":101,"offset":42692},"end":{"line":823,"column":105,"offset":42696},"indent":[]}}],"position":{"start":{"line":823,"column":101,"offset":42692},"end":{"line":823,"column":111,"offset":42702},"indent":[]}}],"position":{"start":{"line":823,"column":1,"offset":42592},"end":{"line":823,"column":113,"offset":42704},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"quick sort","position":{"start":{"line":824,"column":3,"offset":42707},"end":{"line":824,"column":13,"offset":42717},"indent":[]}}],"position":{"start":{"line":824,"column":3,"offset":42707},"end":{"line":824,"column":13,"offset":42717},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(n Log n)","position":{"start":{"line":824,"column":22,"offset":42726},"end":{"line":824,"column":32,"offset":42736},"indent":[]}}],"position":{"start":{"line":824,"column":22,"offset":42726},"end":{"line":824,"column":38,"offset":42742},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(n Log n)","position":{"start":{"line":824,"column":48,"offset":42752},"end":{"line":824,"column":58,"offset":42762},"indent":[]}}],"position":{"start":{"line":824,"column":48,"offset":42752},"end":{"line":824,"column":66,"offset":42770},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(n^2)","position":{"start":{"line":824,"column":77,"offset":42781},"end":{"line":824,"column":83,"offset":42787},"indent":[]}}],"position":{"start":{"line":824,"column":77,"offset":42781},"end":{"line":824,"column":92,"offset":42796},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(Log n)","position":{"start":{"line":824,"column":99,"offset":42803},"end":{"line":824,"column":107,"offset":42811},"indent":[]}}],"position":{"start":{"line":824,"column":99,"offset":42803},"end":{"line":824,"column":111,"offset":42815},"indent":[]}}],"position":{"start":{"line":824,"column":1,"offset":42705},"end":{"line":824,"column":113,"offset":42817},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"radix sort","position":{"start":{"line":825,"column":3,"offset":42820},"end":{"line":825,"column":13,"offset":42830},"indent":[]}}],"position":{"start":{"line":825,"column":3,"offset":42820},"end":{"line":825,"column":13,"offset":42830},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(nk)","position":{"start":{"line":825,"column":24,"offset":42841},"end":{"line":825,"column":29,"offset":42846},"indent":[]}}],"position":{"start":{"line":825,"column":24,"offset":42841},"end":{"line":825,"column":38,"offset":42855},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(nk)","position":{"start":{"line":825,"column":51,"offset":42868},"end":{"line":825,"column":56,"offset":42873},"indent":[]}}],"position":{"start":{"line":825,"column":51,"offset":42868},"end":{"line":825,"column":66,"offset":42883},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(nk)","position":{"start":{"line":825,"column":78,"offset":42895},"end":{"line":825,"column":83,"offset":42900},"indent":[]}}],"position":{"start":{"line":825,"column":78,"offset":42895},"end":{"line":825,"column":92,"offset":42909},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(n + k)","position":{"start":{"line":825,"column":99,"offset":42916},"end":{"line":825,"column":107,"offset":42924},"indent":[]}}],"position":{"start":{"line":825,"column":99,"offset":42916},"end":{"line":825,"column":111,"offset":42928},"indent":[]}}],"position":{"start":{"line":825,"column":1,"offset":42818},"end":{"line":825,"column":113,"offset":42930},"indent":[]}}],"position":{"start":{"line":821,"column":1,"offset":42366},"end":{"line":825,"column":113,"offset":42930},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Data Structure","position":{"start":{"line":827,"column":4,"offset":42935},"end":{"line":827,"column":18,"offset":42949},"indent":[]}}],"position":{"start":{"line":827,"column":1,"offset":42932},"end":{"line":827,"column":18,"offset":42949},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"complexity comparison","position":{"start":{"line":829,"column":5,"offset":42955},"end":{"line":829,"column":26,"offset":42976},"indent":[]}}],"position":{"start":{"line":829,"column":1,"offset":42951},"end":{"line":829,"column":26,"offset":42976},"indent":[]}},{"type":"table","align":["center","center","center","center","center"],"children":[{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"DataStructure","position":{"start":{"line":831,"column":5,"offset":42982},"end":{"line":831,"column":18,"offset":42995},"indent":[]}}],"position":{"start":{"line":831,"column":5,"offset":42982},"end":{"line":831,"column":21,"offset":42998},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Insertion","position":{"start":{"line":831,"column":24,"offset":43001},"end":{"line":831,"column":33,"offset":43010},"indent":[]}}],"position":{"start":{"line":831,"column":24,"offset":43001},"end":{"line":831,"column":33,"offset":43010},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Removal","position":{"start":{"line":831,"column":60,"offset":43037},"end":{"line":831,"column":67,"offset":43044},"indent":[]}}],"position":{"start":{"line":831,"column":60,"offset":43037},"end":{"line":831,"column":92,"offset":43069},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Searching","position":{"start":{"line":831,"column":111,"offset":43088},"end":{"line":831,"column":120,"offset":43097},"indent":[]}}],"position":{"start":{"line":831,"column":111,"offset":43088},"end":{"line":831,"column":136,"offset":43113},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Access","position":{"start":{"line":831,"column":139,"offset":43116},"end":{"line":831,"column":145,"offset":43122},"indent":[]}}],"position":{"start":{"line":831,"column":139,"offset":43116},"end":{"line":831,"column":145,"offset":43122},"indent":[]}}],"position":{"start":{"line":831,"column":1,"offset":42978},"end":{"line":831,"column":147,"offset":43124},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Singly Linked List","position":{"start":{"line":833,"column":3,"offset":43274},"end":{"line":833,"column":21,"offset":43292},"indent":[]}}],"position":{"start":{"line":833,"column":3,"offset":43274},"end":{"line":833,"column":21,"offset":43292},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(1)","position":{"start":{"line":833,"column":26,"offset":43297},"end":{"line":833,"column":30,"offset":43301},"indent":[]}}],"position":{"start":{"line":833,"column":26,"offset":43297},"end":{"line":833,"column":33,"offset":43304},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"bestCase(very beginning): O(1) worstCase(very end): O(n)","position":{"start":{"line":833,"column":36,"offset":43307},"end":{"line":833,"column":92,"offset":43363},"indent":[]}}],"position":{"start":{"line":833,"column":36,"offset":43307},"end":{"line":833,"column":92,"offset":43363},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(n)","position":{"start":{"line":833,"column":113,"offset":43384},"end":{"line":833,"column":117,"offset":43388},"indent":[]}}],"position":{"start":{"line":833,"column":113,"offset":43384},"end":{"line":833,"column":136,"offset":43407},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(n)","position":{"start":{"line":833,"column":140,"offset":43411},"end":{"line":833,"column":144,"offset":43415},"indent":[]}}],"position":{"start":{"line":833,"column":140,"offset":43411},"end":{"line":833,"column":145,"offset":43416},"indent":[]}}],"position":{"start":{"line":833,"column":1,"offset":43272},"end":{"line":833,"column":147,"offset":43418},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Doubly Linked List","position":{"start":{"line":834,"column":3,"offset":43421},"end":{"line":834,"column":21,"offset":43439},"indent":[]}}],"position":{"start":{"line":834,"column":3,"offset":43421},"end":{"line":834,"column":21,"offset":43439},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(1)","position":{"start":{"line":834,"column":26,"offset":43444},"end":{"line":834,"column":30,"offset":43448},"indent":[]}}],"position":{"start":{"line":834,"column":26,"offset":43444},"end":{"line":834,"column":33,"offset":43451},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(1)","position":{"start":{"line":834,"column":62,"offset":43480},"end":{"line":834,"column":66,"offset":43484},"indent":[]}}],"position":{"start":{"line":834,"column":62,"offset":43480},"end":{"line":834,"column":92,"offset":43510},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(n) it is faster than Singly Linked List","position":{"start":{"line":834,"column":95,"offset":43513},"end":{"line":834,"column":136,"offset":43554},"indent":[]}}],"position":{"start":{"line":834,"column":95,"offset":43513},"end":{"line":834,"column":136,"offset":43554},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(n)","position":{"start":{"line":834,"column":140,"offset":43558},"end":{"line":834,"column":144,"offset":43562},"indent":[]}}],"position":{"start":{"line":834,"column":140,"offset":43558},"end":{"line":834,"column":145,"offset":43563},"indent":[]}}],"position":{"start":{"line":834,"column":1,"offset":43419},"end":{"line":834,"column":147,"offset":43565},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Stack","position":{"start":{"line":835,"column":9,"offset":43574},"end":{"line":835,"column":14,"offset":43579},"indent":[]}}],"position":{"start":{"line":835,"column":9,"offset":43574},"end":{"line":835,"column":21,"offset":43586},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(1)","position":{"start":{"line":835,"column":26,"offset":43591},"end":{"line":835,"column":30,"offset":43595},"indent":[]}}],"position":{"start":{"line":835,"column":26,"offset":43591},"end":{"line":835,"column":33,"offset":43598},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(1)","position":{"start":{"line":835,"column":62,"offset":43627},"end":{"line":835,"column":66,"offset":43631},"indent":[]}}],"position":{"start":{"line":835,"column":62,"offset":43627},"end":{"line":835,"column":92,"offset":43657},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(n)","position":{"start":{"line":835,"column":113,"offset":43678},"end":{"line":835,"column":117,"offset":43682},"indent":[]}}],"position":{"start":{"line":835,"column":113,"offset":43678},"end":{"line":835,"column":136,"offset":43701},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(n)","position":{"start":{"line":835,"column":140,"offset":43705},"end":{"line":835,"column":144,"offset":43709},"indent":[]}}],"position":{"start":{"line":835,"column":140,"offset":43705},"end":{"line":835,"column":145,"offset":43710},"indent":[]}}],"position":{"start":{"line":835,"column":1,"offset":43566},"end":{"line":835,"column":147,"offset":43712},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Queue","position":{"start":{"line":836,"column":9,"offset":43721},"end":{"line":836,"column":14,"offset":43726},"indent":[]}}],"position":{"start":{"line":836,"column":9,"offset":43721},"end":{"line":836,"column":21,"offset":43733},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(1)","position":{"start":{"line":836,"column":26,"offset":43738},"end":{"line":836,"column":30,"offset":43742},"indent":[]}}],"position":{"start":{"line":836,"column":26,"offset":43738},"end":{"line":836,"column":33,"offset":43745},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(1)","position":{"start":{"line":836,"column":62,"offset":43774},"end":{"line":836,"column":66,"offset":43778},"indent":[]}}],"position":{"start":{"line":836,"column":62,"offset":43774},"end":{"line":836,"column":92,"offset":43804},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(n)","position":{"start":{"line":836,"column":113,"offset":43825},"end":{"line":836,"column":117,"offset":43829},"indent":[]}}],"position":{"start":{"line":836,"column":113,"offset":43825},"end":{"line":836,"column":136,"offset":43848},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(n)","position":{"start":{"line":836,"column":140,"offset":43852},"end":{"line":836,"column":144,"offset":43856},"indent":[]}}],"position":{"start":{"line":836,"column":140,"offset":43852},"end":{"line":836,"column":145,"offset":43857},"indent":[]}}],"position":{"start":{"line":836,"column":1,"offset":43713},"end":{"line":836,"column":147,"offset":43859},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Binary Search Tree","position":{"start":{"line":837,"column":3,"offset":43862},"end":{"line":837,"column":21,"offset":43880},"indent":[]}}],"position":{"start":{"line":837,"column":3,"offset":43862},"end":{"line":837,"column":21,"offset":43880},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O( Log n)","position":{"start":{"line":837,"column":24,"offset":43883},"end":{"line":837,"column":33,"offset":43892},"indent":[]}}],"position":{"start":{"line":837,"column":24,"offset":43883},"end":{"line":837,"column":33,"offset":43892},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"-","position":{"start":{"line":837,"column":63,"offset":43922},"end":{"line":837,"column":64,"offset":43923},"indent":[]}}],"position":{"start":{"line":837,"column":63,"offset":43922},"end":{"line":837,"column":92,"offset":43951},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(Log n)","position":{"start":{"line":837,"column":111,"offset":43970},"end":{"line":837,"column":119,"offset":43978},"indent":[]}}],"position":{"start":{"line":837,"column":111,"offset":43970},"end":{"line":837,"column":136,"offset":43995},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"-","position":{"start":{"line":837,"column":141,"offset":44000},"end":{"line":837,"column":142,"offset":44001},"indent":[]}}],"position":{"start":{"line":837,"column":141,"offset":44000},"end":{"line":837,"column":145,"offset":44004},"indent":[]}}],"position":{"start":{"line":837,"column":1,"offset":43860},"end":{"line":837,"column":147,"offset":44006},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Binary Heap","position":{"start":{"line":838,"column":6,"offset":44012},"end":{"line":838,"column":17,"offset":44023},"indent":[]}}],"position":{"start":{"line":838,"column":6,"offset":44012},"end":{"line":838,"column":21,"offset":44027},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O( Log n)","position":{"start":{"line":838,"column":24,"offset":44030},"end":{"line":838,"column":33,"offset":44039},"indent":[]}}],"position":{"start":{"line":838,"column":24,"offset":44030},"end":{"line":838,"column":33,"offset":44039},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O( Log n)","position":{"start":{"line":838,"column":59,"offset":44065},"end":{"line":838,"column":68,"offset":44074},"indent":[]}}],"position":{"start":{"line":838,"column":59,"offset":44065},"end":{"line":838,"column":92,"offset":44098},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O( n )","position":{"start":{"line":838,"column":112,"offset":44118},"end":{"line":838,"column":118,"offset":44124},"indent":[]}}],"position":{"start":{"line":838,"column":112,"offset":44118},"end":{"line":838,"column":136,"offset":44142},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"-","position":{"start":{"line":838,"column":141,"offset":44147},"end":{"line":838,"column":142,"offset":44148},"indent":[]}}],"position":{"start":{"line":838,"column":141,"offset":44147},"end":{"line":838,"column":145,"offset":44151},"indent":[]}}],"position":{"start":{"line":838,"column":1,"offset":44007},"end":{"line":838,"column":147,"offset":44153},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Hash Tables","position":{"start":{"line":839,"column":6,"offset":44159},"end":{"line":839,"column":17,"offset":44170},"indent":[]}}],"position":{"start":{"line":839,"column":6,"offset":44159},"end":{"line":839,"column":21,"offset":44174},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O( 1 )","position":{"start":{"line":839,"column":25,"offset":44178},"end":{"line":839,"column":31,"offset":44184},"indent":[]}}],"position":{"start":{"line":839,"column":25,"offset":44178},"end":{"line":839,"column":33,"offset":44186},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O( 1 )","position":{"start":{"line":839,"column":61,"offset":44214},"end":{"line":839,"column":67,"offset":44220},"indent":[]}}],"position":{"start":{"line":839,"column":61,"offset":44214},"end":{"line":839,"column":92,"offset":44245},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"-","position":{"start":{"line":839,"column":115,"offset":44268},"end":{"line":839,"column":116,"offset":44269},"indent":[]}}],"position":{"start":{"line":839,"column":115,"offset":44268},"end":{"line":839,"column":136,"offset":44289},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O( 1 )","position":{"start":{"line":839,"column":139,"offset":44292},"end":{"line":839,"column":145,"offset":44298},"indent":[]}}],"position":{"start":{"line":839,"column":139,"offset":44292},"end":{"line":839,"column":145,"offset":44298},"indent":[]}}],"position":{"start":{"line":839,"column":1,"offset":44154},"end":{"line":839,"column":147,"offset":44300},"indent":[]}}],"position":{"start":{"line":831,"column":1,"offset":42978},"end":{"line":839,"column":147,"offset":44300},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Singly Linked list","position":{"start":{"line":841,"column":4,"offset":44305},"end":{"line":841,"column":22,"offset":44323},"indent":[]}}],"position":{"start":{"line":841,"column":1,"offset":44302},"end":{"line":841,"column":22,"offset":44323},"indent":[]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">_Node</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">public</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token literal-property property\">next</span><span class=\"token operator\">:</span> _Node <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SinglyLinkedList</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token literal-property property\">_length</span><span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token literal-property property\">head</span><span class=\"token operator\">:</span> _Node <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token literal-property property\">tail</span><span class=\"token operator\">:</span> _Node <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">get</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_length<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">get</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> _Node<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_length<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> currentNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> SinglyLinkedList <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">_Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_length <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> _Node <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">let</span> currentNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>currentNode<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_length <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> currentNode<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">&amp;&amp;</span> currentNode<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_length <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> currentNode<span class=\"token punctuation\">.</span>next <span class=\"token keyword\">as</span> _Node<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">unShift</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> SinglyLinkedList <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> currentHead <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">_Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentHead<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> currentHead<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_length <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> _Node <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">const</span> currentHead <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> currentHead<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_length <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentHead <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> currentHead<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> _Node <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> index <span class=\"token operator\">>=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_length<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">let</span> currentNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> index<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentNode <span class=\"token operator\">&amp;&amp;</span> currentNode<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> currentNode<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> _Node <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> SinglyLinkedList <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> index <span class=\"token operator\">>=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">unShift</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> prevNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">const</span> newNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">_Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                newNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> prevNode<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n                prevNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_length <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> prevNode<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> _Node <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> prevNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> currentNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevNode <span class=\"token operator\">&amp;&amp;</span> currentNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                prevNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_length <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> currentNode<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> SinglyLinkedList <span class=\"token operator\">|</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">let</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">let</span> <span class=\"token literal-property property\">next</span><span class=\"token operator\">:</span> _Node <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> <span class=\"token literal-property property\">prev</span><span class=\"token operator\">:</span> _Node <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n                node<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> prev<span class=\"token punctuation\">;</span>\n                prev <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n                node <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":843,"column":1,"offset":44325},"end":{"line":1009,"column":4,"offset":48566},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Doubly Linked List","position":{"start":{"line":1011,"column":4,"offset":48571},"end":{"line":1011,"column":22,"offset":48589},"indent":[]}}],"position":{"start":{"line":1011,"column":1,"offset":48568},"end":{"line":1011,"column":22,"offset":48589},"indent":[]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">_Node</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token literal-property property\">next</span><span class=\"token operator\">:</span> _Node <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token literal-property property\">prev</span><span class=\"token operator\">:</span> _Node <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">public</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DoublyLinkedList</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token literal-property property\">head</span><span class=\"token operator\">:</span> _Node <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token literal-property property\">tail</span><span class=\"token operator\">:</span> _Node <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> _length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">get</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_length<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">get</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> _Node<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_length<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> currentNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> DoublyLinkedList <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">_Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n            node<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_length <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> _Node <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">const</span> currentTail <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentTail<span class=\"token punctuation\">.</span>prev<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> currentTail<span class=\"token punctuation\">.</span>prev<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            currentTail<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_length <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> currentTail<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> _Node <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">const</span> currentHead <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentHead<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> currentHead<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            currentHead<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_length <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> currentHead<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> DoublyLinkedList <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">_Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> currentHead <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> currentHead<span class=\"token punctuation\">;</span>\n        currentHead<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_length <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> _Node <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> index <span class=\"token operator\">>=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_length<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">let</span> <span class=\"token literal-property property\">currentNode</span><span class=\"token operator\">:</span> _Node <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// iterate from head to tail</span>\n\n            currentNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> index<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentNode <span class=\"token operator\">&amp;&amp;</span> currentNode<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// iterate from tail to head</span>\n\n            currentNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> index<span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentNode <span class=\"token operator\">&amp;&amp;</span> currentNode<span class=\"token punctuation\">.</span>prev<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span>prev<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">return</span> currentNode<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> currentNode<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> _Node <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> DoublyLinkedList <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> index <span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> prevNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> nextNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevNode <span class=\"token operator\">&amp;&amp;</span> nextNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">const</span> newNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">_Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                prevNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">(</span>newNode<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> prevNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>newNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> nextNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                nextNode<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_length <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> DoublyLinkedList <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> index <span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">&amp;&amp;</span> node<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">&amp;&amp;</span> node<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>prev<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>prev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_length <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":1013,"column":1,"offset":48591},"end":{"line":1190,"column":4,"offset":53097},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Stacks","position":{"start":{"line":1192,"column":4,"offset":53102},"end":{"line":1192,"column":10,"offset":53108},"indent":[]}}],"position":{"start":{"line":1192,"column":1,"offset":53099},"end":{"line":1192,"column":10,"offset":53108},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"LIFO\nlast in first out","position":{"start":{"line":1194,"column":1,"offset":53110},"end":{"line":1195,"column":18,"offset":53132},"indent":[1]}}],"position":{"start":{"line":1194,"column":1,"offset":53110},"end":{"line":1195,"column":18,"offset":53132},"indent":[1]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// implement stack using array</span>\n<span class=\"token keyword\">const</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nstack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1,2,3,4]</span>\nstack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1,2,3]</span>\n<span class=\"token comment\">// stacks just have push and pop</span>\nstack<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [0,1,2,3]</span>\nstack<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1,2,3]</span></code></pre></div>","position":{"start":{"line":1197,"column":1,"offset":53134},"end":{"line":1205,"column":4,"offset":53349},"indent":[1,1,1,1,1,1,1,1]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// implementing stack using singly linked list</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">_Node</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token literal-property property\">next</span><span class=\"token operator\">:</span> _Node <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">public</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Stack</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token literal-property property\">first</span><span class=\"token operator\">:</span> _Node <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token literal-property property\">last</span><span class=\"token operator\">:</span> _Node <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> _length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">get</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_length<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Stack <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">_Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> currentFirst <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>first <span class=\"token operator\">=</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> currentFirst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>currentFirst<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>last <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_length <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> _Node <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> currentFirst <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentFirst<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>first <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>last<span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>last <span class=\"token operator\">=</span> currentFirst<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>first <span class=\"token operator\">=</span> currentFirst<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_length <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> currentFirst<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":1207,"column":1,"offset":53351},"end":{"line":1248,"column":4,"offset":54281},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Queue","position":{"start":{"line":1250,"column":4,"offset":54286},"end":{"line":1250,"column":9,"offset":54291},"indent":[]}}],"position":{"start":{"line":1250,"column":1,"offset":54283},"end":{"line":1250,"column":9,"offset":54291},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"FIFO\nfirst in first out","position":{"start":{"line":1252,"column":1,"offset":54293},"end":{"line":1253,"column":19,"offset":54316},"indent":[1]}}],"position":{"start":{"line":1252,"column":1,"offset":54293},"end":{"line":1253,"column":19,"offset":54316},"indent":[1]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// implementing queue using array</span>\n<span class=\"token keyword\">const</span> q <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nq<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// out first items first</span>\n<span class=\"token comment\">// or</span>\nq<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nq<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nq<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// out first items first</span></code></pre></div>","position":{"start":{"line":1255,"column":1,"offset":54318},"end":{"line":1265,"column":4,"offset":54506},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// implementing queue using singly linked list</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">_Node</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token literal-property property\">next</span><span class=\"token operator\">:</span> _Node <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">public</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Queue</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token literal-property property\">first</span><span class=\"token operator\">:</span> _Node <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token literal-property property\">last</span><span class=\"token operator\">:</span> _Node <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> _length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">get</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_length<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Queue <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">_Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>last<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>first <span class=\"token operator\">=</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>last <span class=\"token operator\">=</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>last<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>last <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_length <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> _Node <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> currentFirst <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentFirst<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>first <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>last<span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>last <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>first <span class=\"token operator\">=</span> currentFirst<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_length <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> currentFirst<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":1267,"column":1,"offset":54508},"end":{"line":1308,"column":4,"offset":55429},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Tree","position":{"start":{"line":1310,"column":4,"offset":55434},"end":{"line":1310,"column":8,"offset":55438},"indent":[]}}],"position":{"start":{"line":1310,"column":1,"offset":55431},"end":{"line":1310,"column":8,"offset":55438},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"terminology","position":{"start":{"line":1312,"column":5,"offset":55444},"end":{"line":1312,"column":16,"offset":55455},"indent":[]}}],"position":{"start":{"line":1312,"column":1,"offset":55440},"end":{"line":1312,"column":16,"offset":55455},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"root : top node of tree","position":{"start":{"line":1314,"column":5,"offset":55461},"end":{"line":1314,"column":28,"offset":55484},"indent":[]}}],"position":{"start":{"line":1314,"column":5,"offset":55461},"end":{"line":1314,"column":28,"offset":55484},"indent":[]}}],"position":{"start":{"line":1314,"column":1,"offset":55457},"end":{"line":1314,"column":28,"offset":55484},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"child : a node directly connected to another node when moving away from root","position":{"start":{"line":1315,"column":5,"offset":55489},"end":{"line":1315,"column":81,"offset":55565},"indent":[]}}],"position":{"start":{"line":1315,"column":5,"offset":55489},"end":{"line":1315,"column":81,"offset":55565},"indent":[]}}],"position":{"start":{"line":1315,"column":1,"offset":55485},"end":{"line":1315,"column":81,"offset":55565},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"parent : the converse notion of a child","position":{"start":{"line":1316,"column":5,"offset":55570},"end":{"line":1316,"column":44,"offset":55609},"indent":[]}}],"position":{"start":{"line":1316,"column":5,"offset":55570},"end":{"line":1316,"column":44,"offset":55609},"indent":[]}}],"position":{"start":{"line":1316,"column":1,"offset":55566},"end":{"line":1316,"column":44,"offset":55609},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"sibling : a group of nodes with the same parent","position":{"start":{"line":1317,"column":5,"offset":55614},"end":{"line":1317,"column":52,"offset":55661},"indent":[]}}],"position":{"start":{"line":1317,"column":5,"offset":55614},"end":{"line":1317,"column":52,"offset":55661},"indent":[]}}],"position":{"start":{"line":1317,"column":1,"offset":55610},"end":{"line":1317,"column":52,"offset":55661},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"leaf : a child with no children","position":{"start":{"line":1318,"column":5,"offset":55666},"end":{"line":1318,"column":36,"offset":55697},"indent":[]}}],"position":{"start":{"line":1318,"column":5,"offset":55666},"end":{"line":1318,"column":36,"offset":55697},"indent":[]}}],"position":{"start":{"line":1318,"column":1,"offset":55662},"end":{"line":1318,"column":36,"offset":55697},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"edge : connection from two node","position":{"start":{"line":1319,"column":5,"offset":55702},"end":{"line":1319,"column":36,"offset":55733},"indent":[]}}],"position":{"start":{"line":1319,"column":5,"offset":55702},"end":{"line":1319,"column":36,"offset":55733},"indent":[]}}],"position":{"start":{"line":1319,"column":1,"offset":55698},"end":{"line":1319,"column":36,"offset":55733},"indent":[]}}],"position":{"start":{"line":1314,"column":1,"offset":55457},"end":{"line":1319,"column":36,"offset":55733},"indent":[1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"binary search tree","position":{"start":{"line":1321,"column":5,"offset":55739},"end":{"line":1321,"column":23,"offset":55757},"indent":[]}}],"position":{"start":{"line":1321,"column":1,"offset":55735},"end":{"line":1321,"column":23,"offset":55757},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"every parent node has at most ","position":{"start":{"line":1323,"column":5,"offset":55763},"end":{"line":1323,"column":35,"offset":55793},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"two","position":{"start":{"line":1323,"column":37,"offset":55795},"end":{"line":1323,"column":40,"offset":55798},"indent":[]}}],"position":{"start":{"line":1323,"column":35,"offset":55793},"end":{"line":1323,"column":42,"offset":55800},"indent":[]}},{"type":"text","value":" children","position":{"start":{"line":1323,"column":42,"offset":55800},"end":{"line":1323,"column":51,"offset":55809},"indent":[]}}],"position":{"start":{"line":1323,"column":5,"offset":55763},"end":{"line":1323,"column":51,"offset":55809},"indent":[]}}],"position":{"start":{"line":1323,"column":1,"offset":55759},"end":{"line":1323,"column":51,"offset":55809},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"every node to the ","position":{"start":{"line":1324,"column":5,"offset":55814},"end":{"line":1324,"column":23,"offset":55832},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"left","position":{"start":{"line":1324,"column":25,"offset":55834},"end":{"line":1324,"column":29,"offset":55838},"indent":[]}}],"position":{"start":{"line":1324,"column":23,"offset":55832},"end":{"line":1324,"column":31,"offset":55840},"indent":[]}},{"type":"text","value":" of parent node is always ","position":{"start":{"line":1324,"column":31,"offset":55840},"end":{"line":1324,"column":57,"offset":55866},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"less","position":{"start":{"line":1324,"column":59,"offset":55868},"end":{"line":1324,"column":63,"offset":55872},"indent":[]}}],"position":{"start":{"line":1324,"column":57,"offset":55866},"end":{"line":1324,"column":65,"offset":55874},"indent":[]}},{"type":"text","value":" than the ","position":{"start":{"line":1324,"column":65,"offset":55874},"end":{"line":1324,"column":75,"offset":55884},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"parent","position":{"start":{"line":1324,"column":77,"offset":55886},"end":{"line":1324,"column":83,"offset":55892},"indent":[]}}],"position":{"start":{"line":1324,"column":75,"offset":55884},"end":{"line":1324,"column":85,"offset":55894},"indent":[]}}],"position":{"start":{"line":1324,"column":5,"offset":55814},"end":{"line":1324,"column":85,"offset":55894},"indent":[]}}],"position":{"start":{"line":1324,"column":1,"offset":55810},"end":{"line":1324,"column":85,"offset":55894},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"every node to the ","position":{"start":{"line":1325,"column":5,"offset":55899},"end":{"line":1325,"column":23,"offset":55917},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"right","position":{"start":{"line":1325,"column":25,"offset":55919},"end":{"line":1325,"column":30,"offset":55924},"indent":[]}}],"position":{"start":{"line":1325,"column":23,"offset":55917},"end":{"line":1325,"column":32,"offset":55926},"indent":[]}},{"type":"text","value":" of parent node is always ","position":{"start":{"line":1325,"column":32,"offset":55926},"end":{"line":1325,"column":58,"offset":55952},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"greater","position":{"start":{"line":1325,"column":60,"offset":55954},"end":{"line":1325,"column":67,"offset":55961},"indent":[]}}],"position":{"start":{"line":1325,"column":58,"offset":55952},"end":{"line":1325,"column":69,"offset":55963},"indent":[]}},{"type":"text","value":" than the ","position":{"start":{"line":1325,"column":69,"offset":55963},"end":{"line":1325,"column":79,"offset":55973},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"parent","position":{"start":{"line":1325,"column":81,"offset":55975},"end":{"line":1325,"column":87,"offset":55981},"indent":[]}}],"position":{"start":{"line":1325,"column":79,"offset":55973},"end":{"line":1325,"column":89,"offset":55983},"indent":[]}}],"position":{"start":{"line":1325,"column":5,"offset":55899},"end":{"line":1325,"column":89,"offset":55983},"indent":[]}}],"position":{"start":{"line":1325,"column":1,"offset":55895},"end":{"line":1325,"column":89,"offset":55983},"indent":[]}}],"position":{"start":{"line":1323,"column":1,"offset":55759},"end":{"line":1325,"column":89,"offset":55983},"indent":[1,1]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">_Node</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">public</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token literal-property property\">left</span><span class=\"token operator\">:</span> _Node <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token literal-property property\">right</span><span class=\"token operator\">:</span> _Node <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BinarySearchTree</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token literal-property property\">root</span><span class=\"token operator\">:</span> _Node <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> BinarySearchTree <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">_Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> <span class=\"token literal-property property\">currentNode</span><span class=\"token operator\">:</span> _Node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">===</span> currentNode<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> currentNode<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                        currentNode<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                        currentNode<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">have</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> boolean <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> currentNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">===</span> currentNode<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> currentNode<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":1327,"column":1,"offset":55985},"end":{"line":1390,"column":4,"offset":57851},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"tree traversal","position":{"start":{"line":1392,"column":5,"offset":57857},"end":{"line":1392,"column":19,"offset":57871},"indent":[]}}],"position":{"start":{"line":1392,"column":1,"offset":57853},"end":{"line":1392,"column":19,"offset":57871},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"there is two main strategies to traversal a tree : ","position":{"start":{"line":1394,"column":1,"offset":57873},"end":{"line":1394,"column":52,"offset":57924},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Breadth-first-search","position":{"start":{"line":1394,"column":54,"offset":57926},"end":{"line":1394,"column":74,"offset":57946},"indent":[]}}],"position":{"start":{"line":1394,"column":52,"offset":57924},"end":{"line":1394,"column":76,"offset":57948},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":1394,"column":76,"offset":57948},"end":{"line":1394,"column":81,"offset":57953},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Depth-first-search","position":{"start":{"line":1394,"column":83,"offset":57955},"end":{"line":1394,"column":101,"offset":57973},"indent":[]}}],"position":{"start":{"line":1394,"column":81,"offset":57953},"end":{"line":1394,"column":103,"offset":57975},"indent":[]}}],"position":{"start":{"line":1394,"column":1,"offset":57873},"end":{"line":1394,"column":103,"offset":57975},"indent":[]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">_Node</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">public</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token literal-property property\">left</span><span class=\"token operator\">:</span> _Node <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token literal-property property\">right</span><span class=\"token operator\">:</span> _Node <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BinarySearchTree</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token literal-property property\">root</span><span class=\"token operator\">:</span> _Node <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> BinarySearchTree <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">_Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> <span class=\"token literal-property property\">currentNode</span><span class=\"token operator\">:</span> _Node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">===</span> currentNode<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> currentNode<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                        currentNode<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                        currentNode<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">have</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> boolean <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> currentNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">===</span> currentNode<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> currentNode<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/*\n    breadth first search (bfs) : traverse tree horizontally\n*/</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> _Node<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">visited</span><span class=\"token operator\">:</span> _Node<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">q</span><span class=\"token operator\">:</span> _Node<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                visited<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> visited<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/*\n    depth first search (dfs) : traverse tree vertically\n    following contains three dfs searching methods:\n    1. preOrder : add node => going to left and add left => going to right and add right\n    2. postOrder : going to left and add left => going to right and add right => going to node and add node\n    3. inOrder : going to the left and add left => add node => going to the right and add right\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">dfsPreOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> _Node<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">visited</span><span class=\"token operator\">:</span> _Node<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">node</span><span class=\"token operator\">:</span> _Node</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n                visited<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> visited<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">dfsPostOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> _Node<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">visited</span><span class=\"token operator\">:</span> _Node<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">node</span><span class=\"token operator\">:</span> _Node</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                visited<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> visited<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">dfsInOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> _Node<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">visited</span><span class=\"token operator\">:</span> _Node<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">node</span><span class=\"token operator\">:</span> _Node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                visited<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                f<span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> visited<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":1396,"column":1,"offset":57977},"end":{"line":1537,"column":4,"offset":61997},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"traversal comparison","position":{"start":{"line":1539,"column":5,"offset":62003},"end":{"line":1539,"column":25,"offset":62023},"indent":[]}}],"position":{"start":{"line":1539,"column":1,"offset":61999},"end":{"line":1539,"column":25,"offset":62023},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"depth-first","position":{"start":{"line":1541,"column":3,"offset":62027},"end":{"line":1541,"column":14,"offset":62038},"indent":[]}}],"position":{"start":{"line":1541,"column":1,"offset":62025},"end":{"line":1541,"column":16,"offset":62040},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":1541,"column":16,"offset":62040},"end":{"line":1541,"column":17,"offset":62041},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"vs","position":{"start":{"line":1541,"column":18,"offset":62042},"end":{"line":1541,"column":20,"offset":62044},"indent":[]}}],"position":{"start":{"line":1541,"column":17,"offset":62041},"end":{"line":1541,"column":21,"offset":62045},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":1541,"column":21,"offset":62045},"end":{"line":1541,"column":22,"offset":62046},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"breadth-first","position":{"start":{"line":1541,"column":24,"offset":62048},"end":{"line":1541,"column":37,"offset":62061},"indent":[]}}],"position":{"start":{"line":1541,"column":22,"offset":62046},"end":{"line":1541,"column":39,"offset":62063},"indent":[]}},{"type":"text","value":" : they both ","position":{"start":{"line":1541,"column":39,"offset":62063},"end":{"line":1541,"column":52,"offset":62076},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"timeComplexity is same","position":{"start":{"line":1541,"column":54,"offset":62078},"end":{"line":1541,"column":76,"offset":62100},"indent":[]}}],"position":{"start":{"line":1541,"column":52,"offset":62076},"end":{"line":1541,"column":78,"offset":62102},"indent":[]}},{"type":"text","value":" but ","position":{"start":{"line":1541,"column":78,"offset":62102},"end":{"line":1541,"column":83,"offset":62107},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"spaceComplexity is different","position":{"start":{"line":1541,"column":85,"offset":62109},"end":{"line":1541,"column":113,"offset":62137},"indent":[]}}],"position":{"start":{"line":1541,"column":83,"offset":62107},"end":{"line":1541,"column":115,"offset":62139},"indent":[]}},{"type":"text","value":" if we got ","position":{"start":{"line":1541,"column":115,"offset":62139},"end":{"line":1541,"column":126,"offset":62150},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"a wide tree","position":{"start":{"line":1541,"column":128,"offset":62152},"end":{"line":1541,"column":139,"offset":62163},"indent":[]}}],"position":{"start":{"line":1541,"column":126,"offset":62150},"end":{"line":1541,"column":141,"offset":62165},"indent":[]}},{"type":"text","value":" like this:","position":{"start":{"line":1541,"column":141,"offset":62165},"end":{"line":1541,"column":152,"offset":62176},"indent":[]}}],"position":{"start":{"line":1541,"column":1,"offset":62025},"end":{"line":1541,"column":152,"offset":62176},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"./assets/Z20M5iE.png","alt":null,"position":{"start":{"line":1543,"column":1,"offset":62178},"end":{"line":1543,"column":26,"offset":62203},"indent":[]}}],"position":{"start":{"line":1543,"column":1,"offset":62178},"end":{"line":1543,"column":26,"offset":62203},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"breadth-first take up more space.","position":{"start":{"line":1545,"column":3,"offset":62207},"end":{"line":1545,"column":36,"offset":62240},"indent":[]}}],"position":{"start":{"line":1545,"column":1,"offset":62205},"end":{"line":1545,"column":38,"offset":62242},"indent":[]}},{"type":"text","value":" cuz we adding more element to queue.","position":{"start":{"line":1545,"column":38,"offset":62242},"end":{"line":1545,"column":75,"offset":62279},"indent":[]}}],"position":{"start":{"line":1545,"column":1,"offset":62205},"end":{"line":1545,"column":75,"offset":62279},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"if we got ","position":{"start":{"line":1547,"column":1,"offset":62281},"end":{"line":1547,"column":11,"offset":62291},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"a depth long tree","position":{"start":{"line":1547,"column":13,"offset":62293},"end":{"line":1547,"column":30,"offset":62310},"indent":[]}}],"position":{"start":{"line":1547,"column":11,"offset":62291},"end":{"line":1547,"column":32,"offset":62312},"indent":[]}},{"type":"text","value":" like this:","position":{"start":{"line":1547,"column":32,"offset":62312},"end":{"line":1547,"column":43,"offset":62323},"indent":[]}}],"position":{"start":{"line":1547,"column":1,"offset":62281},"end":{"line":1547,"column":43,"offset":62323},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"depth-first take up more space.","position":{"start":{"line":1549,"column":3,"offset":62327},"end":{"line":1549,"column":34,"offset":62358},"indent":[]}}],"position":{"start":{"line":1549,"column":1,"offset":62325},"end":{"line":1549,"column":36,"offset":62360},"indent":[]}}],"position":{"start":{"line":1549,"column":1,"offset":62325},"end":{"line":1549,"column":36,"offset":62360},"indent":[]}},{"type":"html","value":"<hr/>","position":{"start":{"line":1551,"column":1,"offset":62362},"end":{"line":1551,"column":6,"offset":62367},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"potentially use cases for dfs variants (","position":{"start":{"line":1553,"column":3,"offset":62371},"end":{"line":1553,"column":43,"offset":62411},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"preOder postOrder inOrder","position":{"start":{"line":1553,"column":44,"offset":62412},"end":{"line":1553,"column":69,"offset":62437},"indent":[]}}],"position":{"start":{"line":1553,"column":43,"offset":62411},"end":{"line":1553,"column":70,"offset":62438},"indent":[]}},{"type":"text","value":")","position":{"start":{"line":1553,"column":70,"offset":62438},"end":{"line":1553,"column":71,"offset":62439},"indent":[]}}],"position":{"start":{"line":1553,"column":1,"offset":62369},"end":{"line":1553,"column":73,"offset":62441},"indent":[]}},{"type":"text","value":"\npreOrder is useful when we want a clone of tree.\ninOrder is useful when we want data in order that it's stored in tree.","position":{"start":{"line":1553,"column":73,"offset":62441},"end":{"line":1555,"column":71,"offset":62561},"indent":[1,1]}}],"position":{"start":{"line":1553,"column":1,"offset":62369},"end":{"line":1555,"column":71,"offset":62561},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Binary heaps","position":{"start":{"line":1557,"column":4,"offset":62566},"end":{"line":1557,"column":16,"offset":62578},"indent":[]}}],"position":{"start":{"line":1557,"column":1,"offset":62563},"end":{"line":1557,"column":16,"offset":62578},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"terminology","position":{"start":{"line":1559,"column":5,"offset":62584},"end":{"line":1559,"column":16,"offset":62595},"indent":[]}}],"position":{"start":{"line":1559,"column":1,"offset":62580},"end":{"line":1559,"column":16,"offset":62595},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"a binary heap is as compact as possible (all the children of each node are as full as they can be and left children and filled out first)","position":{"start":{"line":1561,"column":5,"offset":62601},"end":{"line":1561,"column":142,"offset":62738},"indent":[]}}],"position":{"start":{"line":1561,"column":5,"offset":62601},"end":{"line":1561,"column":142,"offset":62738},"indent":[]}}],"position":{"start":{"line":1561,"column":1,"offset":62597},"end":{"line":1561,"column":142,"offset":62738},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"each parent has at most two children","position":{"start":{"line":1562,"column":5,"offset":62743},"end":{"line":1562,"column":41,"offset":62779},"indent":[]}}],"position":{"start":{"line":1562,"column":5,"offset":62743},"end":{"line":1562,"column":41,"offset":62779},"indent":[]}}],"position":{"start":{"line":1562,"column":1,"offset":62739},"end":{"line":1562,"column":41,"offset":62779},"indent":[]}}],"position":{"start":{"line":1561,"column":1,"offset":62597},"end":{"line":1562,"column":41,"offset":62779},"indent":[1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Max Binary Heap","position":{"start":{"line":1564,"column":3,"offset":62783},"end":{"line":1564,"column":18,"offset":62798},"indent":[]}}],"position":{"start":{"line":1564,"column":1,"offset":62781},"end":{"line":1564,"column":20,"offset":62800},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":1564,"column":20,"offset":62800},"end":{"line":1564,"column":21,"offset":62801},"indent":[]}}],"position":{"start":{"line":1564,"column":1,"offset":62781},"end":{"line":1564,"column":21,"offset":62801},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"parent","position":{"start":{"line":1566,"column":7,"offset":62809},"end":{"line":1566,"column":13,"offset":62815},"indent":[]}}],"position":{"start":{"line":1566,"column":5,"offset":62807},"end":{"line":1566,"column":15,"offset":62817},"indent":[]}},{"type":"text","value":" nodes are always greater than ","position":{"start":{"line":1566,"column":15,"offset":62817},"end":{"line":1566,"column":46,"offset":62848},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"child","position":{"start":{"line":1566,"column":48,"offset":62850},"end":{"line":1566,"column":53,"offset":62855},"indent":[]}}],"position":{"start":{"line":1566,"column":46,"offset":62848},"end":{"line":1566,"column":55,"offset":62857},"indent":[]}},{"type":"text","value":" nodes but there is no guarantees between sibling","position":{"start":{"line":1566,"column":55,"offset":62857},"end":{"line":1566,"column":104,"offset":62906},"indent":[]}}],"position":{"start":{"line":1566,"column":5,"offset":62807},"end":{"line":1566,"column":104,"offset":62906},"indent":[]}}],"position":{"start":{"line":1566,"column":1,"offset":62803},"end":{"line":1566,"column":104,"offset":62906},"indent":[]}}],"position":{"start":{"line":1566,"column":1,"offset":62803},"end":{"line":1566,"column":104,"offset":62906},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Min Binary Heap","position":{"start":{"line":1568,"column":3,"offset":62910},"end":{"line":1568,"column":18,"offset":62925},"indent":[]}}],"position":{"start":{"line":1568,"column":1,"offset":62908},"end":{"line":1568,"column":20,"offset":62927},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":1568,"column":20,"offset":62927},"end":{"line":1568,"column":21,"offset":62928},"indent":[]}}],"position":{"start":{"line":1568,"column":1,"offset":62908},"end":{"line":1568,"column":21,"offset":62928},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"child","position":{"start":{"line":1570,"column":7,"offset":62936},"end":{"line":1570,"column":12,"offset":62941},"indent":[]}}],"position":{"start":{"line":1570,"column":5,"offset":62934},"end":{"line":1570,"column":14,"offset":62943},"indent":[]}},{"type":"text","value":" nodes are always greater than ","position":{"start":{"line":1570,"column":14,"offset":62943},"end":{"line":1570,"column":45,"offset":62974},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"parent","position":{"start":{"line":1570,"column":47,"offset":62976},"end":{"line":1570,"column":53,"offset":62982},"indent":[]}}],"position":{"start":{"line":1570,"column":45,"offset":62974},"end":{"line":1570,"column":55,"offset":62984},"indent":[]}},{"type":"text","value":" nodes but there is no guarantees between sibling","position":{"start":{"line":1570,"column":55,"offset":62984},"end":{"line":1570,"column":104,"offset":63033},"indent":[]}}],"position":{"start":{"line":1570,"column":5,"offset":62934},"end":{"line":1570,"column":104,"offset":63033},"indent":[]}}],"position":{"start":{"line":1570,"column":1,"offset":62930},"end":{"line":1570,"column":104,"offset":63033},"indent":[]}}],"position":{"start":{"line":1570,"column":1,"offset":62930},"end":{"line":1570,"column":104,"offset":63033},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"binary heap parent and child relations","position":{"start":{"line":1572,"column":5,"offset":63039},"end":{"line":1572,"column":43,"offset":63077},"indent":[]}}],"position":{"start":{"line":1572,"column":1,"offset":63035},"end":{"line":1572,"column":43,"offset":63077},"indent":[]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MaxBinaryHeap</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token literal-property property\">_values</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">get</span> <span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token function\">sinkingUp</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> valueIndex <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>valueIndex <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> parentIndex <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>valueIndex <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> parent <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>parentIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;=</span> parent<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>parentIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>valueIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n\n            valueIndex <span class=\"token operator\">=</span> parentIndex<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">private</span> <span class=\"token function\">sinkingDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> targetIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> leftChildIndex <span class=\"token operator\">=</span> targetIndex <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                rightChildIndex <span class=\"token operator\">=</span> targetIndex <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">let</span> target <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>targetIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                leftChild <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>leftChildIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                rightChild <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>rightChildIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">&lt;</span> leftChild <span class=\"token operator\">&amp;&amp;</span> target <span class=\"token operator\">&lt;</span> rightChild<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rightChild <span class=\"token operator\">></span> leftChild<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token punctuation\">[</span>\n                        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>targetIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>rightChildIndex<span class=\"token punctuation\">]</span>\n                    <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n                        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>rightChildIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>targetIndex<span class=\"token punctuation\">]</span>\n                    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n                    targetIndex <span class=\"token operator\">=</span> rightChildIndex<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token punctuation\">[</span>\n                        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>targetIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>leftChildIndex<span class=\"token punctuation\">]</span>\n                    <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n                        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>leftChildIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>targetIndex<span class=\"token punctuation\">]</span>\n                    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n                    targetIndex <span class=\"token operator\">=</span> leftChildIndex<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rightChild <span class=\"token operator\">>=</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>targetIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>rightChildIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>rightChildIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>targetIndex<span class=\"token punctuation\">]</span>\n                <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n                targetIndex <span class=\"token operator\">=</span> leftChildIndex<span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftChild <span class=\"token operator\">>=</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>targetIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>leftChildIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>leftChildIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>targetIndex<span class=\"token punctuation\">]</span>\n                <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n                targetIndex <span class=\"token operator\">=</span> leftChildIndex<span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">sinkingUp</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">extractMax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">sinkingDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":1574,"column":1,"offset":63079},"end":{"line":1671,"column":4,"offset":65992},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Priority Queue","position":{"start":{"line":1673,"column":4,"offset":65997},"end":{"line":1673,"column":18,"offset":66011},"indent":[]}}],"position":{"start":{"line":1673,"column":1,"offset":65994},"end":{"line":1673,"column":18,"offset":66011},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A data structure which every element has a priority.\nElements with higher priorities are served before elements with lower priorities.","position":{"start":{"line":1675,"column":1,"offset":66013},"end":{"line":1676,"column":82,"offset":66147},"indent":[1]}}],"position":{"start":{"line":1675,"column":1,"offset":66013},"end":{"line":1676,"column":82,"offset":66147},"indent":[1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"In the following example, we implemented a priority queue using minBinaryHeap but you should know binaryHeaps and priority queue is two different concepts and we just use an abstract of it","position":{"start":{"line":1678,"column":3,"offset":66151},"end":{"line":1678,"column":191,"offset":66339},"indent":[]}}],"position":{"start":{"line":1678,"column":1,"offset":66149},"end":{"line":1678,"column":193,"offset":66341},"indent":[]}}],"position":{"start":{"line":1678,"column":1,"offset":66149},"end":{"line":1678,"column":193,"offset":66341},"indent":[]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">INode</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">;</span>\n    <span class=\"token literal-property property\">priority</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">_Node</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">INode</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">public</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token literal-property property\">priority</span><span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PriorityQueue</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token literal-property property\">_values</span><span class=\"token operator\">:</span> INode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">get</span> <span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> INode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token function\">sinkingUp</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span> INode<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> valueIndex <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>valueIndex <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> parentIndex <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>valueIndex <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> parent <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>parentIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>priority <span class=\"token operator\">>=</span> parent<span class=\"token punctuation\">.</span>priority<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>parentIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>valueIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n\n            valueIndex <span class=\"token operator\">=</span> parentIndex<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">private</span> <span class=\"token function\">sinkingDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> targetIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> leftChildIndex <span class=\"token operator\">=</span> targetIndex <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                rightChildIndex <span class=\"token operator\">=</span> targetIndex <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">let</span> target <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>targetIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                leftChild <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>leftChildIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                rightChild <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>rightChildIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n                leftChild <span class=\"token operator\">&amp;&amp;</span>\n                rightChild <span class=\"token operator\">&amp;&amp;</span>\n                target<span class=\"token punctuation\">.</span>priority <span class=\"token operator\">></span> leftChild<span class=\"token punctuation\">.</span>priority <span class=\"token operator\">&amp;&amp;</span>\n                target<span class=\"token punctuation\">.</span>priority <span class=\"token operator\">></span> rightChild<span class=\"token punctuation\">.</span>priority\n            <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rightChild<span class=\"token punctuation\">.</span>priority <span class=\"token operator\">&lt;</span> leftChild<span class=\"token punctuation\">.</span>priority<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token punctuation\">[</span>\n                        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>targetIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>rightChildIndex<span class=\"token punctuation\">]</span>\n                    <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n                        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>rightChildIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>targetIndex<span class=\"token punctuation\">]</span>\n                    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n                    targetIndex <span class=\"token operator\">=</span> rightChildIndex<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token punctuation\">[</span>\n                        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>targetIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>leftChildIndex<span class=\"token punctuation\">]</span>\n                    <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n                        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>leftChildIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>targetIndex<span class=\"token punctuation\">]</span>\n                    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n                    targetIndex <span class=\"token operator\">=</span> leftChildIndex<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rightChild <span class=\"token operator\">&amp;&amp;</span> rightChild<span class=\"token punctuation\">.</span>priority <span class=\"token operator\">&lt;=</span> target<span class=\"token punctuation\">.</span>priority<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>targetIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>rightChildIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>rightChildIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>targetIndex<span class=\"token punctuation\">]</span>\n                <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n                targetIndex <span class=\"token operator\">=</span> leftChildIndex<span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftChild <span class=\"token operator\">&amp;&amp;</span> leftChild<span class=\"token punctuation\">.</span>priority <span class=\"token operator\">&lt;=</span> target<span class=\"token punctuation\">.</span>priority<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>targetIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>leftChildIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>leftChildIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span>targetIndex<span class=\"token punctuation\">]</span>\n                <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n                targetIndex <span class=\"token operator\">=</span> leftChildIndex<span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">,</span> priority <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> INode<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> _Node<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">_Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">sinkingUp</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> _Node <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">sinkingDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":1680,"column":1,"offset":66343},"end":{"line":1792,"column":4,"offset":69706},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Hash Tables","position":{"start":{"line":1794,"column":4,"offset":69711},"end":{"line":1794,"column":15,"offset":69722},"indent":[]}}],"position":{"start":{"line":1794,"column":1,"offset":69708},"end":{"line":1794,"column":15,"offset":69722},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Hash tables are collection of key-value pairs","position":{"start":{"line":1796,"column":1,"offset":69724},"end":{"line":1796,"column":46,"offset":69769},"indent":[]}}],"position":{"start":{"line":1796,"column":1,"offset":69724},"end":{"line":1796,"column":46,"offset":69769},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"collisions","position":{"start":{"line":1798,"column":5,"offset":69775},"end":{"line":1798,"column":15,"offset":69785},"indent":[]}}],"position":{"start":{"line":1798,"column":1,"offset":69771},"end":{"line":1798,"column":15,"offset":69785},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"There is possibility for handle collisions is hash tables :","position":{"start":{"line":1800,"column":1,"offset":69787},"end":{"line":1800,"column":60,"offset":69846},"indent":[]}}],"position":{"start":{"line":1800,"column":1,"offset":69787},"end":{"line":1800,"column":60,"offset":69846},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Separate chaining ( e.g. using nested arrays of key values ","position":{"start":{"line":1802,"column":5,"offset":69852},"end":{"line":1802,"column":64,"offset":69911},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"implemented in following hash tables","position":{"start":{"line":1802,"column":65,"offset":69912},"end":{"line":1802,"column":101,"offset":69948},"indent":[]}}],"position":{"start":{"line":1802,"column":64,"offset":69911},"end":{"line":1802,"column":102,"offset":69949},"indent":[]}},{"type":"text","value":" )","position":{"start":{"line":1802,"column":102,"offset":69949},"end":{"line":1802,"column":104,"offset":69951},"indent":[]}}],"position":{"start":{"line":1802,"column":5,"offset":69852},"end":{"line":1802,"column":104,"offset":69951},"indent":[]}}],"position":{"start":{"line":1802,"column":1,"offset":69848},"end":{"line":1802,"column":104,"offset":69951},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"linear probing ( if index filled place {key, value} in next position )","position":{"start":{"line":1803,"column":5,"offset":69956},"end":{"line":1803,"column":75,"offset":70026},"indent":[]}}],"position":{"start":{"line":1803,"column":5,"offset":69956},"end":{"line":1803,"column":75,"offset":70026},"indent":[]}}],"position":{"start":{"line":1803,"column":1,"offset":69952},"end":{"line":1803,"column":75,"offset":70026},"indent":[]}}],"position":{"start":{"line":1802,"column":1,"offset":69848},"end":{"line":1803,"column":75,"offset":70026},"indent":[1]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">type El <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>string<span class=\"token punctuation\">,</span> any<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HashTable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token literal-property property\">keyMap</span><span class=\"token operator\">:</span> El<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">size</span><span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">53</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>keyMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">_hash</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> <span class=\"token constant\">WEIRD_PRIME</span> <span class=\"token operator\">=</span> <span class=\"token number\">31</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> key<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> characterCode <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">96</span><span class=\"token punctuation\">;</span>\n            total <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>total <span class=\"token operator\">+</span> characterCode <span class=\"token operator\">*</span> <span class=\"token constant\">WEIRD_PRIME</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>keyMap<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> total<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> El<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_hash</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>keyMap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>keyMap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>keyMap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>keyMap<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> El <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_hash</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">const</span> elements <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>keyMap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> value <span class=\"token keyword\">of</span> elements<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> key<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">get</span> <span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">keys</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> value <span class=\"token keyword\">of</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>keyMap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> _value <span class=\"token keyword\">of</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    keys<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>_value<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> keys<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">get</span> <span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> values <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token operator\">&lt;</span>any<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> value <span class=\"token keyword\">of</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>keyMap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> _value <span class=\"token keyword\">of</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    values<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>values<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":1805,"column":1,"offset":70028},"end":{"line":1875,"column":4,"offset":71652},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Graphs","position":{"start":{"line":1877,"column":4,"offset":71657},"end":{"line":1877,"column":10,"offset":71663},"indent":[]}}],"position":{"start":{"line":1877,"column":1,"offset":71654},"end":{"line":1877,"column":10,"offset":71663},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A graph data structure consists of a finite (and possibly mutable) set of vertices or nodes or points, together with a set of unordered pairs of these vertices for an undirected graph or a set of ordered pairs for directed graph.","position":{"start":{"line":1879,"column":1,"offset":71665},"end":{"line":1879,"column":230,"offset":71894},"indent":[]}}],"position":{"start":{"line":1879,"column":1,"offset":71665},"end":{"line":1879,"column":230,"offset":71894},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"terminology","position":{"start":{"line":1881,"column":5,"offset":71900},"end":{"line":1881,"column":16,"offset":71911},"indent":[]}}],"position":{"start":{"line":1881,"column":1,"offset":71896},"end":{"line":1881,"column":16,"offset":71911},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"vertex :node","position":{"start":{"line":1883,"column":5,"offset":71917},"end":{"line":1883,"column":17,"offset":71929},"indent":[]}}],"position":{"start":{"line":1883,"column":5,"offset":71917},"end":{"line":1883,"column":17,"offset":71929},"indent":[]}}],"position":{"start":{"line":1883,"column":1,"offset":71913},"end":{"line":1884,"column":1,"offset":71930},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"edge : connection between nodes","position":{"start":{"line":1885,"column":5,"offset":71935},"end":{"line":1885,"column":36,"offset":71966},"indent":[]}}],"position":{"start":{"line":1885,"column":5,"offset":71935},"end":{"line":1885,"column":36,"offset":71966},"indent":[]}}],"position":{"start":{"line":1885,"column":1,"offset":71931},"end":{"line":1886,"column":1,"offset":71967},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"directed/ undirected graph:\nin directed graph there is a direction assigned to vertices an in undirected no direction assigned.","position":{"start":{"line":1887,"column":5,"offset":71972},"end":{"line":1888,"column":104,"offset":72103},"indent":[5]}}],"position":{"start":{"line":1887,"column":5,"offset":71972},"end":{"line":1888,"column":104,"offset":72103},"indent":[5]}}],"position":{"start":{"line":1887,"column":1,"offset":71968},"end":{"line":1889,"column":1,"offset":72104},"indent":[1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"weighted/ unweighted graph:\nin weighted graph there is a weight associated by edges but in unweighted graph no weight assigned to edges\n","position":{"start":{"line":1890,"column":5,"offset":72109},"end":{"line":1892,"column":5,"offset":72253},"indent":[5,5]}},{"type":"image","title":null,"url":"./assets/3.-Weithened-Graph.png","alt":null,"position":{"start":{"line":1892,"column":5,"offset":72253},"end":{"line":1892,"column":41,"offset":72289},"indent":[]}}],"position":{"start":{"line":1890,"column":5,"offset":72109},"end":{"line":1892,"column":41,"offset":72289},"indent":[5,5]}}],"position":{"start":{"line":1890,"column":1,"offset":72105},"end":{"line":1892,"column":41,"offset":72289},"indent":[1,1]}}],"position":{"start":{"line":1883,"column":1,"offset":71913},"end":{"line":1892,"column":41,"offset":72289},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"adjacency matrix","position":{"start":{"line":1894,"column":5,"offset":72295},"end":{"line":1894,"column":21,"offset":72311},"indent":[]}}],"position":{"start":{"line":1894,"column":1,"offset":72291},"end":{"line":1894,"column":21,"offset":72311},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"./assets/GahiR.jpg","alt":null,"position":{"start":{"line":1896,"column":1,"offset":72313},"end":{"line":1896,"column":24,"offset":72336},"indent":[]}}],"position":{"start":{"line":1896,"column":1,"offset":72313},"end":{"line":1896,"column":24,"offset":72336},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"adjacency list","position":{"start":{"line":1898,"column":4,"offset":72341},"end":{"line":1898,"column":18,"offset":72355},"indent":[]}}],"position":{"start":{"line":1898,"column":1,"offset":72338},"end":{"line":1898,"column":18,"offset":72355},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"./assets/268857bd-bb32-4fa5-88c9-66d7787952e9.png","alt":null,"position":{"start":{"line":1900,"column":1,"offset":72357},"end":{"line":1900,"column":55,"offset":72411},"indent":[]}}],"position":{"start":{"line":1900,"column":1,"offset":72357},"end":{"line":1900,"column":55,"offset":72411},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"adjacency list vs adjacency matrix","position":{"start":{"line":1902,"column":4,"offset":72416},"end":{"line":1902,"column":38,"offset":72450},"indent":[]}}],"position":{"start":{"line":1902,"column":1,"offset":72413},"end":{"line":1902,"column":38,"offset":72450},"indent":[]}},{"type":"table","align":["center","center","center"],"children":[{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Operation","position":{"start":{"line":1904,"column":5,"offset":72456},"end":{"line":1904,"column":14,"offset":72465},"indent":[]}}],"position":{"start":{"line":1904,"column":5,"offset":72456},"end":{"line":1904,"column":16,"offset":72467},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Adjacency List","position":{"start":{"line":1904,"column":19,"offset":72470},"end":{"line":1904,"column":33,"offset":72484},"indent":[]}}],"position":{"start":{"line":1904,"column":19,"offset":72470},"end":{"line":1904,"column":33,"offset":72484},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Adjacency Matrix","position":{"start":{"line":1904,"column":36,"offset":72487},"end":{"line":1904,"column":52,"offset":72503},"indent":[]}}],"position":{"start":{"line":1904,"column":36,"offset":72487},"end":{"line":1904,"column":52,"offset":72503},"indent":[]}}],"position":{"start":{"line":1904,"column":1,"offset":72452},"end":{"line":1904,"column":54,"offset":72505},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Add vertex","position":{"start":{"line":1906,"column":4,"offset":72563},"end":{"line":1906,"column":14,"offset":72573},"indent":[]}}],"position":{"start":{"line":1906,"column":4,"offset":72563},"end":{"line":1906,"column":16,"offset":72575},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(1)","position":{"start":{"line":1906,"column":24,"offset":72583},"end":{"line":1906,"column":28,"offset":72587},"indent":[]}}],"position":{"start":{"line":1906,"column":24,"offset":72583},"end":{"line":1906,"column":33,"offset":72592},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(V^2)","position":{"start":{"line":1906,"column":41,"offset":72600},"end":{"line":1906,"column":47,"offset":72606},"indent":[]}}],"position":{"start":{"line":1906,"column":41,"offset":72600},"end":{"line":1906,"column":52,"offset":72611},"indent":[]}}],"position":{"start":{"line":1906,"column":1,"offset":72560},"end":{"line":1906,"column":54,"offset":72613},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Add Edge","position":{"start":{"line":1907,"column":5,"offset":72618},"end":{"line":1907,"column":13,"offset":72626},"indent":[]}}],"position":{"start":{"line":1907,"column":5,"offset":72618},"end":{"line":1907,"column":16,"offset":72629},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(1)","position":{"start":{"line":1907,"column":24,"offset":72637},"end":{"line":1907,"column":28,"offset":72641},"indent":[]}}],"position":{"start":{"line":1907,"column":24,"offset":72637},"end":{"line":1907,"column":33,"offset":72646},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(1)","position":{"start":{"line":1907,"column":42,"offset":72655},"end":{"line":1907,"column":46,"offset":72659},"indent":[]}}],"position":{"start":{"line":1907,"column":42,"offset":72655},"end":{"line":1907,"column":52,"offset":72665},"indent":[]}}],"position":{"start":{"line":1907,"column":1,"offset":72614},"end":{"line":1907,"column":54,"offset":72667},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Remove vertex","position":{"start":{"line":1908,"column":3,"offset":72670},"end":{"line":1908,"column":16,"offset":72683},"indent":[]}}],"position":{"start":{"line":1908,"column":3,"offset":72670},"end":{"line":1908,"column":16,"offset":72683},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(V+E)","position":{"start":{"line":1908,"column":23,"offset":72690},"end":{"line":1908,"column":29,"offset":72696},"indent":[]}}],"position":{"start":{"line":1908,"column":23,"offset":72690},"end":{"line":1908,"column":33,"offset":72700},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(V^2)","position":{"start":{"line":1908,"column":41,"offset":72708},"end":{"line":1908,"column":47,"offset":72714},"indent":[]}}],"position":{"start":{"line":1908,"column":41,"offset":72708},"end":{"line":1908,"column":52,"offset":72719},"indent":[]}}],"position":{"start":{"line":1908,"column":1,"offset":72668},"end":{"line":1908,"column":54,"offset":72721},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Remove Edge","position":{"start":{"line":1909,"column":4,"offset":72725},"end":{"line":1909,"column":15,"offset":72736},"indent":[]}}],"position":{"start":{"line":1909,"column":4,"offset":72725},"end":{"line":1909,"column":16,"offset":72737},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(E)","position":{"start":{"line":1909,"column":24,"offset":72745},"end":{"line":1909,"column":28,"offset":72749},"indent":[]}}],"position":{"start":{"line":1909,"column":24,"offset":72745},"end":{"line":1909,"column":33,"offset":72754},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(1)","position":{"start":{"line":1909,"column":42,"offset":72763},"end":{"line":1909,"column":46,"offset":72767},"indent":[]}}],"position":{"start":{"line":1909,"column":42,"offset":72763},"end":{"line":1909,"column":52,"offset":72773},"indent":[]}}],"position":{"start":{"line":1909,"column":1,"offset":72722},"end":{"line":1909,"column":54,"offset":72775},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Query","position":{"start":{"line":1910,"column":7,"offset":72782},"end":{"line":1910,"column":12,"offset":72787},"indent":[]}}],"position":{"start":{"line":1910,"column":7,"offset":72782},"end":{"line":1910,"column":16,"offset":72791},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(V+E)","position":{"start":{"line":1910,"column":23,"offset":72798},"end":{"line":1910,"column":29,"offset":72804},"indent":[]}}],"position":{"start":{"line":1910,"column":23,"offset":72798},"end":{"line":1910,"column":33,"offset":72808},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(1)","position":{"start":{"line":1910,"column":42,"offset":72817},"end":{"line":1910,"column":46,"offset":72821},"indent":[]}}],"position":{"start":{"line":1910,"column":42,"offset":72817},"end":{"line":1910,"column":52,"offset":72827},"indent":[]}}],"position":{"start":{"line":1910,"column":1,"offset":72776},"end":{"line":1910,"column":54,"offset":72829},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Storage","position":{"start":{"line":1911,"column":6,"offset":72835},"end":{"line":1911,"column":13,"offset":72842},"indent":[]}}],"position":{"start":{"line":1911,"column":6,"offset":72835},"end":{"line":1911,"column":16,"offset":72845},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(V+E)","position":{"start":{"line":1911,"column":23,"offset":72852},"end":{"line":1911,"column":29,"offset":72858},"indent":[]}}],"position":{"start":{"line":1911,"column":23,"offset":72852},"end":{"line":1911,"column":33,"offset":72862},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"O(V^2)","position":{"start":{"line":1911,"column":41,"offset":72870},"end":{"line":1911,"column":47,"offset":72876},"indent":[]}}],"position":{"start":{"line":1911,"column":41,"offset":72870},"end":{"line":1911,"column":52,"offset":72881},"indent":[]}}],"position":{"start":{"line":1911,"column":1,"offset":72830},"end":{"line":1911,"column":54,"offset":72883},"indent":[]}}],"position":{"start":{"line":1904,"column":1,"offset":72452},"end":{"line":1911,"column":54,"offset":72883},"indent":[1,1,1,1,1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"|V| : number of Vertices","position":{"start":{"line":1913,"column":5,"offset":72889},"end":{"line":1913,"column":29,"offset":72913},"indent":[]}}],"position":{"start":{"line":1913,"column":5,"offset":72889},"end":{"line":1913,"column":29,"offset":72913},"indent":[]}}],"position":{"start":{"line":1913,"column":1,"offset":72885},"end":{"line":1913,"column":29,"offset":72913},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"|E| : number of Edges","position":{"start":{"line":1914,"column":5,"offset":72918},"end":{"line":1914,"column":26,"offset":72939},"indent":[]}}],"position":{"start":{"line":1914,"column":5,"offset":72918},"end":{"line":1914,"column":26,"offset":72939},"indent":[]}}],"position":{"start":{"line":1914,"column":1,"offset":72914},"end":{"line":1914,"column":26,"offset":72939},"indent":[]}}],"position":{"start":{"line":1913,"column":1,"offset":72885},"end":{"line":1914,"column":26,"offset":72939},"indent":[1]}},{"type":"html","value":"<hr/>","position":{"start":{"line":1916,"column":1,"offset":72941},"end":{"line":1916,"column":6,"offset":72946},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Adjacency List","position":{"start":{"line":1918,"column":7,"offset":72954},"end":{"line":1918,"column":21,"offset":72968},"indent":[]}}],"position":{"start":{"line":1918,"column":5,"offset":72952},"end":{"line":1918,"column":23,"offset":72970},"indent":[]}},{"type":"text","value":" take ","position":{"start":{"line":1918,"column":23,"offset":72970},"end":{"line":1918,"column":29,"offset":72976},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"less space","position":{"start":{"line":1918,"column":31,"offset":72978},"end":{"line":1918,"column":41,"offset":72988},"indent":[]}}],"position":{"start":{"line":1918,"column":29,"offset":72976},"end":{"line":1918,"column":43,"offset":72990},"indent":[]}},{"type":"text","value":" in sparse graph( when we have a few edges ).","position":{"start":{"line":1918,"column":43,"offset":72990},"end":{"line":1918,"column":88,"offset":73035},"indent":[]}}],"position":{"start":{"line":1918,"column":5,"offset":72952},"end":{"line":1918,"column":88,"offset":73035},"indent":[]}}],"position":{"start":{"line":1918,"column":1,"offset":72948},"end":{"line":1918,"column":88,"offset":73035},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Adjacency List","position":{"start":{"line":1919,"column":7,"offset":73042},"end":{"line":1919,"column":21,"offset":73056},"indent":[]}}],"position":{"start":{"line":1919,"column":5,"offset":73040},"end":{"line":1919,"column":23,"offset":73058},"indent":[]}},{"type":"text","value":" are ","position":{"start":{"line":1919,"column":23,"offset":73058},"end":{"line":1919,"column":28,"offset":73063},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"faster to iterate","position":{"start":{"line":1919,"column":30,"offset":73065},"end":{"line":1919,"column":47,"offset":73082},"indent":[]}}],"position":{"start":{"line":1919,"column":28,"offset":73063},"end":{"line":1919,"column":49,"offset":73084},"indent":[]}},{"type":"text","value":" over edges.","position":{"start":{"line":1919,"column":49,"offset":73084},"end":{"line":1919,"column":61,"offset":73096},"indent":[]}}],"position":{"start":{"line":1919,"column":5,"offset":73040},"end":{"line":1919,"column":61,"offset":73096},"indent":[]}}],"position":{"start":{"line":1919,"column":1,"offset":73036},"end":{"line":1919,"column":61,"offset":73096},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Adjacency Matrix","position":{"start":{"line":1920,"column":7,"offset":73103},"end":{"line":1920,"column":23,"offset":73119},"indent":[]}}],"position":{"start":{"line":1920,"column":5,"offset":73101},"end":{"line":1920,"column":25,"offset":73121},"indent":[]}},{"type":"text","value":" are ","position":{"start":{"line":1920,"column":25,"offset":73121},"end":{"line":1920,"column":30,"offset":73126},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"faster to","position":{"start":{"line":1920,"column":32,"offset":73128},"end":{"line":1920,"column":41,"offset":73137},"indent":[]}}],"position":{"start":{"line":1920,"column":30,"offset":73126},"end":{"line":1920,"column":43,"offset":73139},"indent":[]}},{"type":"text","value":" finding a specific edge.","position":{"start":{"line":1920,"column":43,"offset":73139},"end":{"line":1920,"column":68,"offset":73164},"indent":[]}}],"position":{"start":{"line":1920,"column":5,"offset":73101},"end":{"line":1920,"column":68,"offset":73164},"indent":[]}}],"position":{"start":{"line":1920,"column":1,"offset":73097},"end":{"line":1920,"column":68,"offset":73164},"indent":[]}}],"position":{"start":{"line":1918,"column":1,"offset":72948},"end":{"line":1920,"column":68,"offset":73164},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"graph(adjacency list)","position":{"start":{"line":1922,"column":5,"offset":73170},"end":{"line":1922,"column":26,"offset":73191},"indent":[]}}],"position":{"start":{"line":1922,"column":1,"offset":73166},"end":{"line":1922,"column":26,"offset":73191},"indent":[]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">AdjacencyList</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>vertex<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Graph</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token literal-property property\">_adjacencyList</span><span class=\"token operator\">:</span> AdjacencyList <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">get</span> <span class=\"token function\">adjacencyList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> AdjacencyList <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">set</span> <span class=\"token function\">adjacencyList</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> AdjacencyList</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span>vertex<span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> AdjacencyList <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">[</span>vertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">addEdge</span><span class=\"token punctuation\">(</span>vertex1<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">vertex2</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> boolean <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">[</span>vertex1<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">[</span>vertex2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">[</span>vertex1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>vertex2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">[</span>vertex2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>vertex1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">removeEdge</span><span class=\"token punctuation\">(</span>vertex1<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">vertex2</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> boolean <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">[</span>vertex1<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">[</span>vertex2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">[</span>vertex1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">[</span>vertex1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>\n                <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> value <span class=\"token operator\">!==</span> vertex2\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">[</span>vertex2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">[</span>\n                    vertex2\n                <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> value <span class=\"token operator\">!==</span> vertex1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">removeVertex</span><span class=\"token punctuation\">(</span>vertex<span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">[</span>vertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeEdge</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">delete</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">[</span>vertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> vertex<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":1924,"column":1,"offset":73193},"end":{"line":1978,"column":4,"offset":74835},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Graph Traversal","position":{"start":{"line":1980,"column":4,"offset":74840},"end":{"line":1980,"column":19,"offset":74855},"indent":[]}}],"position":{"start":{"line":1980,"column":1,"offset":74837},"end":{"line":1980,"column":19,"offset":74855},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"depth first traversal and breadth first traversal in graph","position":{"start":{"line":1982,"column":5,"offset":74861},"end":{"line":1982,"column":63,"offset":74919},"indent":[]}}],"position":{"start":{"line":1982,"column":1,"offset":74857},"end":{"line":1982,"column":63,"offset":74919},"indent":[]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">AdjacencyList</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>vertex<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Graph</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token literal-property property\">_adjacencyList</span><span class=\"token operator\">:</span> AdjacencyList <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">get</span> <span class=\"token function\">adjacencyList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> AdjacencyList <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">set</span> <span class=\"token function\">adjacencyList</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> AdjacencyList</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span>vertex<span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> AdjacencyList <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">[</span>vertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">addEdge</span><span class=\"token punctuation\">(</span>vertex1<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">vertex2</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> boolean <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">[</span>vertex1<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">[</span>vertex2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">[</span>vertex1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>vertex2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">[</span>vertex2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>vertex1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">removeEdge</span><span class=\"token punctuation\">(</span>vertex1<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">vertex2</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> boolean <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">[</span>vertex1<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">[</span>vertex2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">[</span>vertex1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">[</span>vertex1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>\n                <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> value <span class=\"token operator\">!==</span> vertex2\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">[</span>vertex2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">[</span>\n                    vertex2\n                <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> value <span class=\"token operator\">!==</span> vertex1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">removeVertex</span><span class=\"token punctuation\">(</span>vertex<span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">[</span>vertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeEdge</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">delete</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">[</span>vertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> vertex<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">dfcRecursive</span><span class=\"token punctuation\">(</span>startingVertex<span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">results</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> adjacencyList <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">let</span> currentVertex <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">[</span>startingVertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentVertex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">visitedVertex</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>vertex<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> boolean <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">vertex</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>vertex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visitedVertex<span class=\"token punctuation\">[</span>vertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    visitedVertex<span class=\"token punctuation\">[</span>vertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                    results<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> neighbor <span class=\"token keyword\">of</span> currentVertex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visitedVertex<span class=\"token punctuation\">[</span>neighbor<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            currentVertex <span class=\"token operator\">=</span> adjacencyList<span class=\"token punctuation\">[</span>neighbor<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>neighbor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>startingVertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> results<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// or</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">dfsIterative</span><span class=\"token punctuation\">(</span>startingVertex<span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">results</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">[</span>startingVertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> <span class=\"token literal-property property\">stack</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>startingVertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">visitedVertex</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>vertex<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> boolean <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">debugger</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">const</span> currentVertex <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentVertex <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>visitedVertex<span class=\"token punctuation\">[</span>currentVertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    visitedVertex<span class=\"token punctuation\">[</span>currentVertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                    results<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>currentVertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>stack<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">[</span>currentVertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> results<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">breadthFirstSearch</span><span class=\"token punctuation\">(</span>startingVertex<span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">results</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">[</span>startingVertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>startingVertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">visitedVertex</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>vertex<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> boolean <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">const</span> currentVertex <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentVertex <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>visitedVertex<span class=\"token punctuation\">[</span>currentVertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    visitedVertex<span class=\"token punctuation\">[</span>currentVertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                    results<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>currentVertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>queue<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">[</span>currentVertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> results<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":1984,"column":1,"offset":74921},"end":{"line":2107,"column":4,"offset":78899},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Dijkstra's Shortest path firt Algorithms","position":{"start":{"line":2109,"column":4,"offset":78904},"end":{"line":2109,"column":44,"offset":78944},"indent":[]}}],"position":{"start":{"line":2109,"column":1,"offset":78901},"end":{"line":2109,"column":44,"offset":78944},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Finding shortest path between two vertices in a ","position":{"start":{"line":2111,"column":1,"offset":78946},"end":{"line":2111,"column":49,"offset":78994},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"weighted graph","position":{"start":{"line":2111,"column":51,"offset":78996},"end":{"line":2111,"column":65,"offset":79010},"indent":[]}}],"position":{"start":{"line":2111,"column":49,"offset":78994},"end":{"line":2111,"column":67,"offset":79012},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":2111,"column":67,"offset":79012},"end":{"line":2111,"column":68,"offset":79013},"indent":[]}}],"position":{"start":{"line":2111,"column":1,"offset":78946},"end":{"line":2111,"column":68,"offset":79013},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"./assets/Dijkstra_Animation.gif","alt":null,"position":{"start":{"line":2113,"column":1,"offset":79015},"end":{"line":2113,"column":37,"offset":79051},"indent":[]}}],"position":{"start":{"line":2113,"column":1,"offset":79015},"end":{"line":2113,"column":37,"offset":79051},"indent":[]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Value</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">;</span>\n    <span class=\"token literal-property property\">priority</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Neighbor</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">vertex</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n    <span class=\"token literal-property property\">weight</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">AdjacencyList</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>vertex<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> Neighbor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// naive priority queue</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PriorityQueue</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token literal-property property\">_values</span><span class=\"token operator\">:</span> Value<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">get</span> <span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Value<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> any<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">priority</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Value<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">,</span> priority <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Value <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> value <span class=\"token keyword\">as</span> Value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> Value<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> Value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span>priority <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">WeightedGraph</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token literal-property property\">_adjacencyList</span><span class=\"token operator\">:</span> AdjacencyList <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">get</span> <span class=\"token function\">adjacencyList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> AdjacencyList <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">set</span> <span class=\"token function\">adjacencyList</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> AdjacencyList</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span>vertex<span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> AdjacencyList <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">[</span>vertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">addEdge</span><span class=\"token punctuation\">(</span>vertex1<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">vertex2</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">weight</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> boolean <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">[</span>vertex1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">[</span>vertex1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">vertex</span><span class=\"token operator\">:</span> vertex2<span class=\"token punctuation\">,</span> weight <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">[</span>vertex2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">vertex</span><span class=\"token operator\">:</span> vertex1<span class=\"token punctuation\">,</span> weight <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/*\n    dijkstra shortest path first\n    */</span>\n\n    <span class=\"token function\">dijkstraSPF</span><span class=\"token punctuation\">(</span>startingVertex<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">targetVertex</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">[</span>startingVertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">[</span>targetVertex<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> pq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">previousVertex</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>vertex<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">distances</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>vertex<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// build initial states</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">===</span> startingVertex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token punctuation\">(</span>distances<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    distances<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">Infinity</span><span class=\"token punctuation\">;</span>\n                    pq<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token number\">Infinity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                previousVertex<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">let</span> smallest <span class=\"token operator\">=</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>smallest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>smallest <span class=\"token operator\">===</span> targetVertex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token comment\">// done build path</span>\n                        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>\n                            previousVertex<span class=\"token punctuation\">[</span>smallest<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span>\n                            smallest <span class=\"token operator\">===</span> startingVertex\n                        <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            path<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>smallest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            smallest <span class=\"token operator\">=</span> previousVertex<span class=\"token punctuation\">[</span>smallest<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> neighbor <span class=\"token keyword\">of</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">[</span>smallest<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">const</span> candidate <span class=\"token operator\">=</span> distances<span class=\"token punctuation\">[</span>smallest<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> neighbor<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">;</span>\n\n                        <span class=\"token keyword\">let</span> nextNeighbor <span class=\"token operator\">=</span> neighbor<span class=\"token punctuation\">.</span>vertex<span class=\"token punctuation\">;</span>\n\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>candidate <span class=\"token operator\">&lt;</span> distances<span class=\"token punctuation\">[</span>nextNeighbor<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            distances<span class=\"token punctuation\">[</span>nextNeighbor<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> candidate<span class=\"token punctuation\">;</span>\n\n                            previousVertex<span class=\"token punctuation\">[</span>nextNeighbor<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> smallest<span class=\"token punctuation\">;</span>\n\n                            pq<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>nextNeighbor<span class=\"token punctuation\">,</span> candidate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":2115,"column":1,"offset":79053},"end":{"line":2237,"column":4,"offset":82580},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Dynamic Programming (light introduction)","position":{"start":{"line":2239,"column":4,"offset":82585},"end":{"line":2239,"column":44,"offset":82625},"indent":[]}}],"position":{"start":{"line":2239,"column":1,"offset":82582},"end":{"line":2239,"column":44,"offset":82625},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It's a method for solving a complex problems by breaking it down into a collection of simpler problems, solving their subProblems ","position":{"start":{"line":2241,"column":1,"offset":82627},"end":{"line":2241,"column":131,"offset":82757},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"once","position":{"start":{"line":2241,"column":133,"offset":82759},"end":{"line":2241,"column":137,"offset":82763},"indent":[]}}],"position":{"start":{"line":2241,"column":131,"offset":82757},"end":{"line":2241,"column":139,"offset":82765},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":2241,"column":139,"offset":82765},"end":{"line":2241,"column":144,"offset":82770},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"storing","position":{"start":{"line":2241,"column":146,"offset":82772},"end":{"line":2241,"column":153,"offset":82779},"indent":[]}}],"position":{"start":{"line":2241,"column":144,"offset":82770},"end":{"line":2241,"column":155,"offset":82781},"indent":[]}},{"type":"text","value":" their solutions.\n","position":{"start":{"line":2241,"column":155,"offset":82781},"end":{"line":2242,"column":1,"offset":82799},"indent":[1]}},{"type":"emphasis","children":[{"type":"text","value":"technically it using knowledge of last problems to solve next by memorization","position":{"start":{"line":2242,"column":2,"offset":82800},"end":{"line":2242,"column":79,"offset":82877},"indent":[]}}],"position":{"start":{"line":2242,"column":1,"offset":82799},"end":{"line":2242,"column":80,"offset":82878},"indent":[]}}],"position":{"start":{"line":2241,"column":1,"offset":82627},"end":{"line":2242,"column":80,"offset":82878},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"example Fibonacci sequence","position":{"start":{"line":2244,"column":5,"offset":82884},"end":{"line":2244,"column":31,"offset":82910},"indent":[]}}],"position":{"start":{"line":2244,"column":1,"offset":82880},"end":{"line":2244,"column":31,"offset":82910},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Let's implement it without dynamic programming:without dynamic programming:","position":{"start":{"line":2246,"column":1,"offset":82912},"end":{"line":2246,"column":76,"offset":82987},"indent":[]}}],"position":{"start":{"line":2246,"column":1,"offset":82912},"end":{"line":2246,"column":76,"offset":82987},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"emphasis","children":[{"type":"text","value":"in fibonacci sequence fib(n) = fib(n-2) + fib(n-1) && fin(1) = 1 && fib(2) = 1","position":{"start":{"line":2248,"column":4,"offset":82992},"end":{"line":2248,"column":82,"offset":83070},"indent":[]}}],"position":{"start":{"line":2248,"column":3,"offset":82991},"end":{"line":2248,"column":83,"offset":83071},"indent":[]}}],"position":{"start":{"line":2248,"column":1,"offset":82989},"end":{"line":2248,"column":85,"offset":83073},"indent":[]}}],"position":{"start":{"line":2248,"column":1,"offset":82989},"end":{"line":2248,"column":85,"offset":83073},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"O(2^n)","position":{"start":{"line":2250,"column":3,"offset":83077},"end":{"line":2250,"column":9,"offset":83083},"indent":[]}}],"position":{"start":{"line":2250,"column":1,"offset":83075},"end":{"line":2250,"column":11,"offset":83085},"indent":[]}}],"position":{"start":{"line":2250,"column":1,"offset":83075},"end":{"line":2250,"column":11,"offset":83085},"indent":[]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">n</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":2252,"column":1,"offset":83087},"end":{"line":2257,"column":4,"offset":83202},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"./assets/2-Figure3.1-1.png","alt":null,"position":{"start":{"line":2259,"column":1,"offset":83204},"end":{"line":2259,"column":32,"offset":83235},"indent":[]}}],"position":{"start":{"line":2259,"column":1,"offset":83204},"end":{"line":2259,"column":32,"offset":83235},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As you see we calculate f(5) two times with current implementation.","position":{"start":{"line":2261,"column":1,"offset":83237},"end":{"line":2261,"column":68,"offset":83304},"indent":[]}}],"position":{"start":{"line":2261,"column":1,"offset":83237},"end":{"line":2261,"column":68,"offset":83304},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"memorization","position":{"start":{"line":2263,"column":5,"offset":83310},"end":{"line":2263,"column":17,"offset":83322},"indent":[]}}],"position":{"start":{"line":2263,"column":1,"offset":83306},"end":{"line":2263,"column":17,"offset":83322},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Storing the results of expensive function class and returning the cached result when the same inputs occur again.","position":{"start":{"line":2265,"column":1,"offset":83324},"end":{"line":2265,"column":114,"offset":83437},"indent":[]}}],"position":{"start":{"line":2265,"column":1,"offset":83324},"end":{"line":2265,"column":114,"offset":83437},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"O(n)","position":{"start":{"line":2267,"column":1,"offset":83439},"end":{"line":2267,"column":5,"offset":83443},"indent":[]}}],"position":{"start":{"line":2267,"column":1,"offset":83439},"end":{"line":2267,"column":5,"offset":83443},"indent":[]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">n</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">memo</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> memo<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> memo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> res<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">fib</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Maximum callStack exceeded</span></code></pre></div>","position":{"start":{"line":2269,"column":1,"offset":83445},"end":{"line":2281,"column":4,"offset":83711},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"tabulation","position":{"start":{"line":2283,"column":5,"offset":83717},"end":{"line":2283,"column":15,"offset":83727},"indent":[]}}],"position":{"start":{"line":2283,"column":1,"offset":83713},"end":{"line":2283,"column":15,"offset":83727},"indent":[]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">n</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> fibNumbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> index <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        fibNumbers<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fibNumbers<span class=\"token punctuation\">[</span>index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> fibNumbers<span class=\"token punctuation\">[</span>index <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fibNumbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> fibNumbers<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">fib</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Infinity</span></code></pre></div>","position":{"start":{"line":2285,"column":1,"offset":83729},"end":{"line":2300,"column":4,"offset":84053},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Interesting Stuff","position":{"start":{"line":2302,"column":4,"offset":84058},"end":{"line":2302,"column":21,"offset":84075},"indent":[]}}],"position":{"start":{"line":2302,"column":1,"offset":84055},"end":{"line":2302,"column":21,"offset":84075},"indent":[]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// turn it to boolean</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n\n<span class=\"token comment\">// group operation</span>\n<span class=\"token punctuation\">(</span>newNode<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> prevNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>newNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> nextNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":2304,"column":1,"offset":84077},"end":{"line":2311,"column":4,"offset":84243},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"String","position":{"start":{"line":2313,"column":4,"offset":84248},"end":{"line":2313,"column":10,"offset":84254},"indent":[]}}],"position":{"start":{"line":2313,"column":1,"offset":84245},"end":{"line":2313,"column":10,"offset":84254},"indent":[]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token string\">'lo'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'lo'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'lo'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre></div>","position":{"start":{"line":2315,"column":1,"offset":84256},"end":{"line":2319,"column":4,"offset":84361},"indent":[1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"string pattern matching","position":{"start":{"line":2321,"column":5,"offset":84367},"end":{"line":2321,"column":28,"offset":84390},"indent":[]}}],"position":{"start":{"line":2321,"column":1,"offset":84363},"end":{"line":2321,"column":28,"offset":84390},"indent":[]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// regex.test(str: number) Returns a Boolean value that indicates whether or not a pattern exists in a searched string.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">charCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">str</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">result</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> char <span class=\"token keyword\">of</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        char <span class=\"token operator\">=</span> char<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[a-z0-9]</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result<span class=\"token punctuation\">[</span>char<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>result<span class=\"token punctuation\">[</span>char<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// *** string.chatCodeAt(i: number) Returns the unicode of value on specified location</span>\n\n<span class=\"token comment\">/* \nnumeric (0-9) code > 47 &amp;&amp; code &lt; 58;\nupper alpha (A-Z) code > 64 &amp;&amp; code &lt; 91;\nlower alpha (a-z) code > 96 &amp;&amp; code &lt;123;\n*/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">charCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">str</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">result</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> char <span class=\"token keyword\">of</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isAlphaNumeric</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            char <span class=\"token operator\">=</span> char<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            result<span class=\"token punctuation\">[</span>char<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>result<span class=\"token punctuation\">[</span>char<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">isAlphaNumeric</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">char</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> code <span class=\"token operator\">=</span> char<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>code <span class=\"token operator\">></span> <span class=\"token number\">47</span> <span class=\"token operator\">&amp;&amp;</span> code <span class=\"token operator\">&lt;</span> <span class=\"token number\">58</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>code <span class=\"token operator\">></span> <span class=\"token number\">64</span> <span class=\"token operator\">&amp;&amp;</span> code <span class=\"token operator\">&lt;</span> <span class=\"token number\">91</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>code <span class=\"token operator\">></span> <span class=\"token number\">96</span> <span class=\"token operator\">&amp;&amp;</span> code <span class=\"token operator\">&lt;</span> <span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":2323,"column":1,"offset":84392},"end":{"line":2365,"column":4,"offset":85513},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Array","position":{"start":{"line":2367,"column":4,"offset":85518},"end":{"line":2367,"column":9,"offset":85523},"indent":[]}}],"position":{"start":{"line":2367,"column":1,"offset":85515},"end":{"line":2367,"column":9,"offset":85523},"indent":[]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> el <span class=\"token operator\">===</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// world</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> el <span class=\"token operator\">===</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\nArray<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token string\">'lol'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [[\"lol\"], [\"lol\"]]</span>\n\n<span class=\"token keyword\">const</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'E'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'F'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> s <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"A\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"F\"</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['b', 'a']</span></code></pre></div>","position":{"start":{"line":2369,"column":1,"offset":85525},"end":{"line":2385,"column":4,"offset":85935},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Object","position":{"start":{"line":2387,"column":5,"offset":85941},"end":{"line":2387,"column":11,"offset":85947},"indent":[]}}],"position":{"start":{"line":2387,"column":1,"offset":85937},"end":{"line":2387,"column":11,"offset":85947},"indent":[]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">delete</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">[</span>vertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// delete key and value from object</span>\n<span class=\"token keyword\">delete</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_adjacencyList<span class=\"token punctuation\">.</span>vertex<span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":2389,"column":1,"offset":85949},"end":{"line":2392,"column":4,"offset":86073},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Map","position":{"start":{"line":2394,"column":5,"offset":86079},"end":{"line":2394,"column":8,"offset":86082},"indent":[]}}],"position":{"start":{"line":2394,"column":1,"offset":86075},"end":{"line":2394,"column":8,"offset":86082},"indent":[]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// store any type of **unique key** of use duplicate key it will override last value</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token string\">'Object'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Object'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'arr'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'arr'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'boolean'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Function'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Function'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* \n0: {Object => \"Object\"}\n1: {Array(1) => \"arr\"}\n2: {1 => \"number\"}\n3: {false => \"boolean\"}\n4: {function () { return console.log(\"Function\"); } => \"Function\"}\n*/</span>\n\n<span class=\"token comment\">// iterable by **for (let [key, value] of map)**</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> map<span class=\"token punctuation\">)</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// map to arr</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>map<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// :[ [key, value] ]</span>\n<span class=\"token comment\">/* \n0: (2) [{â€¦}, \"Object\"]\n1: (2) [Array(1), \"arr\"]\n2: (2) [1, \"number\"]\n3: (2) [false, \"boolean\"]\n4: (2) [Æ’, \"Function\"]\n*/</span></code></pre></div>","position":{"start":{"line":2396,"column":1,"offset":86084},"end":{"line":2426,"column":4,"offset":86842},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Math","position":{"start":{"line":2428,"column":4,"offset":86847},"end":{"line":2428,"column":8,"offset":86851},"indent":[]}}],"position":{"start":{"line":2428,"column":1,"offset":86844},"end":{"line":2428,"column":8,"offset":86851},"indent":[]}},{"type":"html","value":"\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          "},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">log10</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></code></pre></div>","position":{"start":{"line":2430,"column":1,"offset":86853},"end":{"line":2436,"column":4,"offset":86991},"indent":[1,1,1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":2437,"column":1,"offset":86992}}}}