{
    "expireTime": 9007200882786894000,
    "key": "transformer-remark-markdown-ast-6d549814f7b3e33c2e8270898696961a--",
    "val": {
        "type": "root",
        "children": [
            {
                "type": "heading",
                "depth": 1,
                "children": [
                    {
                        "type": "text",
                        "value": "Go To Sitemap: ",
                        "position": { "start": { "line": 2, "column": 3, "offset": 3 }, "end": { "line": 2, "column": 18, "offset": 18 }, "indent": [] }
                    },
                    {
                        "type": "link",
                        "title": null,
                        "url": "./docs/sitemap/",
                        "children": [
                            {
                                "type": "text",
                                "value": "Go Now -->",
                                "position": {
                                    "start": { "line": 2, "column": 19, "offset": 19 },
                                    "end": { "line": 2, "column": 29, "offset": 29 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": { "start": { "line": 2, "column": 18, "offset": 18 }, "end": { "line": 2, "column": 47, "offset": 47 }, "indent": [] }
                    }
                ],
                "position": { "start": { "line": 2, "column": 1, "offset": 1 }, "end": { "line": 2, "column": 47, "offset": 47 }, "indent": [] }
            },
            {
                "type": "heading",
                "depth": 2,
                "children": [
                    {
                        "type": "text",
                        "value": "Doc Websites & Repos",
                        "position": { "start": { "line": 4, "column": 4, "offset": 52 }, "end": { "line": 4, "column": 24, "offset": 72 }, "indent": [] }
                    }
                ],
                "position": { "start": { "line": 4, "column": 1, "offset": 49 }, "end": { "line": 4, "column": 24, "offset": 72 }, "indent": [] }
            },
            {
                "type": "list",
                "ordered": false,
                "start": null,
                "spread": false,
                "children": [
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "https://github.com/bgoonz/PYTHON_PRAC",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "Python Practice",
                                                "position": {
                                                    "start": { "line": 6, "column": 6, "offset": 79 },
                                                    "end": { "line": 6, "column": 21, "offset": 94 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 6, "column": 5, "offset": 78 },
                                            "end": { "line": 6, "column": 61, "offset": 134 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 6, "column": 5, "offset": 78 },
                                    "end": { "line": 6, "column": 61, "offset": 134 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": { "start": { "line": 6, "column": 1, "offset": 74 }, "end": { "line": 6, "column": 61, "offset": 134 }, "indent": [] }
                    },
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "https://lambda-resources.netlify.app/",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "Lambda Bootcamp Website",
                                                "position": {
                                                    "start": { "line": 7, "column": 6, "offset": 140 },
                                                    "end": { "line": 7, "column": 29, "offset": 163 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 7, "column": 5, "offset": 139 },
                                            "end": { "line": 7, "column": 69, "offset": 203 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 7, "column": 5, "offset": 139 },
                                    "end": { "line": 7, "column": 69, "offset": 203 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": { "start": { "line": 7, "column": 1, "offset": 135 }, "end": { "line": 7, "column": 69, "offset": 203 }, "indent": [] }
                    },
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "https://github.com/bgoonz/React_Notes_V3",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "React Notes",
                                                "position": {
                                                    "start": { "line": 8, "column": 6, "offset": 209 },
                                                    "end": { "line": 8, "column": 17, "offset": 220 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 8, "column": 5, "offset": 208 },
                                            "end": { "line": 8, "column": 60, "offset": 263 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 8, "column": 5, "offset": 208 },
                                    "end": { "line": 8, "column": 60, "offset": 263 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": { "start": { "line": 8, "column": 1, "offset": 204 }, "end": { "line": 8, "column": 60, "offset": 263 }, "indent": [] }
                    },
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "https://github.com/bgoonz/Project-Showcase",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "Project Showcase",
                                                "position": {
                                                    "start": { "line": 9, "column": 6, "offset": 269 },
                                                    "end": { "line": 9, "column": 22, "offset": 285 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 9, "column": 5, "offset": 268 },
                                            "end": { "line": 9, "column": 67, "offset": 330 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 9, "column": 5, "offset": 268 },
                                    "end": { "line": 9, "column": 67, "offset": 330 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": { "start": { "line": 9, "column": 1, "offset": 264 }, "end": { "line": 9, "column": 67, "offset": 330 }, "indent": [] }
                    },
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "https://github.com/bgoonz/DS-ALGO-OFFICIAL",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "Data Structures & Algorithms",
                                                "position": {
                                                    "start": { "line": 10, "column": 6, "offset": 336 },
                                                    "end": { "line": 10, "column": 34, "offset": 364 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 10, "column": 5, "offset": 335 },
                                            "end": { "line": 10, "column": 79, "offset": 409 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 10, "column": 5, "offset": 335 },
                                    "end": { "line": 10, "column": 79, "offset": 409 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": { "start": { "line": 10, "column": 1, "offset": 331 }, "end": { "line": 10, "column": 79, "offset": 409 }, "indent": [] }
                    },
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "https://github.com/bgoonz/Lambda-Resource-Static-Assets",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "Lambda Site Static Content Server",
                                                "position": {
                                                    "start": { "line": 11, "column": 6, "offset": 415 },
                                                    "end": { "line": 11, "column": 39, "offset": 448 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 11, "column": 5, "offset": 414 },
                                            "end": { "line": 11, "column": 97, "offset": 506 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 11, "column": 5, "offset": 414 },
                                    "end": { "line": 11, "column": 97, "offset": 506 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": { "start": { "line": 11, "column": 1, "offset": 410 }, "end": { "line": 11, "column": 97, "offset": 506 }, "indent": [] }
                    },
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "https://github.com/bgoonz/mini-project-showcase",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "Mini-Project Showcase",
                                                "position": {
                                                    "start": { "line": 12, "column": 6, "offset": 512 },
                                                    "end": { "line": 12, "column": 27, "offset": 533 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 12, "column": 5, "offset": 511 },
                                            "end": { "line": 12, "column": 77, "offset": 583 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 12, "column": 5, "offset": 511 },
                                    "end": { "line": 12, "column": 77, "offset": 583 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": { "start": { "line": 12, "column": 1, "offset": 507 }, "end": { "line": 12, "column": 77, "offset": 583 }, "indent": [] }
                    },
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "https://github.com/bgoonz/Useful-Snippets-js",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "Useful Snippets",
                                                "position": {
                                                    "start": { "line": 13, "column": 6, "offset": 589 },
                                                    "end": { "line": 13, "column": 21, "offset": 604 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 13, "column": 5, "offset": 588 },
                                            "end": { "line": 13, "column": 68, "offset": 651 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 13, "column": 5, "offset": 588 },
                                    "end": { "line": 13, "column": 68, "offset": 651 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": { "start": { "line": 13, "column": 1, "offset": 584 }, "end": { "line": 13, "column": 68, "offset": 651 }, "indent": [] }
                    },
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "https://github.com/bgoonz/Markdown-Templates",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "Markdown Templates",
                                                "position": {
                                                    "start": { "line": 14, "column": 6, "offset": 657 },
                                                    "end": { "line": 14, "column": 24, "offset": 675 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 14, "column": 5, "offset": 656 },
                                            "end": { "line": 14, "column": 71, "offset": 722 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 14, "column": 5, "offset": 656 },
                                    "end": { "line": 14, "column": 71, "offset": 722 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": { "start": { "line": 14, "column": 1, "offset": 652 }, "end": { "line": 14, "column": 71, "offset": 722 }, "indent": [] }
                    },
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "https://github.com/bgoonz/zumzi-chat-messenger",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "Zumzi Video Conferencing App (mesibo api backend)",
                                                "position": {
                                                    "start": { "line": 15, "column": 6, "offset": 728 },
                                                    "end": { "line": 15, "column": 55, "offset": 777 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 15, "column": 5, "offset": 727 },
                                            "end": { "line": 15, "column": 104, "offset": 826 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 15, "column": 5, "offset": 727 },
                                    "end": { "line": 15, "column": 104, "offset": 826 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": { "start": { "line": 15, "column": 1, "offset": 723 }, "end": { "line": 15, "column": 104, "offset": 826 }, "indent": [] }
                    }
                ],
                "position": {
                    "start": { "line": 6, "column": 1, "offset": 74 },
                    "end": { "line": 15, "column": 104, "offset": 826 },
                    "indent": [1, 1, 1, 1, 1, 1, 1, 1, 1]
                }
            },
            {
                "type": "heading",
                "depth": 1,
                "children": [
                    {
                        "type": "text",
                        "value": "Core Concepts",
                        "position": { "start": { "line": 17, "column": 3, "offset": 830 }, "end": { "line": 17, "column": 16, "offset": 843 }, "indent": [] }
                    }
                ],
                "position": { "start": { "line": 17, "column": 1, "offset": 828 }, "end": { "line": 17, "column": 16, "offset": 843 }, "indent": [] }
            },
            {
                "type": "heading",
                "depth": 1,
                "children": [
                    {
                        "type": "text",
                        "value": "index",
                        "position": { "start": { "line": 19, "column": 3, "offset": 847 }, "end": { "line": 19, "column": 8, "offset": 852 }, "indent": [] }
                    }
                ],
                "position": { "start": { "line": 19, "column": 1, "offset": 845 }, "end": { "line": 19, "column": 8, "offset": 852 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "This appendix is a non-exhaustive list of new syntactic features and methods that were added to JavaScript in ES6. These features are the most commonly used and most helpful.",
                        "position": { "start": { "line": 21, "column": 1, "offset": 854 }, "end": { "line": 21, "column": 175, "offset": 1028 }, "indent": [] }
                    }
                ],
                "position": { "start": { "line": 21, "column": 1, "offset": 854 }, "end": { "line": 21, "column": 175, "offset": 1028 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "While this appendix doesn't cover ES6 classes, we go over the basics while learning about components in the book. In addition, this appendix doesn't include descriptions of some larger new features like promises and generators. If you'd like more info on those or on any topic below, we encourage you to reference the ",
                        "position": { "start": { "line": 23, "column": 1, "offset": 1030 }, "end": { "line": 23, "column": 319, "offset": 1348 }, "indent": [] }
                    },
                    {
                        "type": "link",
                        "title": null,
                        "url": "https://developer.mozilla.org/",
                        "children": [
                            {
                                "type": "text",
                                "value": "Mozilla Developer Network's website",
                                "position": {
                                    "start": { "line": 23, "column": 320, "offset": 1349 },
                                    "end": { "line": 23, "column": 355, "offset": 1384 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 23, "column": 319, "offset": 1348 },
                            "end": { "line": 23, "column": 388, "offset": 1417 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": " ",
                        "position": {
                            "start": { "line": 23, "column": 388, "offset": 1417 },
                            "end": { "line": 23, "column": 389, "offset": 1418 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": "(",
                        "position": {
                            "start": { "line": 23, "column": 389, "offset": 1418 },
                            "end": { "line": 23, "column": 391, "offset": 1420 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": "MDN",
                        "position": {
                            "start": { "line": 23, "column": 391, "offset": 1420 },
                            "end": { "line": 23, "column": 394, "offset": 1423 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": ")",
                        "position": {
                            "start": { "line": 23, "column": 394, "offset": 1423 },
                            "end": { "line": 23, "column": 396, "offset": 1425 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": ".",
                        "position": {
                            "start": { "line": 23, "column": 396, "offset": 1425 },
                            "end": { "line": 23, "column": 397, "offset": 1426 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 23, "column": 1, "offset": 1030 }, "end": { "line": 23, "column": 397, "offset": 1426 }, "indent": [] }
            },
            {
                "type": "heading",
                "depth": 2,
                "children": [
                    {
                        "type": "text",
                        "value": "Prefer ",
                        "position": { "start": { "line": 25, "column": 4, "offset": 1431 }, "end": { "line": 25, "column": 11, "offset": 1438 }, "indent": [] }
                    },
                    {
                        "type": "inlineCode",
                        "value": "const",
                        "position": { "start": { "line": 25, "column": 11, "offset": 1438 }, "end": { "line": 25, "column": 18, "offset": 1445 }, "indent": [] }
                    },
                    {
                        "type": "text",
                        "value": " and ",
                        "position": { "start": { "line": 25, "column": 18, "offset": 1445 }, "end": { "line": 25, "column": 23, "offset": 1450 }, "indent": [] }
                    },
                    {
                        "type": "inlineCode",
                        "value": "let",
                        "position": { "start": { "line": 25, "column": 23, "offset": 1450 }, "end": { "line": 25, "column": 28, "offset": 1455 }, "indent": [] }
                    },
                    {
                        "type": "text",
                        "value": " over ",
                        "position": { "start": { "line": 25, "column": 28, "offset": 1455 }, "end": { "line": 25, "column": 34, "offset": 1461 }, "indent": [] }
                    },
                    {
                        "type": "inlineCode",
                        "value": "var",
                        "position": { "start": { "line": 25, "column": 34, "offset": 1461 }, "end": { "line": 25, "column": 39, "offset": 1466 }, "indent": [] }
                    }
                ],
                "position": { "start": { "line": 25, "column": 1, "offset": 1428 }, "end": { "line": 25, "column": 39, "offset": 1466 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "If you've worked with ES5 JavaScript before, you're likely used to seeing variables declared with ",
                        "position": { "start": { "line": 27, "column": 1, "offset": 1468 }, "end": { "line": 27, "column": 99, "offset": 1566 }, "indent": [] }
                    },
                    {
                        "type": "inlineCode",
                        "value": "var",
                        "position": {
                            "start": { "line": 27, "column": 99, "offset": 1566 },
                            "end": { "line": 27, "column": 104, "offset": 1571 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": ":",
                        "position": {
                            "start": { "line": 27, "column": 104, "offset": 1571 },
                            "end": { "line": 27, "column": 105, "offset": 1572 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 27, "column": 1, "offset": 1468 }, "end": { "line": 27, "column": 105, "offset": 1572 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": "js",
                "meta": null,
                "value": "ar myVariable = 5;",
                "position": { "start": { "line": 29, "column": 1, "offset": 1574 }, "end": { "line": 31, "column": 4, "offset": 1602 }, "indent": [1, 1] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "Both the ",
                        "position": { "start": { "line": 33, "column": 1, "offset": 1604 }, "end": { "line": 33, "column": 10, "offset": 1613 }, "indent": [] }
                    },
                    {
                        "type": "inlineCode",
                        "value": "const",
                        "position": { "start": { "line": 33, "column": 10, "offset": 1613 }, "end": { "line": 33, "column": 17, "offset": 1620 }, "indent": [] }
                    },
                    {
                        "type": "text",
                        "value": " and ",
                        "position": { "start": { "line": 33, "column": 17, "offset": 1620 }, "end": { "line": 33, "column": 22, "offset": 1625 }, "indent": [] }
                    },
                    {
                        "type": "inlineCode",
                        "value": "let",
                        "position": { "start": { "line": 33, "column": 22, "offset": 1625 }, "end": { "line": 33, "column": 27, "offset": 1630 }, "indent": [] }
                    },
                    {
                        "type": "text",
                        "value": " statements also declare variables. They were introduced in ES6.",
                        "position": { "start": { "line": 33, "column": 27, "offset": 1630 }, "end": { "line": 33, "column": 91, "offset": 1694 }, "indent": [] }
                    }
                ],
                "position": { "start": { "line": 33, "column": 1, "offset": 1604 }, "end": { "line": 33, "column": 91, "offset": 1694 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "Use ",
                        "position": { "start": { "line": 35, "column": 1, "offset": 1696 }, "end": { "line": 35, "column": 5, "offset": 1700 }, "indent": [] }
                    },
                    {
                        "type": "inlineCode",
                        "value": "const",
                        "position": { "start": { "line": 35, "column": 5, "offset": 1700 }, "end": { "line": 35, "column": 12, "offset": 1707 }, "indent": [] }
                    },
                    {
                        "type": "text",
                        "value": " in cases where a variable is never re-assigned. Using ",
                        "position": { "start": { "line": 35, "column": 12, "offset": 1707 }, "end": { "line": 35, "column": 67, "offset": 1762 }, "indent": [] }
                    },
                    {
                        "type": "inlineCode",
                        "value": "const",
                        "position": { "start": { "line": 35, "column": 67, "offset": 1762 }, "end": { "line": 35, "column": 74, "offset": 1769 }, "indent": [] }
                    },
                    {
                        "type": "text",
                        "value": " makes this clear to whoever is reading your code. It refers to the \"constant\" state of the variable in the context it is defined within.",
                        "position": {
                            "start": { "line": 35, "column": 74, "offset": 1769 },
                            "end": { "line": 35, "column": 211, "offset": 1906 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 35, "column": 1, "offset": 1696 }, "end": { "line": 35, "column": 211, "offset": 1906 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "If the variable will be re-assigned, use ",
                        "position": { "start": { "line": 37, "column": 1, "offset": 1908 }, "end": { "line": 37, "column": 42, "offset": 1949 }, "indent": [] }
                    },
                    {
                        "type": "inlineCode",
                        "value": "let",
                        "position": { "start": { "line": 37, "column": 42, "offset": 1949 }, "end": { "line": 37, "column": 47, "offset": 1954 }, "indent": [] }
                    },
                    {
                        "type": "text",
                        "value": ".",
                        "position": { "start": { "line": 37, "column": 47, "offset": 1954 }, "end": { "line": 37, "column": 48, "offset": 1955 }, "indent": [] }
                    }
                ],
                "position": { "start": { "line": 37, "column": 1, "offset": 1908 }, "end": { "line": 37, "column": 48, "offset": 1955 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "We encourage the use of ",
                        "position": { "start": { "line": 39, "column": 1, "offset": 1957 }, "end": { "line": 39, "column": 25, "offset": 1981 }, "indent": [] }
                    },
                    {
                        "type": "inlineCode",
                        "value": "const",
                        "position": { "start": { "line": 39, "column": 25, "offset": 1981 }, "end": { "line": 39, "column": 32, "offset": 1988 }, "indent": [] }
                    },
                    {
                        "type": "text",
                        "value": " and ",
                        "position": { "start": { "line": 39, "column": 32, "offset": 1988 }, "end": { "line": 39, "column": 37, "offset": 1993 }, "indent": [] }
                    },
                    {
                        "type": "inlineCode",
                        "value": "let",
                        "position": { "start": { "line": 39, "column": 37, "offset": 1993 }, "end": { "line": 39, "column": 42, "offset": 1998 }, "indent": [] }
                    },
                    {
                        "type": "text",
                        "value": " instead of ",
                        "position": { "start": { "line": 39, "column": 42, "offset": 1998 }, "end": { "line": 39, "column": 54, "offset": 2010 }, "indent": [] }
                    },
                    {
                        "type": "inlineCode",
                        "value": "var",
                        "position": { "start": { "line": 39, "column": 54, "offset": 2010 }, "end": { "line": 39, "column": 59, "offset": 2015 }, "indent": [] }
                    },
                    {
                        "type": "text",
                        "value": ". In addition to the restriction introduced by ",
                        "position": {
                            "start": { "line": 39, "column": 59, "offset": 2015 },
                            "end": { "line": 39, "column": 106, "offset": 2062 },
                            "indent": []
                        }
                    },
                    {
                        "type": "inlineCode",
                        "value": "const",
                        "position": {
                            "start": { "line": 39, "column": 106, "offset": 2062 },
                            "end": { "line": 39, "column": 113, "offset": 2069 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": ", both ",
                        "position": {
                            "start": { "line": 39, "column": 113, "offset": 2069 },
                            "end": { "line": 39, "column": 120, "offset": 2076 },
                            "indent": []
                        }
                    },
                    {
                        "type": "inlineCode",
                        "value": "const",
                        "position": {
                            "start": { "line": 39, "column": 120, "offset": 2076 },
                            "end": { "line": 39, "column": 127, "offset": 2083 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": " and ",
                        "position": {
                            "start": { "line": 39, "column": 127, "offset": 2083 },
                            "end": { "line": 39, "column": 132, "offset": 2088 },
                            "indent": []
                        }
                    },
                    {
                        "type": "inlineCode",
                        "value": "let",
                        "position": {
                            "start": { "line": 39, "column": 132, "offset": 2088 },
                            "end": { "line": 39, "column": 137, "offset": 2093 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": " are ",
                        "position": {
                            "start": { "line": 39, "column": 137, "offset": 2093 },
                            "end": { "line": 39, "column": 142, "offset": 2098 },
                            "indent": []
                        }
                    },
                    {
                        "type": "emphasis",
                        "children": [
                            {
                                "type": "text",
                                "value": "block scoped",
                                "position": {
                                    "start": { "line": 39, "column": 143, "offset": 2099 },
                                    "end": { "line": 39, "column": 155, "offset": 2111 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 39, "column": 142, "offset": 2098 },
                            "end": { "line": 39, "column": 156, "offset": 2112 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": " as opposed to ",
                        "position": {
                            "start": { "line": 39, "column": 156, "offset": 2112 },
                            "end": { "line": 39, "column": 171, "offset": 2127 },
                            "indent": []
                        }
                    },
                    {
                        "type": "emphasis",
                        "children": [
                            {
                                "type": "text",
                                "value": "function scoped",
                                "position": {
                                    "start": { "line": 39, "column": 172, "offset": 2128 },
                                    "end": { "line": 39, "column": 187, "offset": 2143 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 39, "column": 171, "offset": 2127 },
                            "end": { "line": 39, "column": 188, "offset": 2144 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": ". This scoping can help avoid unexpected bugs.",
                        "position": {
                            "start": { "line": 39, "column": 188, "offset": 2144 },
                            "end": { "line": 39, "column": 234, "offset": 2190 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 39, "column": 1, "offset": 1957 }, "end": { "line": 39, "column": 234, "offset": 2190 }, "indent": [] }
            },
            {
                "type": "heading",
                "depth": 2,
                "children": [
                    {
                        "type": "text",
                        "value": "Arrow functions",
                        "position": { "start": { "line": 41, "column": 4, "offset": 2195 }, "end": { "line": 41, "column": 19, "offset": 2210 }, "indent": [] }
                    }
                ],
                "position": { "start": { "line": 41, "column": 1, "offset": 2192 }, "end": { "line": 41, "column": 19, "offset": 2210 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "There are three ways to write arrow function bodies. For the examples below, let's say we have an array of city objects:",
                        "position": { "start": { "line": 43, "column": 1, "offset": 2212 }, "end": { "line": 43, "column": 121, "offset": 2332 }, "indent": [] }
                    }
                ],
                "position": { "start": { "line": 43, "column": 1, "offset": 2212 }, "end": { "line": 43, "column": 121, "offset": 2332 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": "js",
                "meta": null,
                "value": "onst cities = [\n  { name: 'Cairo', pop: 7764700 },\n  { name: 'Lagos', pop: 8029200 },\n];",
                "position": {
                    "start": { "line": 45, "column": 1, "offset": 2334 },
                    "end": { "line": 50, "column": 4, "offset": 2432 },
                    "indent": [1, 1, 1, 1, 1]
                }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "If we write an arrow function that spans multiple lines, we must use braces to delimit the function body like this:",
                        "position": { "start": { "line": 52, "column": 1, "offset": 2434 }, "end": { "line": 52, "column": 116, "offset": 2549 }, "indent": [] }
                    }
                ],
                "position": { "start": { "line": 52, "column": 1, "offset": 2434 }, "end": { "line": 52, "column": 116, "offset": 2549 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": "js",
                "meta": null,
                "value": "const formattedPopulations = cities.map((city) => {\n    const popMM = (city.pop / 1000000).toFixed(2);\n    return popMM + ' million';\n});\nconsole.log(formattedPopulations);",
                "position": {
                    "start": { "line": 54, "column": 1, "offset": 2551 },
                    "end": { "line": 60, "column": 4, "offset": 2733 },
                    "indent": [1, 1, 1, 1, 1, 1]
                }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "Note that we must also explicitly specify a ",
                        "position": { "start": { "line": 62, "column": 1, "offset": 2735 }, "end": { "line": 62, "column": 45, "offset": 2779 }, "indent": [] }
                    },
                    {
                        "type": "inlineCode",
                        "value": "return",
                        "position": { "start": { "line": 62, "column": 45, "offset": 2779 }, "end": { "line": 62, "column": 53, "offset": 2787 }, "indent": [] }
                    },
                    {
                        "type": "text",
                        "value": " for the function.",
                        "position": { "start": { "line": 62, "column": 53, "offset": 2787 }, "end": { "line": 62, "column": 71, "offset": 2805 }, "indent": [] }
                    }
                ],
                "position": { "start": { "line": 62, "column": 1, "offset": 2735 }, "end": { "line": 62, "column": 71, "offset": 2805 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "However, if we write a function body that is only a single line ",
                        "position": { "start": { "line": 64, "column": 1, "offset": 2807 }, "end": { "line": 64, "column": 65, "offset": 2871 }, "indent": [] }
                    },
                    {
                        "type": "text",
                        "value": "(",
                        "position": { "start": { "line": 64, "column": 65, "offset": 2871 }, "end": { "line": 64, "column": 67, "offset": 2873 }, "indent": [] }
                    },
                    {
                        "type": "text",
                        "value": "or single expression",
                        "position": { "start": { "line": 64, "column": 67, "offset": 2873 }, "end": { "line": 64, "column": 87, "offset": 2893 }, "indent": [] }
                    },
                    {
                        "type": "text",
                        "value": ")",
                        "position": { "start": { "line": 64, "column": 87, "offset": 2893 }, "end": { "line": 64, "column": 89, "offset": 2895 }, "indent": [] }
                    },
                    {
                        "type": "text",
                        "value": " we can use parentheses to delimit it:",
                        "position": {
                            "start": { "line": 64, "column": 89, "offset": 2895 },
                            "end": { "line": 64, "column": 127, "offset": 2933 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 64, "column": 1, "offset": 2807 }, "end": { "line": 64, "column": 127, "offset": 2933 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": "js",
                "meta": null,
                "value": "const formattedPopulations2 = cities.map((city) => (city.pop / 1000000).toFixed(2) + ' million');",
                "position": { "start": { "line": 66, "column": 1, "offset": 2935 }, "end": { "line": 68, "column": 4, "offset": 3042 }, "indent": [1, 1] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "Notably, we don't use ",
                        "position": { "start": { "line": 70, "column": 1, "offset": 3044 }, "end": { "line": 70, "column": 23, "offset": 3066 }, "indent": [] }
                    },
                    {
                        "type": "inlineCode",
                        "value": "return",
                        "position": { "start": { "line": 70, "column": 23, "offset": 3066 }, "end": { "line": 70, "column": 31, "offset": 3074 }, "indent": [] }
                    },
                    {
                        "type": "text",
                        "value": " as it's implied.",
                        "position": { "start": { "line": 70, "column": 31, "offset": 3074 }, "end": { "line": 70, "column": 48, "offset": 3091 }, "indent": [] }
                    }
                ],
                "position": { "start": { "line": 70, "column": 1, "offset": 3044 }, "end": { "line": 70, "column": 48, "offset": 3091 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "Furthermore, if your function body is terse you can write it like so:",
                        "position": { "start": { "line": 72, "column": 1, "offset": 3093 }, "end": { "line": 72, "column": 70, "offset": 3162 }, "indent": [] }
                    }
                ],
                "position": { "start": { "line": 72, "column": 1, "offset": 3093 }, "end": { "line": 72, "column": 70, "offset": 3162 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": "js",
                "meta": null,
                "value": "const pops = cities.map((city) => city.pop);\nconsole.log(pops);",
                "position": { "start": { "line": 74, "column": 1, "offset": 3164 }, "end": { "line": 77, "column": 4, "offset": 3237 }, "indent": [1, 1, 1] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "The terseness of arrow functions is one of two reasons that we use them. Compare the one-liner above to this:",
                        "position": { "start": { "line": 79, "column": 1, "offset": 3239 }, "end": { "line": 79, "column": 110, "offset": 3348 }, "indent": [] }
                    }
                ],
                "position": { "start": { "line": 79, "column": 1, "offset": 3239 }, "end": { "line": 79, "column": 110, "offset": 3348 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": "js",
                "meta": null,
                "value": "const popsNoArrow = cities.map(function (city) {\n    return city.pop;\n});",
                "position": { "start": { "line": 81, "column": 1, "offset": 3350 }, "end": { "line": 85, "column": 4, "offset": 3433 }, "indent": [1, 1, 1, 1] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "Of greater benefit, though, is how arrow functions bind the ",
                        "position": { "start": { "line": 87, "column": 1, "offset": 3435 }, "end": { "line": 87, "column": 61, "offset": 3495 }, "indent": [] }
                    },
                    {
                        "type": "inlineCode",
                        "value": "this",
                        "position": { "start": { "line": 87, "column": 61, "offset": 3495 }, "end": { "line": 87, "column": 67, "offset": 3501 }, "indent": [] }
                    },
                    {
                        "type": "text",
                        "value": " object.",
                        "position": { "start": { "line": 87, "column": 67, "offset": 3501 }, "end": { "line": 87, "column": 75, "offset": 3509 }, "indent": [] }
                    }
                ],
                "position": { "start": { "line": 87, "column": 1, "offset": 3435 }, "end": { "line": 87, "column": 75, "offset": 3509 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "The traditional JavaScript function declaration syntax ",
                        "position": { "start": { "line": 89, "column": 1, "offset": 3511 }, "end": { "line": 89, "column": 56, "offset": 3566 }, "indent": [] }
                    },
                    {
                        "type": "text",
                        "value": "(",
                        "position": { "start": { "line": 89, "column": 56, "offset": 3566 }, "end": { "line": 89, "column": 58, "offset": 3568 }, "indent": [] }
                    },
                    {
                        "type": "inlineCode",
                        "value": "function () {}",
                        "position": { "start": { "line": 89, "column": 58, "offset": 3568 }, "end": { "line": 89, "column": 74, "offset": 3584 }, "indent": [] }
                    },
                    {
                        "type": "text",
                        "value": ")",
                        "position": { "start": { "line": 89, "column": 74, "offset": 3584 }, "end": { "line": 89, "column": 76, "offset": 3586 }, "indent": [] }
                    },
                    {
                        "type": "text",
                        "value": " will bind ",
                        "position": { "start": { "line": 89, "column": 76, "offset": 3586 }, "end": { "line": 89, "column": 87, "offset": 3597 }, "indent": [] }
                    },
                    {
                        "type": "inlineCode",
                        "value": "this",
                        "position": { "start": { "line": 89, "column": 87, "offset": 3597 }, "end": { "line": 89, "column": 93, "offset": 3603 }, "indent": [] }
                    },
                    {
                        "type": "text",
                        "value": " in anonymous functions to the global object. To illustrate the confusion this causes, consider the following example:",
                        "position": {
                            "start": { "line": 89, "column": 93, "offset": 3603 },
                            "end": { "line": 89, "column": 211, "offset": 3721 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 89, "column": 1, "offset": 3511 }, "end": { "line": 89, "column": 211, "offset": 3721 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": "js",
                "meta": null,
                "value": "unction printSong() {\n  console.log(\"Oops - The Global Object\");\n}\n\nconst jukebox = {\n  songs: [\n    {\n      title: \"Wanna Be Startin' Somethin'\",\n      artist: \"Michael Jackson\",\n    },\n    {\n      title: \"Superstar\",\n      artist: \"Madonna\",\n    },\n  ],\n  printSong: function (song) {\n    console.log(song.title + \" - \" + song.artist);\n  },\n  printSongs: function () {\n\n    this.songs.forEach(function(song) {\n\n      this.printSong(song);\n    });\n  },\n}\n\njukebox.printSongs();",
                "position": {
                    "start": { "line": 91, "column": 1, "offset": 3723 },
                    "end": { "line": 120, "column": 4, "offset": 4211 },
                    "indent": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
                }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "The method ",
                        "position": {
                            "start": { "line": 122, "column": 1, "offset": 4213 },
                            "end": { "line": 122, "column": 12, "offset": 4224 },
                            "indent": []
                        }
                    },
                    {
                        "type": "inlineCode",
                        "value": "printSongs()",
                        "position": {
                            "start": { "line": 122, "column": 12, "offset": 4224 },
                            "end": { "line": 122, "column": 26, "offset": 4238 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": " iterates over ",
                        "position": {
                            "start": { "line": 122, "column": 26, "offset": 4238 },
                            "end": { "line": 122, "column": 41, "offset": 4253 },
                            "indent": []
                        }
                    },
                    {
                        "type": "inlineCode",
                        "value": "this.songs",
                        "position": {
                            "start": { "line": 122, "column": 41, "offset": 4253 },
                            "end": { "line": 122, "column": 53, "offset": 4265 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": " with ",
                        "position": {
                            "start": { "line": 122, "column": 53, "offset": 4265 },
                            "end": { "line": 122, "column": 59, "offset": 4271 },
                            "indent": []
                        }
                    },
                    {
                        "type": "inlineCode",
                        "value": "forEach()",
                        "position": {
                            "start": { "line": 122, "column": 59, "offset": 4271 },
                            "end": { "line": 122, "column": 70, "offset": 4282 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": ". In this context, ",
                        "position": {
                            "start": { "line": 122, "column": 70, "offset": 4282 },
                            "end": { "line": 122, "column": 89, "offset": 4301 },
                            "indent": []
                        }
                    },
                    {
                        "type": "inlineCode",
                        "value": "this",
                        "position": {
                            "start": { "line": 122, "column": 89, "offset": 4301 },
                            "end": { "line": 122, "column": 95, "offset": 4307 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": " is bound to the object ",
                        "position": {
                            "start": { "line": 122, "column": 95, "offset": 4307 },
                            "end": { "line": 122, "column": 119, "offset": 4331 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": "(",
                        "position": {
                            "start": { "line": 122, "column": 119, "offset": 4331 },
                            "end": { "line": 122, "column": 121, "offset": 4333 },
                            "indent": []
                        }
                    },
                    {
                        "type": "inlineCode",
                        "value": "jukebox",
                        "position": {
                            "start": { "line": 122, "column": 121, "offset": 4333 },
                            "end": { "line": 122, "column": 130, "offset": 4342 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": ")",
                        "position": {
                            "start": { "line": 122, "column": 130, "offset": 4342 },
                            "end": { "line": 122, "column": 132, "offset": 4344 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": " as expected. However, the anonymous function passed to ",
                        "position": {
                            "start": { "line": 122, "column": 132, "offset": 4344 },
                            "end": { "line": 122, "column": 188, "offset": 4400 },
                            "indent": []
                        }
                    },
                    {
                        "type": "inlineCode",
                        "value": "forEach()",
                        "position": {
                            "start": { "line": 122, "column": 188, "offset": 4400 },
                            "end": { "line": 122, "column": 199, "offset": 4411 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": " binds its internal ",
                        "position": {
                            "start": { "line": 122, "column": 199, "offset": 4411 },
                            "end": { "line": 122, "column": 219, "offset": 4431 },
                            "indent": []
                        }
                    },
                    {
                        "type": "inlineCode",
                        "value": "this",
                        "position": {
                            "start": { "line": 122, "column": 219, "offset": 4431 },
                            "end": { "line": 122, "column": 225, "offset": 4437 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": " to the global object. As such, ",
                        "position": {
                            "start": { "line": 122, "column": 225, "offset": 4437 },
                            "end": { "line": 122, "column": 257, "offset": 4469 },
                            "indent": []
                        }
                    },
                    {
                        "type": "inlineCode",
                        "value": "this.printSong(song)",
                        "position": {
                            "start": { "line": 122, "column": 257, "offset": 4469 },
                            "end": { "line": 122, "column": 279, "offset": 4491 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": " calls the function declared at the top of the example, ",
                        "position": {
                            "start": { "line": 122, "column": 279, "offset": 4491 },
                            "end": { "line": 122, "column": 335, "offset": 4547 },
                            "indent": []
                        }
                    },
                    {
                        "type": "emphasis",
                        "children": [
                            {
                                "type": "text",
                                "value": "not",
                                "position": {
                                    "start": { "line": 122, "column": 336, "offset": 4548 },
                                    "end": { "line": 122, "column": 339, "offset": 4551 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 122, "column": 335, "offset": 4547 },
                            "end": { "line": 122, "column": 340, "offset": 4552 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": " the method on ",
                        "position": {
                            "start": { "line": 122, "column": 340, "offset": 4552 },
                            "end": { "line": 122, "column": 355, "offset": 4567 },
                            "indent": []
                        }
                    },
                    {
                        "type": "inlineCode",
                        "value": "jukebox",
                        "position": {
                            "start": { "line": 122, "column": 355, "offset": 4567 },
                            "end": { "line": 122, "column": 364, "offset": 4576 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": ".",
                        "position": {
                            "start": { "line": 122, "column": 364, "offset": 4576 },
                            "end": { "line": 122, "column": 365, "offset": 4577 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 122, "column": 1, "offset": 4213 }, "end": { "line": 122, "column": 365, "offset": 4577 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "JavaScript developers have traditionally used workarounds for this behavior, but arrow functions solve the problem by ",
                        "position": {
                            "start": { "line": 124, "column": 1, "offset": 4579 },
                            "end": { "line": 124, "column": 119, "offset": 4697 },
                            "indent": []
                        }
                    },
                    {
                        "type": "strong",
                        "children": [
                            {
                                "type": "text",
                                "value": "capturing the ",
                                "position": {
                                    "start": { "line": 124, "column": 121, "offset": 4699 },
                                    "end": { "line": 124, "column": 135, "offset": 4713 },
                                    "indent": []
                                }
                            },
                            {
                                "type": "inlineCode",
                                "value": "this",
                                "position": {
                                    "start": { "line": 124, "column": 135, "offset": 4713 },
                                    "end": { "line": 124, "column": 141, "offset": 4719 },
                                    "indent": []
                                }
                            },
                            {
                                "type": "text",
                                "value": " value of the enclosing context",
                                "position": {
                                    "start": { "line": 124, "column": 141, "offset": 4719 },
                                    "end": { "line": 124, "column": 172, "offset": 4750 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 124, "column": 119, "offset": 4697 },
                            "end": { "line": 124, "column": 174, "offset": 4752 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": ". Using an arrow function for ",
                        "position": {
                            "start": { "line": 124, "column": 174, "offset": 4752 },
                            "end": { "line": 124, "column": 204, "offset": 4782 },
                            "indent": []
                        }
                    },
                    {
                        "type": "inlineCode",
                        "value": "printSongs()",
                        "position": {
                            "start": { "line": 124, "column": 204, "offset": 4782 },
                            "end": { "line": 124, "column": 218, "offset": 4796 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": " has the expected result:",
                        "position": {
                            "start": { "line": 124, "column": 218, "offset": 4796 },
                            "end": { "line": 124, "column": 243, "offset": 4821 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 124, "column": 1, "offset": 4579 }, "end": { "line": 124, "column": 243, "offset": 4821 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": "js",
                "meta": null,
                "value": "  printSongs: function () {\n    this.songs.forEach((song) => {\n\n      this.printSong(song);\n    });\n  },\n}\n\njukebox.printSongs();",
                "position": {
                    "start": { "line": 126, "column": 1, "offset": 4823 },
                    "end": { "line": 136, "column": 4, "offset": 4962 },
                    "indent": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
                }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "For this reason, throughout the book we use arrow functions for all anonymous functions.",
                        "position": {
                            "start": { "line": 138, "column": 1, "offset": 4964 },
                            "end": { "line": 138, "column": 89, "offset": 5052 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 138, "column": 1, "offset": 4964 }, "end": { "line": 138, "column": 89, "offset": 5052 }, "indent": [] }
            },
            {
                "type": "heading",
                "depth": 2,
                "children": [
                    {
                        "type": "text",
                        "value": "Modules",
                        "position": {
                            "start": { "line": 140, "column": 4, "offset": 5057 },
                            "end": { "line": 140, "column": 11, "offset": 5064 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 140, "column": 1, "offset": 5054 }, "end": { "line": 140, "column": 11, "offset": 5064 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "ES6 formally supports modules using the ",
                        "position": {
                            "start": { "line": 142, "column": 1, "offset": 5066 },
                            "end": { "line": 142, "column": 41, "offset": 5106 },
                            "indent": []
                        }
                    },
                    {
                        "type": "inlineCode",
                        "value": "import",
                        "position": {
                            "start": { "line": 142, "column": 41, "offset": 5106 },
                            "end": { "line": 142, "column": 49, "offset": 5114 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": "/",
                        "position": {
                            "start": { "line": 142, "column": 49, "offset": 5114 },
                            "end": { "line": 142, "column": 50, "offset": 5115 },
                            "indent": []
                        }
                    },
                    {
                        "type": "inlineCode",
                        "value": "export",
                        "position": {
                            "start": { "line": 142, "column": 50, "offset": 5115 },
                            "end": { "line": 142, "column": 58, "offset": 5123 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": " syntax.",
                        "position": {
                            "start": { "line": 142, "column": 58, "offset": 5123 },
                            "end": { "line": 142, "column": 66, "offset": 5131 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 142, "column": 1, "offset": 5066 }, "end": { "line": 142, "column": 66, "offset": 5131 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "strong",
                        "children": [
                            {
                                "type": "text",
                                "value": "Named exports",
                                "position": {
                                    "start": { "line": 144, "column": 3, "offset": 5135 },
                                    "end": { "line": 144, "column": 16, "offset": 5148 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 144, "column": 1, "offset": 5133 },
                            "end": { "line": 144, "column": 18, "offset": 5150 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 144, "column": 1, "offset": 5133 }, "end": { "line": 144, "column": 18, "offset": 5150 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "Inside any file, you can use ",
                        "position": {
                            "start": { "line": 146, "column": 1, "offset": 5152 },
                            "end": { "line": 146, "column": 30, "offset": 5181 },
                            "indent": []
                        }
                    },
                    {
                        "type": "inlineCode",
                        "value": "export",
                        "position": {
                            "start": { "line": 146, "column": 30, "offset": 5181 },
                            "end": { "line": 146, "column": 38, "offset": 5189 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": " to specify a variable the module should expose. Here's an example of a file that exports two functions:",
                        "position": {
                            "start": { "line": 146, "column": 38, "offset": 5189 },
                            "end": { "line": 146, "column": 142, "offset": 5293 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 146, "column": 1, "offset": 5152 }, "end": { "line": 146, "column": 142, "offset": 5293 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": "js",
                "meta": null,
                "value": "export const sayHi = () => console.log('Hi!');\nexport const sayBye = () => console.log('Bye!');\n\nconst saySomething = () => console.log('Something!');",
                "position": {
                    "start": { "line": 148, "column": 1, "offset": 5295 },
                    "end": { "line": 153, "column": 4, "offset": 5455 },
                    "indent": [1, 1, 1, 1, 1]
                }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "Now, anywhere we wanted to use these functions we could use ",
                        "position": {
                            "start": { "line": 155, "column": 1, "offset": 5457 },
                            "end": { "line": 155, "column": 61, "offset": 5517 },
                            "indent": []
                        }
                    },
                    {
                        "type": "inlineCode",
                        "value": "import",
                        "position": {
                            "start": { "line": 155, "column": 61, "offset": 5517 },
                            "end": { "line": 155, "column": 69, "offset": 5525 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": ". We need to specify which functions we want to import. A common way of doing this is using ES6's destructuring assignment syntax to list them out like this:",
                        "position": {
                            "start": { "line": 155, "column": 69, "offset": 5525 },
                            "end": { "line": 155, "column": 226, "offset": 5682 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 155, "column": 1, "offset": 5457 }, "end": { "line": 155, "column": 226, "offset": 5682 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": "js",
                "meta": null,
                "value": "import { sayHi, sayBye } from './greetings';\n\nsayHi();\nsayBye();",
                "position": {
                    "start": { "line": 157, "column": 1, "offset": 5684 },
                    "end": { "line": 162, "column": 4, "offset": 5758 },
                    "indent": [1, 1, 1, 1, 1]
                }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "Importantly, the function that was ",
                        "position": {
                            "start": { "line": 164, "column": 1, "offset": 5760 },
                            "end": { "line": 164, "column": 36, "offset": 5795 },
                            "indent": []
                        }
                    },
                    {
                        "type": "emphasis",
                        "children": [
                            {
                                "type": "text",
                                "value": "not",
                                "position": {
                                    "start": { "line": 164, "column": 37, "offset": 5796 },
                                    "end": { "line": 164, "column": 40, "offset": 5799 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 164, "column": 36, "offset": 5795 },
                            "end": { "line": 164, "column": 41, "offset": 5800 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": " exported ",
                        "position": {
                            "start": { "line": 164, "column": 41, "offset": 5800 },
                            "end": { "line": 164, "column": 51, "offset": 5810 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": "(",
                        "position": {
                            "start": { "line": 164, "column": 51, "offset": 5810 },
                            "end": { "line": 164, "column": 53, "offset": 5812 },
                            "indent": []
                        }
                    },
                    {
                        "type": "inlineCode",
                        "value": "saySomething",
                        "position": {
                            "start": { "line": 164, "column": 53, "offset": 5812 },
                            "end": { "line": 164, "column": 67, "offset": 5826 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": ")",
                        "position": {
                            "start": { "line": 164, "column": 67, "offset": 5826 },
                            "end": { "line": 164, "column": 69, "offset": 5828 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": " is unavailable outside of the module.",
                        "position": {
                            "start": { "line": 164, "column": 69, "offset": 5828 },
                            "end": { "line": 164, "column": 107, "offset": 5866 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 164, "column": 1, "offset": 5760 }, "end": { "line": 164, "column": 107, "offset": 5866 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "Also note that we supply a ",
                        "position": {
                            "start": { "line": 166, "column": 1, "offset": 5868 },
                            "end": { "line": 166, "column": 28, "offset": 5895 },
                            "indent": []
                        }
                    },
                    {
                        "type": "strong",
                        "children": [
                            {
                                "type": "text",
                                "value": "relative path",
                                "position": {
                                    "start": { "line": 166, "column": 30, "offset": 5897 },
                                    "end": { "line": 166, "column": 43, "offset": 5910 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 166, "column": 28, "offset": 5895 },
                            "end": { "line": 166, "column": 45, "offset": 5912 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": " to ",
                        "position": {
                            "start": { "line": 166, "column": 45, "offset": 5912 },
                            "end": { "line": 166, "column": 49, "offset": 5916 },
                            "indent": []
                        }
                    },
                    {
                        "type": "inlineCode",
                        "value": "from",
                        "position": {
                            "start": { "line": 166, "column": 49, "offset": 5916 },
                            "end": { "line": 166, "column": 55, "offset": 5922 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": ", indicating that the ES6 module is a local file as opposed to an npm package.",
                        "position": {
                            "start": { "line": 166, "column": 55, "offset": 5922 },
                            "end": { "line": 166, "column": 133, "offset": 6000 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 166, "column": 1, "offset": 5868 }, "end": { "line": 166, "column": 133, "offset": 6000 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "Instead of inserting an ",
                        "position": {
                            "start": { "line": 168, "column": 1, "offset": 6002 },
                            "end": { "line": 168, "column": 25, "offset": 6026 },
                            "indent": []
                        }
                    },
                    {
                        "type": "inlineCode",
                        "value": "export",
                        "position": {
                            "start": { "line": 168, "column": 25, "offset": 6026 },
                            "end": { "line": 168, "column": 33, "offset": 6034 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": " before each variable you'd like to export, you can use this syntax to list off all the exposed variables in one area:",
                        "position": {
                            "start": { "line": 168, "column": 33, "offset": 6034 },
                            "end": { "line": 168, "column": 151, "offset": 6152 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 168, "column": 1, "offset": 6002 }, "end": { "line": 168, "column": 151, "offset": 6152 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": "js",
                "meta": null,
                "value": "const sayHi = () => console.log('Hi!');\nconst sayBye = () => console.log('Bye!');\n\nconst saySomething = () => console.log('Something!');\n\nexport { sayHi, sayBye };",
                "position": {
                    "start": { "line": 170, "column": 1, "offset": 6154 },
                    "end": { "line": 177, "column": 4, "offset": 6327 },
                    "indent": [1, 1, 1, 1, 1, 1, 1]
                }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "We can also specify that we'd like to import all of a module's functionality underneath a given namespace with the ",
                        "position": {
                            "start": { "line": 179, "column": 1, "offset": 6329 },
                            "end": { "line": 179, "column": 116, "offset": 6444 },
                            "indent": []
                        }
                    },
                    {
                        "type": "inlineCode",
                        "value": "import * as <Namespace>",
                        "position": {
                            "start": { "line": 179, "column": 116, "offset": 6444 },
                            "end": { "line": 179, "column": 141, "offset": 6469 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": " syntax:",
                        "position": {
                            "start": { "line": 179, "column": 141, "offset": 6469 },
                            "end": { "line": 179, "column": 149, "offset": 6477 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 179, "column": 1, "offset": 6329 }, "end": { "line": 179, "column": 149, "offset": 6477 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": "js",
                "meta": null,
                "value": "import * as Greetings from './greetings';\n\nGreetings.sayHi();\n\nGreetings.sayBye();\n\nGreetings.saySomething();",
                "position": {
                    "start": { "line": 181, "column": 1, "offset": 6479 },
                    "end": { "line": 189, "column": 4, "offset": 6598 },
                    "indent": [1, 1, 1, 1, 1, 1, 1, 1]
                }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "strong",
                        "children": [
                            {
                                "type": "text",
                                "value": "Default export",
                                "position": {
                                    "start": { "line": 191, "column": 3, "offset": 6602 },
                                    "end": { "line": 191, "column": 17, "offset": 6616 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 191, "column": 1, "offset": 6600 },
                            "end": { "line": 191, "column": 19, "offset": 6618 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 191, "column": 1, "offset": 6600 }, "end": { "line": 191, "column": 19, "offset": 6618 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "The other type of export is a default export. A module can only contain one default export:",
                        "position": {
                            "start": { "line": 193, "column": 1, "offset": 6620 },
                            "end": { "line": 193, "column": 92, "offset": 6711 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 193, "column": 1, "offset": 6620 }, "end": { "line": 193, "column": 92, "offset": 6711 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": "js",
                "meta": null,
                "value": "const sayHi = () => console.log('Hi!');\nconst sayBye = () => console.log('Bye!');\n\nconst saySomething = () => console.log('Something!');\n\nconst Greetings = { sayHi, sayBye };\n\nexport default Greetings;",
                "position": {
                    "start": { "line": 195, "column": 1, "offset": 6713 },
                    "end": { "line": 204, "column": 4, "offset": 6924 },
                    "indent": [1, 1, 1, 1, 1, 1, 1, 1, 1]
                }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "This is a common pattern for libraries. It means you can easily import the library wholesale without specifying what individual functions you want:",
                        "position": {
                            "start": { "line": 206, "column": 1, "offset": 6926 },
                            "end": { "line": 206, "column": 148, "offset": 7073 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 206, "column": 1, "offset": 6926 }, "end": { "line": 206, "column": 148, "offset": 7073 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": "js",
                "meta": null,
                "value": "import Greetings from './greetings';\n\nGreetings.sayHi();\nGreetings.sayBye();",
                "position": {
                    "start": { "line": 208, "column": 1, "offset": 7075 },
                    "end": { "line": 213, "column": 4, "offset": 7161 },
                    "indent": [1, 1, 1, 1, 1]
                }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "It's not uncommon for a module to use a mix of both named exports and default exports. For instance, with ",
                        "position": {
                            "start": { "line": 215, "column": 1, "offset": 7163 },
                            "end": { "line": 215, "column": 107, "offset": 7269 },
                            "indent": []
                        }
                    },
                    {
                        "type": "inlineCode",
                        "value": "react-dom",
                        "position": {
                            "start": { "line": 215, "column": 107, "offset": 7269 },
                            "end": { "line": 215, "column": 118, "offset": 7280 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": ", you can import ",
                        "position": {
                            "start": { "line": 215, "column": 118, "offset": 7280 },
                            "end": { "line": 215, "column": 135, "offset": 7297 },
                            "indent": []
                        }
                    },
                    {
                        "type": "inlineCode",
                        "value": "ReactDOM",
                        "position": {
                            "start": { "line": 215, "column": 135, "offset": 7297 },
                            "end": { "line": 215, "column": 145, "offset": 7307 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": " ",
                        "position": {
                            "start": { "line": 215, "column": 145, "offset": 7307 },
                            "end": { "line": 215, "column": 146, "offset": 7308 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": "(",
                        "position": {
                            "start": { "line": 215, "column": 146, "offset": 7308 },
                            "end": { "line": 215, "column": 148, "offset": 7310 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": "a default export",
                        "position": {
                            "start": { "line": 215, "column": 148, "offset": 7310 },
                            "end": { "line": 215, "column": 164, "offset": 7326 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": ")",
                        "position": {
                            "start": { "line": 215, "column": 164, "offset": 7326 },
                            "end": { "line": 215, "column": 166, "offset": 7328 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": " like this:",
                        "position": {
                            "start": { "line": 215, "column": 166, "offset": 7328 },
                            "end": { "line": 215, "column": 177, "offset": 7339 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 215, "column": 1, "offset": 7163 }, "end": { "line": 215, "column": 177, "offset": 7339 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": "js",
                "meta": null,
                "value": "import ReactDOM from 'react-dom';\n\nReactDOM.render();",
                "position": {
                    "start": { "line": 217, "column": 1, "offset": 7341 },
                    "end": { "line": 221, "column": 4, "offset": 7404 },
                    "indent": [1, 1, 1, 1]
                }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "Or, if you're only going to use the ",
                        "position": {
                            "start": { "line": 223, "column": 1, "offset": 7406 },
                            "end": { "line": 223, "column": 37, "offset": 7442 },
                            "indent": []
                        }
                    },
                    {
                        "type": "inlineCode",
                        "value": "render()",
                        "position": {
                            "start": { "line": 223, "column": 37, "offset": 7442 },
                            "end": { "line": 223, "column": 47, "offset": 7452 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": " function, you can import the named ",
                        "position": {
                            "start": { "line": 223, "column": 47, "offset": 7452 },
                            "end": { "line": 223, "column": 83, "offset": 7488 },
                            "indent": []
                        }
                    },
                    {
                        "type": "inlineCode",
                        "value": "render()",
                        "position": {
                            "start": { "line": 223, "column": 83, "offset": 7488 },
                            "end": { "line": 223, "column": 93, "offset": 7498 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": " function like this:",
                        "position": {
                            "start": { "line": 223, "column": 93, "offset": 7498 },
                            "end": { "line": 223, "column": 113, "offset": 7518 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 223, "column": 1, "offset": 7406 }, "end": { "line": 223, "column": 113, "offset": 7518 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": "js",
                "meta": null,
                "value": "import { render } from 'react-dom';\n\nrender();",
                "position": {
                    "start": { "line": 225, "column": 1, "offset": 7520 },
                    "end": { "line": 229, "column": 4, "offset": 7576 },
                    "indent": [1, 1, 1, 1]
                }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "To achieve this flexibility, the export implementation for ",
                        "position": {
                            "start": { "line": 231, "column": 1, "offset": 7578 },
                            "end": { "line": 231, "column": 60, "offset": 7637 },
                            "indent": []
                        }
                    },
                    {
                        "type": "inlineCode",
                        "value": "react-dom",
                        "position": {
                            "start": { "line": 231, "column": 60, "offset": 7637 },
                            "end": { "line": 231, "column": 71, "offset": 7648 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": " looks something like this:",
                        "position": {
                            "start": { "line": 231, "column": 71, "offset": 7648 },
                            "end": { "line": 231, "column": 98, "offset": 7675 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 231, "column": 1, "offset": 7578 }, "end": { "line": 231, "column": 98, "offset": 7675 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": "js",
                "meta": null,
                "value": "export const render = (component, target) => {};\n\nconst ReactDOM = {\n    render\n};\n\nexport default ReactDOM;",
                "position": {
                    "start": { "line": 233, "column": 1, "offset": 7677 },
                    "end": { "line": 241, "column": 4, "offset": 7795 },
                    "indent": [1, 1, 1, 1, 1, 1, 1, 1]
                }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "If you want to play around with the module syntax, check out the folder ",
                        "position": {
                            "start": { "line": 243, "column": 1, "offset": 7797 },
                            "end": { "line": 243, "column": 73, "offset": 7869 },
                            "indent": []
                        }
                    },
                    {
                        "type": "inlineCode",
                        "value": "code/webpack/es6-modules",
                        "position": {
                            "start": { "line": 243, "column": 73, "offset": 7869 },
                            "end": { "line": 243, "column": 99, "offset": 7895 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": ".",
                        "position": {
                            "start": { "line": 243, "column": 99, "offset": 7895 },
                            "end": { "line": 243, "column": 100, "offset": 7896 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 243, "column": 1, "offset": 7797 }, "end": { "line": 243, "column": 100, "offset": 7896 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "For more reading on ES6 modules, see this article from Mozilla: \"",
                        "position": {
                            "start": { "line": 245, "column": 1, "offset": 7898 },
                            "end": { "line": 245, "column": 66, "offset": 7963 },
                            "indent": []
                        }
                    },
                    {
                        "type": "link",
                        "title": null,
                        "url": "https://hacks.mozilla.org/2015/08/es6-in-depth-modules/",
                        "children": [
                            {
                                "type": "text",
                                "value": "ES6 in Depth: Modules",
                                "position": {
                                    "start": { "line": 245, "column": 67, "offset": 7964 },
                                    "end": { "line": 245, "column": 88, "offset": 7985 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 245, "column": 66, "offset": 7963 },
                            "end": { "line": 245, "column": 146, "offset": 8043 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": "\".",
                        "position": {
                            "start": { "line": 245, "column": 146, "offset": 8043 },
                            "end": { "line": 245, "column": 148, "offset": 8045 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 245, "column": 1, "offset": 7898 }, "end": { "line": 245, "column": 148, "offset": 8045 }, "indent": [] }
            },
            {
                "type": "heading",
                "depth": 2,
                "children": [
                    {
                        "type": "inlineCode",
                        "value": "Object.assign()",
                        "position": {
                            "start": { "line": 247, "column": 4, "offset": 8050 },
                            "end": { "line": 247, "column": 21, "offset": 8067 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 247, "column": 1, "offset": 8047 }, "end": { "line": 247, "column": 21, "offset": 8067 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "We use ",
                        "position": { "start": { "line": 249, "column": 1, "offset": 8069 }, "end": { "line": 249, "column": 8, "offset": 8076 }, "indent": [] }
                    },
                    {
                        "type": "inlineCode",
                        "value": "Object.assign()",
                        "position": {
                            "start": { "line": 249, "column": 8, "offset": 8076 },
                            "end": { "line": 249, "column": 25, "offset": 8093 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": " often throughout the book. We use it in areas where we want to create a modified version of an existing object.",
                        "position": {
                            "start": { "line": 249, "column": 25, "offset": 8093 },
                            "end": { "line": 249, "column": 137, "offset": 8205 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 249, "column": 1, "offset": 8069 }, "end": { "line": 249, "column": 137, "offset": 8205 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "inlineCode",
                        "value": "Object.assign()",
                        "position": {
                            "start": { "line": 251, "column": 1, "offset": 8207 },
                            "end": { "line": 251, "column": 18, "offset": 8224 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": " accepts any number of objects as arguments. When the function receives two arguments, it ",
                        "position": {
                            "start": { "line": 251, "column": 18, "offset": 8224 },
                            "end": { "line": 251, "column": 108, "offset": 8314 },
                            "indent": []
                        }
                    },
                    {
                        "type": "emphasis",
                        "children": [
                            {
                                "type": "text",
                                "value": "copies",
                                "position": {
                                    "start": { "line": 251, "column": 109, "offset": 8315 },
                                    "end": { "line": 251, "column": 115, "offset": 8321 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 251, "column": 108, "offset": 8314 },
                            "end": { "line": 251, "column": 116, "offset": 8322 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": " the properties of the second object onto the first, like so:",
                        "position": {
                            "start": { "line": 251, "column": 116, "offset": 8322 },
                            "end": { "line": 251, "column": 177, "offset": 8383 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 251, "column": 1, "offset": 8207 }, "end": { "line": 251, "column": 177, "offset": 8383 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": "js",
                "meta": null,
                "value": "onst coffee = { };\nconst noCream = { cream: false };\nconst noMilk = { milk: false };\nObject.assign(coffee, noCream);",
                "position": {
                    "start": { "line": 253, "column": 1, "offset": 8385 },
                    "end": { "line": 258, "column": 4, "offset": 8511 },
                    "indent": [1, 1, 1, 1, 1]
                }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "It is idiomatic to pass in three arguments to ",
                        "position": {
                            "start": { "line": 260, "column": 1, "offset": 8513 },
                            "end": { "line": 260, "column": 47, "offset": 8559 },
                            "indent": []
                        }
                    },
                    {
                        "type": "inlineCode",
                        "value": "Object.assign()",
                        "position": {
                            "start": { "line": 260, "column": 47, "offset": 8559 },
                            "end": { "line": 260, "column": 64, "offset": 8576 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": ". The first argument is a new JavaScript object, the one that ",
                        "position": {
                            "start": { "line": 260, "column": 64, "offset": 8576 },
                            "end": { "line": 260, "column": 126, "offset": 8638 },
                            "indent": []
                        }
                    },
                    {
                        "type": "inlineCode",
                        "value": "Object.assign()",
                        "position": {
                            "start": { "line": 260, "column": 126, "offset": 8638 },
                            "end": { "line": 260, "column": 143, "offset": 8655 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": " will ultimately return. The second is the object whose properties we'd like to build off of. The last is the changes we'd like to apply:",
                        "position": {
                            "start": { "line": 260, "column": 143, "offset": 8655 },
                            "end": { "line": 260, "column": 280, "offset": 8792 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 260, "column": 1, "offset": 8513 }, "end": { "line": 260, "column": 280, "offset": 8792 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": "js",
                "meta": null,
                "value": "const coffeeWithMilk = Object.assign({}, coffee, { milk: true });",
                "position": { "start": { "line": 262, "column": 1, "offset": 8794 }, "end": { "line": 264, "column": 4, "offset": 8869 }, "indent": [1, 1] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "inlineCode",
                        "value": "Object.assign()",
                        "position": {
                            "start": { "line": 266, "column": 1, "offset": 8871 },
                            "end": { "line": 266, "column": 18, "offset": 8888 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": " is a handy method for working with \"immutable\" JavaScript objects.",
                        "position": {
                            "start": { "line": 266, "column": 18, "offset": 8888 },
                            "end": { "line": 266, "column": 85, "offset": 8955 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 266, "column": 1, "offset": 8871 }, "end": { "line": 266, "column": 85, "offset": 8955 }, "indent": [] }
            },
            {
                "type": "heading",
                "depth": 2,
                "children": [
                    {
                        "type": "text",
                        "value": "Template literals",
                        "position": {
                            "start": { "line": 268, "column": 4, "offset": 8960 },
                            "end": { "line": 268, "column": 21, "offset": 8977 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 268, "column": 1, "offset": 8957 }, "end": { "line": 268, "column": 21, "offset": 8977 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "In ES5 JavaScript, you'd interpolate variables into strings like this:",
                        "position": {
                            "start": { "line": 270, "column": 1, "offset": 8979 },
                            "end": { "line": 270, "column": 71, "offset": 9049 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 270, "column": 1, "offset": 8979 }, "end": { "line": 270, "column": 71, "offset": 9049 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": "js",
                "meta": null,
                "value": "var greeting = 'Hello, ' + user + '! It is ' + degF + ' degrees outside.';",
                "position": { "start": { "line": 272, "column": 1, "offset": 9051 }, "end": { "line": 274, "column": 4, "offset": 9135 }, "indent": [1, 1] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "With ES6 template literals, we can create the same string like this:",
                        "position": {
                            "start": { "line": 276, "column": 1, "offset": 9137 },
                            "end": { "line": 276, "column": 69, "offset": 9205 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 276, "column": 1, "offset": 9137 }, "end": { "line": 276, "column": 69, "offset": 9205 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": "js",
                "meta": null,
                "value": "const greeting = `Hello, ${user}! It is ${degF} degrees outside.`;",
                "position": { "start": { "line": 278, "column": 1, "offset": 9207 }, "end": { "line": 280, "column": 4, "offset": 9283 }, "indent": [1, 1] }
            },
            {
                "type": "heading",
                "depth": 2,
                "children": [
                    {
                        "type": "text",
                        "value": "The spread operator ",
                        "position": {
                            "start": { "line": 282, "column": 4, "offset": 9288 },
                            "end": { "line": 282, "column": 24, "offset": 9308 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": "(",
                        "position": {
                            "start": { "line": 282, "column": 24, "offset": 9308 },
                            "end": { "line": 282, "column": 26, "offset": 9310 },
                            "indent": []
                        }
                    },
                    {
                        "type": "inlineCode",
                        "value": "...",
                        "position": {
                            "start": { "line": 282, "column": 26, "offset": 9310 },
                            "end": { "line": 282, "column": 31, "offset": 9315 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": ")",
                        "position": {
                            "start": { "line": 282, "column": 31, "offset": 9315 },
                            "end": { "line": 282, "column": 33, "offset": 9317 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 282, "column": 1, "offset": 9285 }, "end": { "line": 282, "column": 33, "offset": 9317 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "In arrays, the ellipsis ",
                        "position": {
                            "start": { "line": 284, "column": 1, "offset": 9319 },
                            "end": { "line": 284, "column": 25, "offset": 9343 },
                            "indent": []
                        }
                    },
                    {
                        "type": "inlineCode",
                        "value": "...",
                        "position": {
                            "start": { "line": 284, "column": 25, "offset": 9343 },
                            "end": { "line": 284, "column": 30, "offset": 9348 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": " operator will ",
                        "position": {
                            "start": { "line": 284, "column": 30, "offset": 9348 },
                            "end": { "line": 284, "column": 45, "offset": 9363 },
                            "indent": []
                        }
                    },
                    {
                        "type": "emphasis",
                        "children": [
                            {
                                "type": "text",
                                "value": "expand",
                                "position": {
                                    "start": { "line": 284, "column": 46, "offset": 9364 },
                                    "end": { "line": 284, "column": 52, "offset": 9370 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 284, "column": 45, "offset": 9363 },
                            "end": { "line": 284, "column": 53, "offset": 9371 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": " the array that follows into the parent array. The spread operator enables us to succinctly construct new arrays as a composite of existing arrays.",
                        "position": {
                            "start": { "line": 284, "column": 53, "offset": 9371 },
                            "end": { "line": 284, "column": 200, "offset": 9518 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 284, "column": 1, "offset": 9319 }, "end": { "line": 284, "column": 200, "offset": 9518 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "Here is an example:",
                        "position": {
                            "start": { "line": 286, "column": 1, "offset": 9520 },
                            "end": { "line": 286, "column": 20, "offset": 9539 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 286, "column": 1, "offset": 9520 }, "end": { "line": 286, "column": 20, "offset": 9539 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": "js",
                "meta": null,
                "value": "onst a = [ 1, 2, 3 ];\nconst b = [ 4, 5, 6 ];\nconst c = [ ...a, ...b, 7, 8, 9 ];\n\nconsole.log(c);",
                "position": {
                    "start": { "line": 288, "column": 1, "offset": 9541 },
                    "end": { "line": 294, "column": 4, "offset": 9647 },
                    "indent": [1, 1, 1, 1, 1, 1]
                }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "Notice how this is different than if we wrote:",
                        "position": {
                            "start": { "line": 296, "column": 1, "offset": 9649 },
                            "end": { "line": 296, "column": 47, "offset": 9695 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 296, "column": 1, "offset": 9649 }, "end": { "line": 296, "column": 47, "offset": 9695 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": "js",
                "meta": null,
                "value": "const d = [a, b, 7, 8, 9];\nconsole.log(d);",
                "position": { "start": { "line": 298, "column": 1, "offset": 9697 }, "end": { "line": 301, "column": 4, "offset": 9749 }, "indent": [1, 1, 1] }
            },
            {
                "type": "heading",
                "depth": 2,
                "children": [
                    {
                        "type": "text",
                        "value": "Enhanced object literals",
                        "position": {
                            "start": { "line": 303, "column": 4, "offset": 9754 },
                            "end": { "line": 303, "column": 28, "offset": 9778 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 303, "column": 1, "offset": 9751 }, "end": { "line": 303, "column": 28, "offset": 9778 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "In ES5, all objects were required to have explicit key and value declarations:",
                        "position": {
                            "start": { "line": 305, "column": 1, "offset": 9780 },
                            "end": { "line": 305, "column": 79, "offset": 9858 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 305, "column": 1, "offset": 9780 }, "end": { "line": 305, "column": 79, "offset": 9858 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": "js",
                "meta": null,
                "value": "const explicit = {\n    getState: getState,\n    dispatch: dispatch\n};",
                "position": {
                    "start": { "line": 307, "column": 1, "offset": 9860 },
                    "end": { "line": 312, "column": 4, "offset": 9938 },
                    "indent": [1, 1, 1, 1, 1]
                }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "In ES6, you can use this terser syntax whenever the property name and variable name are the same:",
                        "position": {
                            "start": { "line": 314, "column": 1, "offset": 9940 },
                            "end": { "line": 314, "column": 98, "offset": 10037 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 314, "column": 1, "offset": 9940 }, "end": { "line": 314, "column": 98, "offset": 10037 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": "js",
                "meta": null,
                "value": "const implicit = {\n    getState,\n    dispatch\n};",
                "position": {
                    "start": { "line": 316, "column": 1, "offset": 10039 },
                    "end": { "line": 321, "column": 4, "offset": 10097 },
                    "indent": [1, 1, 1, 1, 1]
                }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "Lots of open source libraries use this syntax, so it's good to be familiar with it. But whether you use it in your own code is a matter of stylistic preference.",
                        "position": {
                            "start": { "line": 323, "column": 1, "offset": 10099 },
                            "end": { "line": 323, "column": 161, "offset": 10259 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 323, "column": 1, "offset": 10099 }, "end": { "line": 323, "column": 161, "offset": 10259 }, "indent": [] }
            },
            {
                "type": "heading",
                "depth": 2,
                "children": [
                    {
                        "type": "text",
                        "value": "Default arguments",
                        "position": {
                            "start": { "line": 325, "column": 4, "offset": 10264 },
                            "end": { "line": 325, "column": 21, "offset": 10281 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 325, "column": 1, "offset": 10261 }, "end": { "line": 325, "column": 21, "offset": 10281 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "With ES6, you can specify a default value for an argument in the case that it is ",
                        "position": {
                            "start": { "line": 327, "column": 1, "offset": 10283 },
                            "end": { "line": 327, "column": 82, "offset": 10364 },
                            "indent": []
                        }
                    },
                    {
                        "type": "inlineCode",
                        "value": "undefined",
                        "position": {
                            "start": { "line": 327, "column": 82, "offset": 10364 },
                            "end": { "line": 327, "column": 93, "offset": 10375 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": " when the function is called.",
                        "position": {
                            "start": { "line": 327, "column": 93, "offset": 10375 },
                            "end": { "line": 327, "column": 122, "offset": 10404 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 327, "column": 1, "offset": 10283 }, "end": { "line": 327, "column": 122, "offset": 10404 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "This:",
                        "position": {
                            "start": { "line": 329, "column": 1, "offset": 10406 },
                            "end": { "line": 329, "column": 6, "offset": 10411 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 329, "column": 1, "offset": 10406 }, "end": { "line": 329, "column": 6, "offset": 10411 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": "js",
                "meta": null,
                "value": "unction divide(a, b) {\n\n  const divisor = typeof b === 'undefined' ? 1 : b;\n\n  return a / divisor;\n}",
                "position": {
                    "start": { "line": 331, "column": 1, "offset": 10413 },
                    "end": { "line": 338, "column": 4, "offset": 10523 },
                    "indent": [1, 1, 1, 1, 1, 1, 1]
                }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "Can be written as this:",
                        "position": {
                            "start": { "line": 340, "column": 1, "offset": 10525 },
                            "end": { "line": 340, "column": 24, "offset": 10548 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 340, "column": 1, "offset": 10525 }, "end": { "line": 340, "column": 24, "offset": 10548 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": "js",
                "meta": null,
                "value": "function divide(a, b = 1) {\n    return a / b;\n}",
                "position": {
                    "start": { "line": 342, "column": 1, "offset": 10550 },
                    "end": { "line": 346, "column": 4, "offset": 10607 },
                    "indent": [1, 1, 1, 1]
                }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "In both cases, using the function looks like this:",
                        "position": {
                            "start": { "line": 348, "column": 1, "offset": 10609 },
                            "end": { "line": 348, "column": 51, "offset": 10659 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 348, "column": 1, "offset": 10609 }, "end": { "line": 348, "column": 51, "offset": 10659 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": "js",
                "meta": null,
                "value": "divide(14, 2);\n\ndivide(14, undefined);\n\ndivide(14);",
                "position": {
                    "start": { "line": 350, "column": 1, "offset": 10661 },
                    "end": { "line": 356, "column": 4, "offset": 10722 },
                    "indent": [1, 1, 1, 1, 1, 1]
                }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "Whenever the argument ",
                        "position": {
                            "start": { "line": 358, "column": 1, "offset": 10724 },
                            "end": { "line": 358, "column": 23, "offset": 10746 },
                            "indent": []
                        }
                    },
                    {
                        "type": "inlineCode",
                        "value": "b",
                        "position": {
                            "start": { "line": 358, "column": 23, "offset": 10746 },
                            "end": { "line": 358, "column": 26, "offset": 10749 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": " in the example above is ",
                        "position": {
                            "start": { "line": 358, "column": 26, "offset": 10749 },
                            "end": { "line": 358, "column": 51, "offset": 10774 },
                            "indent": []
                        }
                    },
                    {
                        "type": "inlineCode",
                        "value": "undefined",
                        "position": {
                            "start": { "line": 358, "column": 51, "offset": 10774 },
                            "end": { "line": 358, "column": 62, "offset": 10785 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": ", the default argument is used. Note that ",
                        "position": {
                            "start": { "line": 358, "column": 62, "offset": 10785 },
                            "end": { "line": 358, "column": 104, "offset": 10827 },
                            "indent": []
                        }
                    },
                    {
                        "type": "inlineCode",
                        "value": "null",
                        "position": {
                            "start": { "line": 358, "column": 104, "offset": 10827 },
                            "end": { "line": 358, "column": 110, "offset": 10833 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": " will not use the default argument:",
                        "position": {
                            "start": { "line": 358, "column": 110, "offset": 10833 },
                            "end": { "line": 358, "column": 145, "offset": 10868 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 358, "column": 1, "offset": 10724 }, "end": { "line": 358, "column": 145, "offset": 10868 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": "js",
                "meta": null,
                "value": "divide(14, null);",
                "position": { "start": { "line": 360, "column": 1, "offset": 10870 }, "end": { "line": 362, "column": 4, "offset": 10897 }, "indent": [1, 1] }
            },
            {
                "type": "heading",
                "depth": 2,
                "children": [
                    {
                        "type": "text",
                        "value": "Destructuring assignments",
                        "position": {
                            "start": { "line": 364, "column": 4, "offset": 10902 },
                            "end": { "line": 364, "column": 29, "offset": 10927 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 364, "column": 1, "offset": 10899 }, "end": { "line": 364, "column": 29, "offset": 10927 }, "indent": [] }
            },
            {
                "type": "heading",
                "depth": 3,
                "children": [
                    {
                        "type": "text",
                        "value": "For arrays",
                        "position": {
                            "start": { "line": 366, "column": 5, "offset": 10933 },
                            "end": { "line": 366, "column": 15, "offset": 10943 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 366, "column": 1, "offset": 10929 }, "end": { "line": 366, "column": 15, "offset": 10943 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "In ES5, extracting and assigning multiple elements from an array looked like this:",
                        "position": {
                            "start": { "line": 368, "column": 1, "offset": 10945 },
                            "end": { "line": 368, "column": 83, "offset": 11027 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 368, "column": 1, "offset": 10945 }, "end": { "line": 368, "column": 83, "offset": 11027 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": "js",
                "meta": null,
                "value": "ar fruits = [ 'apples', 'bananas', 'oranges' ];\nvar fruit1 = fruits[0];\nvar fruit2 = fruits[1];",
                "position": {
                    "start": { "line": 370, "column": 1, "offset": 11029 },
                    "end": { "line": 374, "column": 4, "offset": 11134 },
                    "indent": [1, 1, 1, 1]
                }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "In ES6, we can use the destructuring syntax to accomplish the same task like this:",
                        "position": {
                            "start": { "line": 376, "column": 1, "offset": 11136 },
                            "end": { "line": 376, "column": 83, "offset": 11218 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 376, "column": 1, "offset": 11136 }, "end": { "line": 376, "column": 83, "offset": 11218 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": "js",
                "meta": null,
                "value": "const [veg1, veg2] = ['asparagus', 'broccoli', 'onion'];\nconsole.log(veg1);\nconsole.log(veg2);",
                "position": {
                    "start": { "line": 378, "column": 1, "offset": 11220 },
                    "end": { "line": 382, "column": 4, "offset": 11324 },
                    "indent": [1, 1, 1, 1]
                }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "The variables in the array on the left are \"matched\" and assigned to the corresponding elements in the array on the right. Note that ",
                        "position": {
                            "start": { "line": 384, "column": 1, "offset": 11326 },
                            "end": { "line": 384, "column": 134, "offset": 11459 },
                            "indent": []
                        }
                    },
                    {
                        "type": "inlineCode",
                        "value": "'onion'",
                        "position": {
                            "start": { "line": 384, "column": 134, "offset": 11459 },
                            "end": { "line": 384, "column": 143, "offset": 11468 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": " is ignored and has no variable bound to it.",
                        "position": {
                            "start": { "line": 384, "column": 143, "offset": 11468 },
                            "end": { "line": 384, "column": 187, "offset": 11512 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 384, "column": 1, "offset": 11326 }, "end": { "line": 384, "column": 187, "offset": 11512 }, "indent": [] }
            },
            {
                "type": "heading",
                "depth": 3,
                "children": [
                    {
                        "type": "text",
                        "value": "For objects",
                        "position": {
                            "start": { "line": 386, "column": 5, "offset": 11518 },
                            "end": { "line": 386, "column": 16, "offset": 11529 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 386, "column": 1, "offset": 11514 }, "end": { "line": 386, "column": 16, "offset": 11529 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "We can do something similar for extracting object properties into variables:",
                        "position": {
                            "start": { "line": 388, "column": 1, "offset": 11531 },
                            "end": { "line": 388, "column": 77, "offset": 11607 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 388, "column": 1, "offset": 11531 }, "end": { "line": 388, "column": 77, "offset": 11607 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": "js",
                "meta": null,
                "value": "const smoothie = {\n    fats: ['avocado', 'peanut butter', 'greek yogurt'],\n    liquids: ['almond milk'],\n    greens: ['spinach'],\n    fruits: ['blueberry', 'banana']\n};\n\nconst { liquids, fruits } = smoothie;\n\nconsole.log(liquids);\nconsole.log(fruits);",
                "position": {
                    "start": { "line": 390, "column": 1, "offset": 11609 },
                    "end": { "line": 402, "column": 4, "offset": 11870 },
                    "indent": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
                }
            },
            {
                "type": "heading",
                "depth": 3,
                "children": [
                    {
                        "type": "text",
                        "value": "Parameter context matching",
                        "position": {
                            "start": { "line": 404, "column": 5, "offset": 11876 },
                            "end": { "line": 404, "column": 31, "offset": 11902 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 404, "column": 1, "offset": 11872 }, "end": { "line": 404, "column": 31, "offset": 11902 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "We can use these same principles to bind arguments inside a function to properties of an object supplied as an argument:",
                        "position": {
                            "start": { "line": 406, "column": 1, "offset": 11904 },
                            "end": { "line": 406, "column": 121, "offset": 12024 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 406, "column": 1, "offset": 11904 }, "end": { "line": 406, "column": 121, "offset": 12024 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": "js",
                "meta": null,
                "value": "const containsSpinach = ({ greens }) => {\n    if (greens.find((g) => g === 'spinach')) {\n        return true;\n    } else {\n        return false;\n    }\n};\n\ncontainsSpinach(smoothie);",
                "position": {
                    "start": { "line": 408, "column": 1, "offset": 12026 },
                    "end": { "line": 418, "column": 4, "offset": 12217 },
                    "indent": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
                }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "We do this often with functional React components:",
                        "position": {
                            "start": { "line": 420, "column": 1, "offset": 12219 },
                            "end": { "line": 420, "column": 51, "offset": 12269 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 420, "column": 1, "offset": 12219 }, "end": { "line": 420, "column": 51, "offset": 12269 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": "js",
                "meta": null,
                "value": "const IngredientList = ({ ingredients, onClick }) => (\n    <ul className=\"IngredientList\">\n        {ingredients.map((i) => (\n            <li key={i.id} onClick={() => onClick(i.id)} className=\"item\">\n                {i.name}\n            </li>\n        ))}\n    </ul>\n);",
                "position": {
                    "start": { "line": 422, "column": 1, "offset": 12271 },
                    "end": { "line": 432, "column": 4, "offset": 12548 },
                    "indent": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
                }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "Here, we use destructuring to extract the props into variables ",
                        "position": {
                            "start": { "line": 434, "column": 1, "offset": 12550 },
                            "end": { "line": 434, "column": 64, "offset": 12613 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": "(",
                        "position": {
                            "start": { "line": 434, "column": 64, "offset": 12613 },
                            "end": { "line": 434, "column": 66, "offset": 12615 },
                            "indent": []
                        }
                    },
                    {
                        "type": "inlineCode",
                        "value": "ingredients",
                        "position": {
                            "start": { "line": 434, "column": 66, "offset": 12615 },
                            "end": { "line": 434, "column": 79, "offset": 12628 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": " and ",
                        "position": {
                            "start": { "line": 434, "column": 79, "offset": 12628 },
                            "end": { "line": 434, "column": 84, "offset": 12633 },
                            "indent": []
                        }
                    },
                    {
                        "type": "inlineCode",
                        "value": "onClick",
                        "position": {
                            "start": { "line": 434, "column": 84, "offset": 12633 },
                            "end": { "line": 434, "column": 93, "offset": 12642 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": ")",
                        "position": {
                            "start": { "line": 434, "column": 93, "offset": 12642 },
                            "end": { "line": 434, "column": 95, "offset": 12644 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": " that we then use inside the component's function body.",
                        "position": {
                            "start": { "line": 434, "column": 95, "offset": 12644 },
                            "end": { "line": 434, "column": 150, "offset": 12699 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 434, "column": 1, "offset": 12550 }, "end": { "line": 434, "column": 150, "offset": 12699 }, "indent": [] }
            }
        ],
        "position": { "start": { "line": 1, "column": 1, "offset": 0 }, "end": { "line": 435, "column": 1, "offset": 12700 } }
    }
}
